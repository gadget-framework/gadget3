[{"path":"/dev/articles/incorporating-observation-data.html","id":"gadget2-gadget3-translation","dir":"Articles","previous_headings":"","what":"gadget2<->gadget3 translation","title":"Incorporating observation data into models","text":"function many gadget2’s likeihood components collapsed 2 functions. summary translate: Use g3l_catchdistribution() Set function_f parameter matching g3l_distribution_*() function, e.g. g3l_distribution_sumofsquares() Supply data columns year, step, area, age, length, number Use g3l_abundancedistribution() Set function_f parameter g3l_distribution_surveyindices_log() g3l_distribution_surveyindices_linear() Supply data columns year, step, area, length, number Use g3l_catchdistribution(function_f = g3l_distribution_sumofsquares()) Supply data columns year, step, area, fleet, weight","code":""},{"path":"/dev/articles/incorporating-observation-data.html","id":"observation-data-format","dir":"Articles","previous_headings":"","what":"Observation data format","title":"Incorporating observation data into models","text":"gadget3 bases ’s decision aggregate incoming data. Whilst tries “right thing” cases, ’s important get shape data match require. , incoming data.frame() converted array(). can use g3_distribution_preview() function see array look like, see gadget3 treat observation data. Critically, data needs column names recognises. following breaks can column.","code":""},{"path":"/dev/articles/incorporating-observation-data.html","id":"weight-and-number-columns","dir":"Articles","previous_headings":"Observation data format","what":"weight and number columns","title":"Incorporating observation data into models","text":"least weight number column needs supplied. number column present value compared number individuals group. weight column present value compared total biomass group. weight suitable total catches kilos, otherwise number column generally used.","code":""},{"path":"/dev/articles/incorporating-observation-data.html","id":"year-and-step-columns-landings-abundance-indices","dir":"Articles","previous_headings":"Observation data format","what":"year and step columns: Landings, abundance indices","title":"Incorporating observation data into models","text":"year column given, catch/abundance aggregated year. Gaps allowed, comparisons made year/step. following observations compared total number indivduals caught years 1999, 2000, 2002, 2003: step given, restrict step within year (see ?g3a_time define steps year). following example, aggregate spring 1999 & 2000, autumn 2001. catch spring 2001, periods mentioned, ignored:","code":"g3_distribution_preview(read.table(header = TRUE, text=\" year  number 1999    1000 2000    1002 2002    1004 2003    1008 \")) ##        time ## length  1999 2000 2002 2003 ##   0:Inf 1000 1002 1004 1008 g3_distribution_preview(read.table(header = TRUE, text=\" year step number 1999    2   1020 2000    2   2040 2001    3   1902 \")) ##        time ## length  1999-02 2000-02 2001-03 ##   0:Inf    1020    2040    1902"},{"path":"/dev/articles/incorporating-observation-data.html","id":"length-column-length-distribution-data","dir":"Articles","previous_headings":"Observation data format","what":"length column: Length distribution data","title":"Incorporating observation data into models","text":"Adding length column aggregate catch/abundance data length bins observation data. instance: Note unlike year & step columns, gaps data preserved, preview output see NA missing year & length combination. default compare 0 point, behaviour controlled missing_val parameter ?g3l_catchdistribution. Length aggregations hand-crafted like , length column generated using dplyr::group_by() cut(): gadget3 also automatically read aggregation attributes used ?mfdb::mfdb_sample_count.","code":"g3_distribution_preview(read.table(header = TRUE, text=\" year  length number 1999  [0,10)  1023 1999 [10,20)  2938 1999 [20,30)  3948 1999 [30,40)  3855 2000  [0,10)  1023 2000 [10,20)  2938 # NB: No [10,30) 2000 [30,40)  3855 \")) ##        time ## length  1999 2000 ##   0:10  1023 1023 ##   10:20 2938 2938 ##   20:30 3948   NA ##   30:40 3855 3855 # Generate an unaggregated length distribution ldist.lln.raw <- data.frame(     year = c(1999, 2000),     length = sample(10:75, 100, replace = TRUE),     number = 1,     stringsAsFactors = FALSE)  # Group length into 10-long bins ldist.lln.raw |> dplyr::group_by(   year = year,   length = cut(length, breaks = seq(10, 100, by = 10), right = FALSE) ) |> dplyr::summarise(number = sum(number), .groups = 'keep') -> ldist.lln.agg ldist.lln.agg ## # A tibble: 14 × 3 ## # Groups:   year, length [14] ##     year length  number ##    <dbl> <fct>    <dbl> ##  1  1999 [10,20)     11 ##  2  1999 [20,30)      5 ##  3  1999 [30,40)      7 ##  4  1999 [40,50)     11 ##  5  1999 [50,60)      8 ##  6  1999 [60,70)      7 ##  7  1999 [70,80)      1 ##  8  2000 [10,20)      3 ##  9  2000 [20,30)      6 ## 10  2000 [30,40)     14 ## 11  2000 [40,50)     10 ## 12  2000 [50,60)      9 ## 13  2000 [60,70)      6 ## 14  2000 [70,80)      2 # NB: The last 2 bins are empty, but because cut() creates a factor column, #     gadget3 knows about them even though they don't appear in the data. g3_distribution_preview(ldist.lln.agg) ##         time ## length   1999 2000 ##   10:20    11    3 ##   20:30     5    6 ##   30:40     7   14 ##   40:50    11   10 ##   50:60     8    9 ##   60:70     7    6 ##   70:80     1    2 ##   80:90    NA   NA ##   90:100   NA   NA # Import data into a temporary database library(mfdb) mdb <- mfdb(tempfile(fileext=\".duckdb\")) ldist.lln.raw$month <- 1 ldist.lln.raw$areacell <- 'all'  # NB: We have to have an areacell mapping for MFDB mfdb_import_area(mdb, data.frame(name = c('all'), size = c(5))) mfdb_import_survey(mdb, ldist.lln.raw)  # Use mfdb_sample_count to extract & group in the same manner as above ldist.lln.agg <- mfdb_sample_count(mdb, c('length'), list(     year=1999:2000,     length = mfdb_interval(\"len\", seq(10, 100, by = 10)) ))[[1]] g3_distribution_preview(ldist.lln.agg, area_group = c(all=1))  mfdb_disconnect(mdb)"},{"path":"/dev/articles/incorporating-observation-data.html","id":"age-column-age-length-distribution-data","dir":"Articles","previous_headings":"Observation data format","what":"age column: Age-Length distribution data","title":"Incorporating observation data into models","text":"Age-length aggregations can performed adding age column similar manner length column: can group individual age values: …group ages together: , gaps data preserved, missing_val used decide . , gadget3 also interpret aggregation generated group_by(age = cut(...)) ?mfdb::mfdb_sample_count.","code":"g3_distribution_preview(read.table(header = TRUE, text=\" year  age  length number 1999    1  [0,10)  1026 1999    1 [10,20)  2936 1999    1 [20,30)  3962 1999    1 [30,40)  3863 1999    2  [0,10)  1026 1999    2 [10,20)  2936 1999    2 [20,30)  3962 1999    2 [30,40)  3863 \")) ## , , time = 1999 ##  ##        age ## length  age1 age2 ##   0:10  1026 1026 ##   10:20 2936 2936 ##   20:30 3962 3962 ##   30:40 3863 3863 g3_distribution_preview(read.table(header = TRUE, text=\" year  age    length number 1999  [1,1]    [0,10)  1026 1999  [1,1]   [10,20)  2936 1999  [1,1]   [20,30)  3962 1999  [1,1]   [30,40)  3863 1999  [2,4]  [0,10)  1011 # Missing [2,4] [10,20) 1999  [2,4] [20,30)  3946 1999  [2,4] [30,40)  3872 \")) ## , , time = 1999 ##  ##        age ## length   1:1  2:4 ##   0:10  1026 1011 ##   10:20 2936   NA ##   20:30 3962 3946 ##   30:40 3863 3872"},{"path":"/dev/articles/incorporating-observation-data.html","id":"area-column","dir":"Articles","previous_headings":"Observation data format","what":"area column","title":"Incorporating observation data into models","text":"stock divided multiple areas, data can broken area , gaps data preserved, missing_val used decide . However, area isn’t mentioned (note IXc figure data), won’t compared.","code":"area_names <- g3_areas(c('IXa', 'IXb', 'IXc'))  g3_distribution_preview(read.table(header = TRUE, text=\" year    area    number 1999   IXa   1000 1999   IXb   4305 2000   IXa   7034 2000   IXb   2381 2001   IXb   3913 \"), area_group = area_names)[length = '0:Inf',,] ##       area ## time    IXa  IXb ##   1999 1000 4305 ##   2000 7034 2381 ##   2001   NA 3913"},{"path":"/dev/articles/incorporating-observation-data.html","id":"stock-column-maturity-stage-distribution","dir":"Articles","previous_headings":"Observation data format","what":"stock column: Maturity stage distribution","title":"Incorporating observation data into models","text":"multiple stocks, example divided species mature immature substocks, can use division likelihood components also: stock names match gadget3 uses, error generated. , gaps data preserved, missing_val used decide .","code":"st_imm <- g3_stock(c(species = 'fish', 'imm'), 1:10) st_mat <- g3_stock(c(species = 'fish', 'mat'), 1:10)  g3_distribution_preview(read.table(header = TRUE, text=\" year    stock    number 1999   fish_imm   1000 1999   fish_mat   4305 2000   fish_imm   7034 2000   fish_mat   2381 2001   fish_mat   3913 \"), stocks = list(st_imm, st_mat))[length = '0:Inf',,] ##           time ## stock      1999 2000 2001 ##   fish_imm 1000 7034   NA ##   fish_mat 4305 2381 3913"},{"path":"/dev/articles/incorporating-observation-data.html","id":"fleet-column","dir":"Articles","previous_headings":"Observation data format","what":"fleet column","title":"Incorporating observation data into models","text":"stock names match gadget3 uses, error generated. , gaps data preserved, missing_val used decide .","code":"f_comm <- g3_fleet('comm') f_surv <- g3_fleet('surv')  g3_distribution_preview(read.table(header = TRUE, text=\" year    fleet    number 1999   f_comm   1000 1999   f_surv   4305 2000   f_comm   7034 2000   f_surv   2381 2001   f_surv   3913 \"), fleets = list(f_comm, f_surv))[length = '0:Inf',,] ##         time ## fleet    1999 2000 2001 ##   f_comm 1000 7034   NA ##   f_surv 4305 2381 3913"},{"path":"/dev/articles/introduction-single-stock.html","id":"gadget3-and-the-gadget-framework","dir":"Articles","previous_headings":"","what":"Gadget3 and the gadget framework","title":"Introduction to gadget3: A single stock model","text":"Gadget3 marine modelling R package, ecosystem model. Instead, gives building blocks (actions) can assembled produce complex model situation requires. can converted forms, importantly TMB objective function R function, can optimised run generate reporting. name suggests, ’s designed successor previous gadget modelling framework. actions currently available designed similar, identical, components present gadget2. familiar previous versions gadget find naming similar, translation old input files gadget3 can done rote fashion. Gadget3 core part known gadget framework, set packages designed work together produce ecosystem models. gadget3: core package, assembles ecosystem models R code MFDB: data-handling package, help aggregating & formatting time-series data suitable using inputs model gadgetutils: set utilities help produce optimised model gadgetplots: Tools produce plots HTML pages summarising model output g3experiments: Additional actions / features yet ready inclusion gadget3 modelwizard: GUI package assist building model scripts, gadget3 SS3 packages loosely coupled; need everything installed create gadget3 model. However, prove useful mentioned . gadget3 package can installed via. CRAN: full set packages can installed :","code":"install.packages('gadget3') install.packages('MFDB') remotes::install_github('gadget-framework/gadgetutils') remotes::install_github('gadget-framework/gadgetplots') remotes::install_github('gadget-framework/g3experiments')"},{"path":"/dev/articles/introduction-single-stock.html","id":"creating-a-single-species-model","dir":"Articles","previous_headings":"","what":"Creating a (single species) model","title":"Introduction to gadget3: A single stock model","text":"opposed gadget2 modelling frameworks, input data format. Instead, model configuration written R script. document walk parts model script single-species model, introducing concepts along way. first step script load gadget3. also use dplyr formatting input data:","code":"library(gadget3) library(dplyr)"},{"path":"/dev/articles/introduction-single-stock.html","id":"actions","dir":"Articles","previous_headings":"Creating a (single species) model","what":"Actions","title":"Introduction to gadget3: A single stock model","text":"gadget3 model defined list actions. Actions snippets code define processes model. start , add g3a_time() list actions: acts timekeeping model, starting year 1979 progressing 2023. year 4 time steps , equal length. convention, build actions array everything required, allowing sections added/removed necessary. Ultimately, list converted either R TMB code g3_to_r() g3_to_tmb() respectively. can try already time action, generate function count years & steps:","code":"actions <- list()  # Create time definitions ####################  actions_time <- list(   g3a_time(     1979L, 2023L,     step_lengths = c(3L, 3L, 3L, 3L)),   NULL)  actions <- c(actions, actions_time) g3_to_r(actions_time) function (param)  {     stopifnot(\"retro_years\" %in% names(param))     assert_msg <- function(expr, message) {         if (isFALSE(expr)) {             warning(message)             return(TRUE)         }         return(FALSE)     }     cur_time <- -1L     stopifnot(\"project_years\" %in% names(param))     project_years <- param[[\"project_years\"]]     cur_year <- 0L     start_year <- 1979L     step_count <- length(step_lengths)     cur_year_projection <- FALSE     end_year <- 2023L     cur_step <- 0L     cur_step_size <- step_lengths[[1]]/12     cur_step_final <- FALSE     retro_years <- param[[\"retro_years\"]]     total_steps <- length(step_lengths) * (end_year - retro_years -          start_year + project_years) + length(step_lengths) -          1L     nll <- 0     while (TRUE) {         {             comment(\"g3a_time: Start of time period\")             cur_time <- cur_time + 1L             if (cur_time == 0 && assert_msg(param[[\"retro_years\"]] >=                  0, \"retro_years must be >= 0\"))                  return(NaN)             if (cur_time == 0 && assert_msg(project_years >=                  0, \"project_years must be >= 0\"))                  return(NaN)             cur_year <- start_year + (cur_time%/%step_count)             cur_year_projection <- cur_year > end_year - param[[\"retro_years\"]]             cur_step <- (cur_time%%step_count) + 1L             cur_step_size <- step_lengths[[cur_step]]/12             cur_step_final <- cur_step == step_count         }         {             if (cur_time > total_steps)                  return(nll)         }     } } <bytecode: 0x55995e5b3840> <environment: 0x5599613e0938> g3_to_tmb(actions_time) #include <TMB.hpp>    template<class Type> Type objective_function<Type>::operator() () {     DATA_SCALAR(reporting_enabled); DATA_UPDATE(reporting_enabled);     PARAMETER(retro_years);     auto assert_msg = [](bool expr, std::string message) -> bool {     if (!expr) { Rf_warning(message.c_str()); return TRUE; }     return FALSE; };     int cur_time = -1;     PARAMETER(project_years);     int cur_year = 0;     int start_year = 1979;     vector<int> step_lengths(4); step_lengths.setConstant(3);     auto step_count = (step_lengths).size();     int cur_year_projection = false;     int end_year = 2023;     int cur_step = 0;     auto cur_step_size = step_lengths ( 0 ) / (double)(12);     int cur_step_final = false;     auto total_steps = (step_lengths).size()*(end_year - retro_years - start_year + project_years) + (step_lengths).size() - 1;     Type nll = (double)(0);      while (true) {         {             // g3a_time: Start of time period;             cur_time += 1;             if ( cur_time == 0 && assert_msg(retro_years >= (double)(0), \"retro_years must be >= 0\") ) {                 return NAN;             }             if ( cur_time == 0 && assert_msg(project_years >= (double)(0), \"project_years must be >= 0\") ) {                 return NAN;             }             cur_year = start_year + (((int) cur_time) / ((int) step_count));             cur_year_projection = cur_year > end_year - retro_years;             cur_step = (cur_time % step_count) + 1;             cur_step_size = step_lengths ( cur_step - 1 ) / (double)(12);             cur_step_final = cur_step == step_count;         }         {             if ( cur_time > total_steps ) {                 return nll;             }         }     } }"},{"path":"/dev/articles/introduction-single-stock.html","id":"stocks","dir":"Articles","previous_headings":"Creating a (single species) model","what":"Stocks","title":"Introduction to gadget3: A single stock model","text":"actions, key concept gadget3 model stock. means describe populations within model. simpler scenarios , stocks map directly species. However, complicated models may one stock per-maturation-stage, sex . define stock g3_stock() associated g3s_* functions, example: define stock called “fish” length bins 10..100, add area live & 5 age bins. Ultimately, stock functions define structure arrays hold state stock within gadget3. can use g3_stock_instance() see example array used: example, abundance mean weight stock stored one arrays within model.","code":"area_names <- g3_areas(c('IXa', 'IXb'))  # Create stock definition for fish #################### fish <- g3_stock(\"fish\", seq(10, 100, 10)) |>   g3s_livesonareas(area_names[\"IXa\"]) |>   g3s_age(1L, 5L) # aperm() re-orders dimensions for more compact printing aperm(g3_stock_instance(fish, 0), c(1,3,2)) ## , , area = IXa ##  ##          age ## length    age1 age2 age3 age4 age5 ##   10:20      0    0    0    0    0 ##   20:30      0    0    0    0    0 ##   30:40      0    0    0    0    0 ##   40:50      0    0    0    0    0 ##   50:60      0    0    0    0    0 ##   60:70      0    0    0    0    0 ##   70:80      0    0    0    0    0 ##   80:90      0    0    0    0    0 ##   90:100     0    0    0    0    0 ##   100:Inf    0    0    0    0    0"},{"path":"/dev/articles/introduction-single-stock.html","id":"stock-actions","dir":"Articles","previous_headings":"Creating a (single species) model","what":"Stock actions","title":"Introduction to gadget3: A single stock model","text":"Now stock, can add apply population dynamics actions, save actions array earlier: g3a_* actions 1:1 parallel gadget2 stockfile components, familiar config files expect. action can click reference get information , summary defined: g3a_growmature(): growth model g3a_naturalmortality(): Natural mortality stock g3a_initialconditions_normalcv(): Initial recruitment, defining numbers & mean weights start model g3a_renewal_normalparam(): Recruitment occuring every spring (run_step = 2), independent stock status g3a_age(): Move fish age groups end year g3l_understocking(): penalty applied likelihood used prevent fish eaten/fished available. actions available besides , instance g3a_spawn() can used recruitment dependent stock size instead g3a_renewal_normalparam(). full list, see ??gadget3::\"G3 action\" package reference index. Likelihood actions actions sum output model’s overall likelihood score, analogous gadget2’s likelihood components. order actions defined preserved. model runs, steps happen order, re-ordered match standard action order, see ?g3_action_order.","code":"actions_fish <- list(   g3a_growmature(fish, g3a_grow_impl_bbinom(     maxlengthgroupgrowth = 4L)),   g3a_naturalmortality(fish),   g3a_initialconditions_normalcv(fish),   g3a_renewal_normalparam(fish,     run_step = 2),   g3a_age(fish),   NULL)  actions_likelihood_fish <- list(   g3l_understocking(list(fish), nll_breakdown = TRUE),   NULL)  actions <- c(actions, actions_fish, actions_likelihood_fish)"},{"path":"/dev/articles/introduction-single-stock.html","id":"model-parameters","dir":"Articles","previous_headings":"Creating a (single species) model > Stock actions","what":"Model parameters","title":"Introduction to gadget3: A single stock model","text":"definition look quite barren, bar maxlengthgroupgrowth provided figures stock dynamics. defaults actions define model parameters can set fixed values optimised later, rather baking model. instance, can see g3a_naturalmortality() creates parameter M default: Without arguments, use g3a_naturalmortality_exp(), sets M g3_parameterized(\"M\", by_stock = TRUE, by_age = TRUE). tells gadget3 parameter M expected model, broken stock (.e. include name stock), age within stock. can define model just g3a_time() g3a_initialconditions_normalcv() see end result. able run function need provide list parameter values, format list defined attached parameter template: g3a_report_detail() adds standard reporting model, cover ’s use later. can fill values run model:  Altering K results corresponding changes stock structure:","code":"head(g3a_naturalmortality) ##                                                                             ## 1 function (stock, mortality_f = g3a_naturalmortality_exp(), run_f = TRUE,  ## 2     run_at = g3_action_order$naturalmortality)                            ## 3 {                                                                         ## 4     out <- new.env(parent = emptyenv())                                   ## 5     action_name <- unique_action_name()                                   ## 6     stock__num <- g3_stock_instance(stock, 0) head(g3a_naturalmortality_exp) ##                                                                                    ## 1 function (param_f = g3_parameterized(\"M\", by_stock = by_stock,                   ## 2     by_age = TRUE), by_stock = TRUE, action_step_size_f = ~cur_step_size)        ## 3 {                                                                                ## 4     f_substitute(~exp(-(param_f) * action_step_size_f), list(param_f = param_f,  ## 5         action_step_size_f = action_step_size_f))                                ## 6 } simple_actions <- list(     g3a_time(1990, 1991),     g3a_initialconditions_normalcv(fish)) simple_fn <- g3_to_r(c(simple_actions, list(     g3a_report_detail(simple_actions) )))  params <- attr(simple_fn, 'parameter_template') unlist(params) ##      retro_years        fish.Linf           fish.K          fish.t0  ##              0.0              1.0              1.0              0.0  ##       fish.lencv fish.init.scalar      fish.init.1      fish.init.2  ##              0.1              1.0              1.0              1.0  ##      fish.init.3      fish.init.4      fish.init.5         fish.M.1  ##              1.0              1.0              1.0              0.0  ##         fish.M.2         fish.M.3         fish.M.4         fish.M.5  ##              0.0              0.0              0.0              0.0  ##           init.F           recage      fish.walpha       fish.wbeta  ##              0.0              0.0              0.0              0.0  ##    report_detail    project_years  ##              1.0              0.0 params$fish.init.scalar <- 10 params$fish.init.1 <- 10 params$fish.init.2 <- 10 params$fish.init.3 <- 10 params$fish.init.4 <- 10 params$fish.init.5 <- 10 params$fish.M.1 <- 0.15 params$fish.M.2 <- 0.15 params$fish.M.3 <- 0.15 params$fish.M.4 <- 0.15 params$fish.M.5 <- 0.15 params$init.F <- 0.5 params$recage <- 0 params$fish.Linf <- max(g3_stock_def(fish, \"midlen\")) params$fish.K <- 0.3 params$fish.t0 <- g3_stock_def(fish, \"minage\") - 0.8 params$fish.lencv <- 0.1 params$report_detail <- 1  # Run model and pull out final abundance from the result abund <- attr(simple_fn(params), \"detail_fish__num\")[,area = 'IXa', , time = '1990-01']  par(mfrow=c(3, 2), mar = c(2,2,1,0)) for (a in dimnames(abund)$age) barplot(abund[, age = a], main = a) params$fish.K <- 0.9 abund <- attr(simple_fn(params), \"detail_fish__num\")[,area = 'IXa', , time = '1990-01'] par(mfrow=c(3, 2), mar = c(2,2,1,0)) for (a in dimnames(abund)$age) barplot(abund[, age = a], main = a)"},{"path":"/dev/articles/introduction-single-stock.html","id":"fleet-actions","dir":"Articles","previous_headings":"Creating a (single species) model","what":"Fleet actions","title":"Introduction to gadget3: A single stock model","text":"Fleets gadget3 modelled stock objects, predate target stocks. define fleet, need introduce historical data model. case generate random data, aggretation steps apply regardless.","code":""},{"path":"/dev/articles/introduction-single-stock.html","id":"landings-data","dir":"Articles","previous_headings":"Creating a (single species) model > Fleet actions","what":"Landings data","title":"Introduction to gadget3: A single stock model","text":"use expand.grid() generate data.frame() possible year/step/area cominations. use dplyr::mutate() add weight column table, using rnorm() generate random numbers distributed mean. identity() function -nothing function passes input. use move assignment onto ’s line. end result data.frame() total biomass figures:  Note haven’t provided data years/steps, ’ll assume fleet works spring. information works, see vignette(\"incorporating-observation-data\").","code":"# Fleet data for f_surv #################################  # Landings data: For each year/step/area expand.grid(year = 1990:1994, step = 2, area = 'IXa') |>     # Generate a random total landings by weight     mutate(weight = rnorm(n(), mean = 1000, sd = 100)) |>     # Assign result to landings_f_surv     identity() -> landings_f_surv landings_f_surv ##   year step area    weight ## 1 1990    2  IXa  943.9524 ## 2 1991    2  IXa  976.9823 ## 3 1992    2  IXa 1155.8708 ## 4 1993    2  IXa 1007.0508 ## 5 1994    2  IXa 1012.9288 plot(landings_f_surv[c('year', 'weight')], ylim = c(0, 2000), col = \"red\")"},{"path":"/dev/articles/introduction-single-stock.html","id":"length-distribution-data","dir":"Articles","previous_headings":"Creating a (single species) model > Fleet actions","what":"Length distribution data","title":"Introduction to gadget3: A single stock model","text":"Next generate length-distribution data: , expand.grid() mutate() generate table random lengths distributed mean. unaggregated data, save using assign() can see end result: next use group_by() cut() aggregate year, step & length bins. cut() responsible binning continuous data. can see running single values: Note add Inf end list breaks, create plus-group. also specify right = FALSE groups closed left. Also note breaks aren’t stock definition, allowed gadget3 re-aggregate model data match. information works, see vignette(\"incorporating-observation-data\"). Finally, summarise counts number group puts result number column. end result looks like:","code":"# Length distribution data: Randomly generate 100 samples in each year/step/area expand.grid(year = 1990:1994, step = 2, area = 'IXa', length = rep(NA, 100)) |>   # Generate random lengths for these samples   mutate(length = rnorm(n(), mean = 50, sd = 20)) |>   # Save unagggregated data into ldist_f_surv.raw   identity() -> ldist_f_surv.raw  # Aggregate .raw data ldist_f_surv.raw |>   # Group into length bins   group_by(       year = year,       step = step,       length = cut(length, breaks = c(seq(0, 80, 20), Inf), right = FALSE) ) |>   # Report count in each length bin   summarise(number = n(), .groups = 'keep') |>   # Save into ldist_f_surv   identity() -> ldist_f_surv head(ldist_f_surv.raw) ##   year step area   length ## 1 1990    2  IXa 84.30130 ## 2 1991    2  IXa 59.21832 ## 3 1992    2  IXa 24.69878 ## 4 1993    2  IXa 36.26294 ## 5 1994    2  IXa 41.08676 ## 6 1990    2  IXa 74.48164 cut(c(50), breaks = c(seq(0, 80, 20), Inf), right = FALSE) ## [1] [40,60) ## Levels: [0,20) [20,40) [40,60) [60,80) [80,Inf) summary(ldist_f_surv) ##       year           step        length      number      ##  Min.   :1990   Min.   :2   [0,20)  :5   Min.   : 2.00   ##  1st Qu.:1991   1st Qu.:2   [20,40) :5   1st Qu.: 6.00   ##  Median :1992   Median :2   [40,60) :5   Median :19.50   ##  Mean   :1992   Mean   :2   [60,80) :5   Mean   :19.23   ##  3rd Qu.:1993   3rd Qu.:2   [80,Inf):5   3rd Qu.:26.75   ##  Max.   :1994   Max.   :2   NA's    :1   Max.   :46.00 years <- unique(ldist_f_surv$year) par(mfrow=c(2, ceiling(length(years) / 2))) for (y in years) plot(as.data.frame(ldist_f_surv) |>     filter(year == y & step == 2) |>     select(length, number), main = y, ylim = c(0, 60))"},{"path":"/dev/articles/introduction-single-stock.html","id":"age-length-distribution-data","dir":"Articles","previous_headings":"Creating a (single species) model > Fleet actions","what":"Age-length distribution data","title":"Introduction to gadget3: A single stock model","text":"Finally, can apply techniques generate aggregate age-length data: end result data.frame() year/step/age/length/number:","code":"# Assume 5 * 5 samples in each year/step/area expand.grid(year = 1990:1994, step = 2, area = 'IXa', age = rep(NA, 5), length = rep(NA, 5)) |>   # Generate random lengths/ages for these samples   mutate(length = rnorm(n(), mean = 50, sd = 20)) |>   # Generate random whole numbers for age   mutate(age = floor(runif(n(), min = 1, max = 5))) |>   # Group into length/age bins   group_by(       year = year,       step = step,       age = age,       length = cut(length, breaks = c(seq(0, 80, 20), Inf), right = FALSE) ) |>   # Report count in each length bin   summarise(number = n(), .groups = 'keep') ->   aldist_f_surv summary(aldist_f_surv) ##       year           step        age             length       number      ##  Min.   :1990   Min.   :2   Min.   :1.000   [0,20)  : 3   Min.   :1.000   ##  1st Qu.:1991   1st Qu.:2   1st Qu.:1.250   [20,40) :14   1st Qu.:1.000   ##  Median :1992   Median :2   Median :3.000   [40,60) :19   Median :2.000   ##  Mean   :1992   Mean   :2   Mean   :2.552   [60,80) :15   Mean   :2.155   ##  3rd Qu.:1993   3rd Qu.:2   3rd Qu.:3.750   [80,Inf): 5   3rd Qu.:3.000   ##  Max.   :1994   Max.   :2   Max.   :4.000   NA's    : 2   Max.   :6.000 years <- unique(aldist_f_surv$year) ages <- unique(aldist_f_surv$age)  par(mfrow=c(length(years), length(ages)), mar = c(2,2,1,0)) for (y in years) for (a in ages) plot(as.data.frame(ldist_f_surv) |>     filter(year == y & step == 2) |>     select(length, number), main = sprintf(\"year = %d, age = %s\", y, a), ylim = c(0, 60))"},{"path":"/dev/articles/introduction-single-stock.html","id":"fleet-definition","dir":"Articles","previous_headings":"Creating a (single species) model > Fleet actions","what":"Fleet definition","title":"Introduction to gadget3: A single stock model","text":"fleet, f_surv, defined much way stock , however different set actions: define stock g3_fleet() instead g3_stock(), fleet isn’t divided length age bins. Simiarly, g3s_age() divide age bins isn’t relevant. action f_surv predate fish. define g3a_predate_fleet(), setting: suitabilities: defines predator’s preference stocks. case use g3_suitability_exponentiall50() logarithmic dependence difference length individuals l50l_{50}, length prey 50% probability predation catchability_f: controls predator’s catch/effort. case use g3a_predate_catchability_totalfleet() define effort based total biomass caught, g3_timeareadata() provide timeseries table landings data generated possible settings, follow links function definitions. Finally define likelihood actions using g3l_catchdistribution(), compare modelled catch length & age-length distribution data generated . Note difference 2 likelihood actions structure inputted data. aldist_f_surv unlike ldist_f_surv age column, gadget3 detect group modelled catch accordingly. Similarly neither data.frame full range years, comparisons made outside ranges. detail can done , see vignette(\"incorporating-observation-data\"). function_f defines method comparison modelled catch & observation data, aggregation done. g3l_distribution_sumofsquares() case compares sum squared difference. options use , follow links reference. add futher fleets model, just repeat code different fleet name.","code":"# Create fleet definition for f_surv #################### f_surv <- g3_fleet(\"f_surv\") |> g3s_livesonareas(area_names[\"IXa\"]) actions_f_surv <- list(   g3a_predate_fleet(     f_surv,     list(fish),     suitabilities = g3_suitability_exponentiall50(),     catchability_f = g3a_predate_catchability_totalfleet(       g3_timeareadata(\"landings_f_surv\", landings_f_surv, \"weight\", areas = area_names))),   NULL) actions <- c(actions, actions_f_surv) actions_likelihood_f_surv <- list(   g3l_catchdistribution(     \"ldist_f_surv\",     obs_data = ldist_f_surv,     fleets = list(f_surv),     stocks = list(fish),     function_f = g3l_distribution_sumofsquares(),     area_group = area_names,     report = TRUE,     nll_breakdown = TRUE),   g3l_catchdistribution(     \"aldist_f_surv\",     obs_data = aldist_f_surv,     fleets = list(f_surv),     stocks = list(fish),     function_f = g3l_distribution_sumofsquares(),     area_group = area_names,     report = TRUE,     nll_breakdown = TRUE),   NULL) actions <- c(actions, actions_likelihood_f_surv)"},{"path":"/dev/articles/introduction-single-stock.html","id":"survey-indices","dir":"Articles","previous_headings":"Creating a (single species) model","what":"Survey indices","title":"Introduction to gadget3: A single stock model","text":"Measures abudnance, commercial CPUE data, can added observation data adding g3l_abundancedistribution() likelihood actions: create data.frame() year/step/area/weight columns, input likelihood action fleet. key differences catch distribution : using g3l_abundancedistribution() instead g3l_catchdistribution(), compares model abundance instead catch fleet. observation data weight column instead number. results us comparing total biomass, instead number individuals. use g3l_distribution_surveyindices_log() perform linear regression calculate likelihood score. fixed beta (slope) regression, alpha estimated. reverse , estimate setting NULL.","code":"# Create abundance index for si_cpue ########################  # Generate random data expand.grid(year = 1990:1994, step = 3, area = 'IXa') |>     # Fill in a weight column with total biomass for the year/step/area combination     mutate(weight = runif(n(), min = 10000, max = 100000)) ->     dist_si_cpue  actions_likelihood_si_cpue <- list(    g3l_abundancedistribution(     \"dist_si_cpue\",     dist_si_cpue,          stocks = list(fish),     function_f = g3l_distribution_surveyindices_log(alpha = NULL, beta = 1),     area_group = area_names,     report = TRUE,     nll_breakdown = TRUE),   NULL)  actions <- c(actions, actions_likelihood_si_cpue)"},{"path":"/dev/articles/introduction-single-stock.html","id":"creating-model-functions-and-parameterization","dir":"Articles","previous_headings":"Creating a (single species) model","what":"Creating model functions and Parameterization","title":"Introduction to gadget3: A single stock model","text":"point, ready convert model code: g3_to_tmb() take list actions convert C++ code suitable use TMB. g3a_report_detail() g3l_bounds_penalty() add actions model, based actions already within : g3a_report_detail(): Adds abundance / catch reporting suitable use gadgetutils::g3_fit() gadgetplots::gadget_plots() g3l_bounds_penalty(): Adds large likelihood penalty parameter straying outside lower/upper bounds. allows us use lower/upper bounds parameters optimising methods don’t support natively. able run model, need provide values (initial guesses) parameters. Earlier used g3_to_r() saw resultant parameter template. g3_to_tmb() can , however template complex: TMB parameter template following columns: switch: parameter name type: parameter vector? Currently unused value: initial value parameter optimise: parameter optimised fixed random: random effects applied parameter? See vignette('random-effects') lower: lower bound parameter upper: upper bound parameter parscale: Relative scale parameter vs. others model expecting 5 parameters, fish.M.1 fish.M.5, age group. can either fix known values, configure bounds optimise within. Filling individual values can tedious. helper, g3_init_val(), assist filling values . Instead setting individual values can assign values using wildcard characters *, # (numeric), | (): Setting lower & upper bounds automatically turns optimise, fills parscale: can also use spread shorthand lower = value * (1 - spread), upper = value * (1 + spread): allows us fill parameters without worrying much stock/fleet naming: Finally ready optimisation runs. g3_tmb_adfun() wrapper around TMB::MakeADFun() TMB::compile, producing TMB objective function. gadgetutils::g3_iterative() optimises based iterative reweighting finished, can view output using gadgetplots::gadget_plots(). finished, can view output web browser:","code":"# Create model objective function ####################  # Apply bounds in code - the other option would be using control = list(lower = g3_tmb_lower(params.in), ...) model_code <- g3_to_tmb(c(actions, list(     g3a_report_detail(actions),     g3l_bounds_penalty(actions) ))) simple_code <- g3_to_tmb(list(     g3a_time(1990, 1991),     g3a_naturalmortality(fish) )) attr(simple_code, 'parameter_template') ##                      switch type value optimise random lower upper parscale ## retro_years     retro_years          0    FALSE  FALSE    NA    NA       NA ## fish.M.1           fish.M.1          0     TRUE  FALSE    NA    NA       NA ## fish.M.2           fish.M.2          0     TRUE  FALSE    NA    NA       NA ## fish.M.3           fish.M.3          0     TRUE  FALSE    NA    NA       NA ## fish.M.4           fish.M.4          0     TRUE  FALSE    NA    NA       NA ## fish.M.5           fish.M.5          0     TRUE  FALSE    NA    NA       NA ## project_years project_years          0    FALSE  FALSE    NA    NA       NA attr(simple_code, \"parameter_template\") |>     g3_init_val(\"*.M.#\", 0.1) |>     g3_init_val(\"*.M.3\", 0.5) |>     g3_init_val(\"*.M.2|4\", 0.2) ##                      switch type value optimise random lower upper parscale ## retro_years     retro_years          0    FALSE  FALSE    NA    NA       NA ## fish.M.1           fish.M.1        0.1    FALSE  FALSE    NA    NA       NA ## fish.M.2           fish.M.2        0.2    FALSE  FALSE    NA    NA       NA ## fish.M.3           fish.M.3        0.5    FALSE  FALSE    NA    NA       NA ## fish.M.4           fish.M.4        0.2    FALSE  FALSE    NA    NA       NA ## fish.M.5           fish.M.5        0.1    FALSE  FALSE    NA    NA       NA ## project_years project_years          0    FALSE  FALSE    NA    NA       NA attr(simple_code, \"parameter_template\") |>     g3_init_val(\"*.M.#\", 0.15, lower = 0.001, upper = 1) ##                      switch type value optimise random lower upper parscale ## retro_years     retro_years          0    FALSE  FALSE    NA    NA       NA ## fish.M.1           fish.M.1       0.15     TRUE  FALSE 0.001     1    0.999 ## fish.M.2           fish.M.2       0.15     TRUE  FALSE 0.001     1    0.999 ## fish.M.3           fish.M.3       0.15     TRUE  FALSE 0.001     1    0.999 ## fish.M.4           fish.M.4       0.15     TRUE  FALSE 0.001     1    0.999 ## fish.M.5           fish.M.5       0.15     TRUE  FALSE 0.001     1    0.999 ## project_years project_years          0    FALSE  FALSE    NA    NA       NA attr(simple_code, \"parameter_template\") |>     g3_init_val(\"*.M.#\", 0.15, spread = 0.5) ##                      switch type value optimise random lower upper parscale ## retro_years     retro_years          0    FALSE  FALSE    NA    NA       NA ## fish.M.1           fish.M.1       0.15     TRUE  FALSE 0.075 0.225     0.15 ## fish.M.2           fish.M.2       0.15     TRUE  FALSE 0.075 0.225     0.15 ## fish.M.3           fish.M.3       0.15     TRUE  FALSE 0.075 0.225     0.15 ## fish.M.4           fish.M.4       0.15     TRUE  FALSE 0.075 0.225     0.15 ## fish.M.5           fish.M.5       0.15     TRUE  FALSE 0.075 0.225     0.15 ## project_years project_years          0    FALSE  FALSE    NA    NA       NA # Guess l50 / linf based on stock sizes estimate_l50 <- g3_stock_def(fish, \"midlen\")[[length(g3_stock_def(fish, \"midlen\")) / 2]] estimate_linf <- max(g3_stock_def(fish, \"midlen\")) estimate_t0 <- g3_stock_def(fish, \"minage\") - 0.8  attr(model_code, \"parameter_template\") |>   # fish.init.scalar & fish.rec.scalar: Overall scalar for recruitment/initial conditions, see g3a_renewal_normalparam()   g3_init_val(\"*.rec|init.scalar\", 10, lower = 0.001, upper = 200) |>   # fish.rec.(age): Per-age recriutment scalar, see g3a_renewal_normalparam()   g3_init_val(\"*.init.#\", 10, lower = 0.001, upper = 200) |>   # fish.rec.(year): Recruitment level year-on-year, see g3a_renewal_normalparam()   g3_init_val(\"*.rec.#\", 100, lower = 1e-6, upper = 1000) |>   # fish.rec.sd: Standard deviation for recruitment, see g3a_renewal_normalparam()   g3_init_val(\"*.rec.sd\", 5, lower = 4, upper = 20) |>   # init.F: Offset for initial M, see g3a_renewal_initabund()   g3_init_val(\"init.F\", 0.5, lower = 0.1, upper = 1) |>    # fish.M.(age): per-age M for our species, see g3a_naturalmortality()   g3_init_val(\"*.M.#\", 0.15, lower = 0.001, upper = 1) |>    # fish.Linf, fish.K, fish.t0: VonB parameters for our species, see g3a_renewal_vonb_t0(), g3a_grow_lengthvbsimple()   g3_init_val(\"*.Linf\", estimate_linf, spread = 0.2) |>   g3_init_val(\"*.K\", 0.3, lower = 0.04, upper = 1.2) |>   g3_init_val(\"*.t0\", estimate_t0, spread = 2) |>    # fish.walpha, fish.wbeta: Age/weight relationship for initialconditions, renewal, see g3a_renewal_normalparam()   g3_init_val(\"*.walpha\", 0.01, optimise = FALSE) |>   g3_init_val(\"*.wbeta\", 3, optimise = FALSE) |>    # fish.f_surv.alpha, fish.f_surv.l50: Curve/l50 for fishing suitability, see g3_suitability_exponentiall50()   g3_init_val(\"*.*.alpha\", 0.07, lower = 0.01, upper = 0.2) |>   g3_init_val(\"*.*.l50\", estimate_l50, spread = 0.25) |>    # fish.bbin: Beta for beta-binomial distribution for fish growth, see g3a_grow_impl_bbinom()   g3_init_val(\"*.bbin\", 100, lower = 1e-05, upper = 1000) |>    # identity() is a do-nothing function, but it lets us finish on a new line   identity() -> params.in # Optimise model ################################ obj.fn <- g3_tmb_adfun(model_code, params.in)  params.out <- gadgetutils::g3_iterative(getwd(),     wgts = \"WGTS\",     model = model_code,     params.in = params.in,     grouping = list(         fleet = c(\"ldist_f_surv\", \"aldist_f_surv\"),         abund = c(\"dist_si_cpue\")),     method = \"BFGS\",     control = list(maxit = 1000, reltol = 1e-10),     cv_floor = 0.05) # Generate detailed report ###################### fit <- gadgetutils::g3_fit(model_code, params.out) gadgetplots::gadget_plots(fit, \"figs\", file_type = \"html\") utils::browseURL(\"figs/model_output_figures.html\")"},{"path":"/dev/articles/introduction-single-stock.html","id":"appendix-full-model-script","dir":"Articles","previous_headings":"","what":"Appendix: Full model script","title":"Introduction to gadget3: A single stock model","text":"convenience, sections model script joined together:","code":""},{"path":"/dev/articles/model-debugging.html","id":"debugging-the-r-model","dir":"Articles","previous_headings":"","what":"Debugging the R model","title":"Debugging a gadget3 model","text":"theory, TMB R output gadget3 identically-behaving functions, instead trying decipher TMB model wrong, can use R function instead familiar environment, example using standard tools options(error=recover). can also use edit() edit R function directly re-run model: …useful want add trace print() statements around particular part model ’s failing, e.g. insert breakpoint adding recover() line.","code":"# Model setup will look something like this ling_model <- g3_to_r(...)  ling_model <- edit(ling_model) ; ling_model(ling_param)"},{"path":"/dev/articles/model-debugging.html","id":"debugging-the-tmb-model","dir":"Articles","previous_headings":"","what":"Debugging the TMB model","title":"Debugging a gadget3 model","text":"’s possible working R model doesn’t compile using TMB, due relative strictness Eigen array library comparison R arrays, example. case ’ll need debug TMB version.","code":""},{"path":"/dev/articles/model-debugging.html","id":"preserving-your-r-session-whilst-building","dir":"Articles","previous_headings":"Debugging the TMB model","what":"Preserving your R session whilst building","title":"Debugging a gadget3 model","text":"model crashes whilst forming TMB ADFun object, takes R session . prevent , wrap g3_tmb_adfun() TMB::gdbsource() follows: output_script = TRUE tells g3_tmb_adfun() , compilation, write temporary R script build TMB ADFun object (presumably crash process). TMB::gdbsource() turn runs provided R script fresh R session wrapped gdb. default print stacktrace quit, show crash occured.","code":"# Model setup will look something like this tmb_ling <- g3_to_tmb(...) tmb_param <- attr(tmb_ling, 'parameter_template')  writeLines(TMB::gdbsource(g3_tmb_adfun(     tmb_ling,     tmb_param,     compile_flags = \"-g\",     output_script = TRUE)))"},{"path":"/dev/articles/model-debugging.html","id":"editing-c-code","dir":"Articles","previous_headings":"Debugging the TMB model","what":"Editing C++ code","title":"Debugging a gadget3 model","text":"R model can edit raw C++ source building: can… Print contents single values std::cout << ling__Linf << std::endl; Use ().cols() ().rows() get size array expression Print contents array objects ling_imm__consratio.print()","code":"tmb_ling <- edit(tmb_ling) writeLines(TMB::gdbsource(g3_tmb_adfun(     tmb_ling,     tmb_param,     compile_flags = \"-g\",     output_script = TRUE)))"},{"path":"/dev/articles/model-debugging.html","id":"interactive-debugging","dir":"Articles","previous_headings":"Debugging the TMB model","what":"Interactive debugging","title":"Debugging a gadget3 model","text":"theory can use interactive = TRUE TMB::gdbsource(), however eats error messages ’s better hand: Note .print() method available arrays, referenced least model source, otherwise won’t compiled . Use edit(tmb_ling) add somewhere first.","code":"> g3_tmb_adfun(tmb_ling, tmb_param, compile_flags = \"-g\", output_script = TRUE) [1] \"/tmp/RtmpysTVvW/file3da4a6f13a80c.R\"  R -d gdb (gdb) run --vanilla < /tmp/RtmpysTVvW/file3da4a6f13a80c.R  . . . Compilation, crash at some point . . . (gdb) up (gdb) up (gdb) up (gdb) call ling_imm__consratio.print() Array dim: 35 1 8 Array val: -nan -nan -nan -nan (gdb) call ling_imm__num.print() Array dim: 35 1 8 Array val: -nan -nan -nan -nan -nan  (gdb) print cur_time $5 = 0"},{"path":"/dev/articles/model-debugging.html","id":"random-effects","dir":"Articles","previous_headings":"Debugging the TMB model","what":"Random effects","title":"Debugging a gadget3 model","text":"notes debugging errors random effects models.","code":""},{"path":"/dev/articles/model-debugging.html","id":"tracing-inner-model","dir":"Articles","previous_headings":"Debugging the TMB model > Random effects","what":"Tracing inner model","title":"Debugging a gadget3 model","text":"Control arguments inner TMB:::newton() model can provided g3_tmb_adfun(), e.g. add tracing:","code":"obj.fn <- g3_tmb_adfun(bounded_code, params.in, inner.control = list(trace = 3, maxit = 100))"},{"path":"/dev/articles/model-debugging.html","id":"missing-value-for-m","dir":"Articles","previous_headings":"Debugging the TMB model > Random effects","what":"Missing value for m","title":"Debugging a gadget3 model","text":"error: …comes TMB’s newton optimiser, essentially says NaN hessian matrix. m case equivalent :","code":"Error in if (m < 0) { : missing value where TRUE/FALSE needed local({ min(diag(spHess(random = TRUE, set_tail = random[1]))) }, envir = obj.fn$env)"},{"path":"/dev/articles/model-debugging.html","id":"missing-value-par---parold","dir":"Articles","previous_headings":"Debugging the TMB model > Random effects","what":"Missing value par - parold","title":"Debugging a gadget3 model","text":"par list parameters optimise became NaN, various reasons, likely solveCholesky() failed.","code":"Error in if (norm(par - parold) < step.tol) { :   missing value where TRUE/FALSE needed"},{"path":"/dev/articles/model-debugging.html","id":"separate-netwton-optimisation","dir":"Articles","previous_headings":"Debugging the TMB model > Random effects","what":"Separate netwton optimisation","title":"Debugging a gadget3 model","text":"Generally, TMB:::newton() called obj.fn$env$ff. can extract arguments provided editing function: Around line 16, add code extract arguments provided, e.g: can perform single run extract arguments: …modify newton function:","code":"obj.fn$env$ff <- edit(obj.fn$env$ff) assign(\"newt.args\", c(list(par = eval(random.start),             fn = f0, gr = function(x) f0(x, order = 1), he = H0,             env = env), inner.control), env = globalenv()) obj.fn$fn() do.call(TMB:::newton, newt.args) newt <- TMB:::newton newt <- edit(newt) do.call(newt, newt.args)"},{"path":"/dev/articles/model-structure.html","id":"r-formula-or-the-tilde-operator","dir":"Articles","previous_headings":"","what":"R formula, or the tilde operator","title":"Structure of a gadget3 model","text":"Crucial gadget3 R formula, created using tilde operator (~). get used several places R various things, core tilde operator stores R code left right hand sides, well environment created , amounts variables defined time. example, let’s declare function produces formula, make : str() shows f contains formula’s code (result cows + pigs), environment attached: can look environment, see values got set cows & pigs: can similarly g, see results different: Note : R hasn’t point worked cows + pigs, code stored later use. environment (.e. variables defined point) “remembered” g3 model ’s core list formula objects make model. can even use Gadget3 compile simple example R function: …TMB template: Obviously isn’t useful function, can see environment formula provided initial values variables, code put main loop. Also note , despite appearances, ’re generically converting R C++. ’s subset R gadget3 understands knows convert. Using R libraries isn’t possible, example. simplify scoping rules, assume variables either global, different names, iterators loops, case local loop.","code":"get_formula <- function (size) {     # NB: The reason we make a function here is so we have an isolated environment     # to make examples cleaner.     cows <- size * 2     pigs <- size * 4     return(~cows + pigs) } f <- get_formula(8) g <- get_formula(5) str(f) ## Class 'formula'  language ~cows + pigs ##   ..- attr(*, \".Environment\")=<environment: 0x55778d76ee38> str(as.list(environment(f))) ## List of 3 ##  $ pigs: num 32 ##  $ cows: num 16 ##  $ size: num 8 str(as.list(environment(g))) ## List of 3 ##  $ pigs: num 20 ##  $ cows: num 10 ##  $ size: num 5 g3_to_r(list(f)) ## function (param)  ## { ##     cows <- 16 ##     pigs <- 32 ##     while (TRUE) { ##         cows + pigs ##     } ## } ## <bytecode: 0x55778ed7f050> ## <environment: 0x55778e596df8> g3_to_tmb(list(f)) ## #include <TMB.hpp> ##  ##  ##  ## template<class Type> ## Type objective_function<Type>::operator() () { ##     DATA_SCALAR(reporting_enabled); DATA_UPDATE(reporting_enabled); ##     Type cows = (double)(16); ##     Type pigs = (double)(32); ##  ##     while (true) { ##         cows + pigs; ##     } ## }"},{"path":"/dev/articles/model-structure.html","id":"actions","dir":"Articles","previous_headings":"","what":"Actions","title":"Structure of a gadget3 model","text":"reality never providing formulae insert models directly, ’d using g3 action functions generate . action functions, prefixed g3a_, produce list formula objects—action gadget3 parlance. gadget functionality implemented. One simplest g3a_time, produces code count years/steps, stop end time period reached. example: Like example , definitions part formula’s environment, compile see years ending code. case years hard-coded, definitions formula end result added model. example:","code":"g3a_time(1990, 1999) ## $`-01` ## ~{ ##     debug_label(\"g3a_time: Start of time period\") ##     cur_time <- cur_time + 1L ##     if (cur_time == 0 && assert_msg(g3_param(\"retro_years\", value = 0,  ##         optimise = FALSE) >= 0, \"retro_years must be >= 0\"))  ##         return(NaN) ##     if (cur_time == 0 && assert_msg(project_years >= 0, \"project_years must be >= 0\"))  ##         return(NaN) ##     cur_year <- start_year + (cur_time%/%step_count) ##     cur_year_projection <- cur_year > end_year - g3_param(\"retro_years\",  ##         value = 0, optimise = FALSE) ##     cur_step <- (cur_time%%step_count) + 1L ##     cur_step_size <- step_lengths[[cur_step]]/12 ##     cur_step_final <- cur_step == step_count ## } ## <environment: 0x55778ac28fc8> ##  ## $`001` ## ~{ ##     if (cur_time > total_steps)  ##         return(nll) ## } ## <environment: 0x55778f341868> g3_to_r(g3a_time(1990, 1999)) ## function (param)  ## { ##     stopifnot(\"retro_years\" %in% names(param)) ##     assert_msg <- function(expr, message) { ##         if (isFALSE(expr)) { ##             warning(message) ##             return(TRUE) ##         } ##         return(FALSE) ##     } ##     cur_time <- -1L ##     stopifnot(\"project_years\" %in% names(param)) ##     project_years <- param[[\"project_years\"]] ##     cur_year <- 0L ##     start_year <- 1990L ##     step_lengths <- 12L ##     step_count <- length(step_lengths) ##     cur_year_projection <- FALSE ##     end_year <- 1999L ##     cur_step <- 0L ##     cur_step_size <- step_lengths[[1]]/12 ##     cur_step_final <- FALSE ##     retro_years <- param[[\"retro_years\"]] ##     total_steps <- length(step_lengths) * (end_year - retro_years -  ##         start_year + project_years) + length(step_lengths) -  ##         1L ##     nll <- 0 ##     while (TRUE) { ##         { ##             comment(\"g3a_time: Start of time period\") ##             cur_time <- cur_time + 1L ##             if (cur_time == 0 && assert_msg(param[[\"retro_years\"]] >=  ##                 0, \"retro_years must be >= 0\"))  ##                 return(NaN) ##             if (cur_time == 0 && assert_msg(project_years >=  ##                 0, \"project_years must be >= 0\"))  ##                 return(NaN) ##             cur_year <- start_year + (cur_time%/%step_count) ##             cur_year_projection <- cur_year > end_year - param[[\"retro_years\"]] ##             cur_step <- (cur_time%%step_count) + 1L ##             cur_step_size <- step_lengths[[cur_step]]/12 ##             cur_step_final <- cur_step == step_count ##         } ##         { ##             if (cur_time > total_steps)  ##                 return(nll) ##         } ##     } ## } ## <bytecode: 0x557788333730> ## <environment: 0x55778d5b1550> g3_to_r(g3a_time(1990, ~start_year + 4 )) ## function (param)  ## { ##     stopifnot(\"retro_years\" %in% names(param)) ##     assert_msg <- function(expr, message) { ##         if (isFALSE(expr)) { ##             warning(message) ##             return(TRUE) ##         } ##         return(FALSE) ##     } ##     cur_time <- -1L ##     stopifnot(\"project_years\" %in% names(param)) ##     project_years <- param[[\"project_years\"]] ##     cur_year <- 0L ##     start_year <- 1990L ##     step_lengths <- 12L ##     step_count <- length(step_lengths) ##     cur_year_projection <- FALSE ##     end_year <- start_year + 4 ##     cur_step <- 0L ##     cur_step_size <- step_lengths[[1]]/12 ##     cur_step_final <- FALSE ##     retro_years <- param[[\"retro_years\"]] ##     total_steps <- length(step_lengths) * (end_year - retro_years -  ##         start_year + project_years) + length(step_lengths) -  ##         1L ##     nll <- 0 ##     while (TRUE) { ##         { ##             comment(\"g3a_time: Start of time period\") ##             cur_time <- cur_time + 1L ##             if (cur_time == 0 && assert_msg(param[[\"retro_years\"]] >=  ##                 0, \"retro_years must be >= 0\"))  ##                 return(NaN) ##             if (cur_time == 0 && assert_msg(project_years >=  ##                 0, \"project_years must be >= 0\"))  ##                 return(NaN) ##             cur_year <- start_year + (cur_time%/%step_count) ##             cur_year_projection <- cur_year > end_year - param[[\"retro_years\"]] ##             cur_step <- (cur_time%%step_count) + 1L ##             cur_step_size <- step_lengths[[cur_step]]/12 ##             cur_step_final <- cur_step == step_count ##         } ##         { ##             if (cur_time > total_steps)  ##                 return(nll) ##         } ##     } ## } ## <bytecode: 0x55778d756508> ## <environment: 0x55778acea230>"},{"path":"/dev/articles/model-structure.html","id":"stocks","dir":"Articles","previous_headings":"","what":"Stocks","title":"Structure of a gadget3 model","text":"Beyond g3a_time(), pretty much action describing changes stock, possibly via. interacting another stock (fleet). keep track state, use g3_stock objects. describe several things: dimensions one use making array store data stock. example want array number individuals, lengthgroups use? many ages store? many () areas ? code need iterate stock? Say want add 1 individual lengthgroup, loop dimensions? looping one stock, find corresponding entries another stock? example, fleet interested prey area. g3_stock objects can created either g3_stock() g3_fleet(), former store lengthgroups, fleets . Actions store data stocks, instance current number individuals, arrays called stock instances. can see sort arrays stock make using g3_stock_instance: add complexity model, can use g3s_ functions, g3s_livesonareas() g3s_age(), adds area age dimensions stock: use action g3a_growmature(), provide g3_stock(s) act , formula objects fill gaps code. g3a_growmature() iterate areas/ages stock , apply growth length group finds. g3a_growmature() doesn’t care areas age, just . However, formula supply can. age area variables set current age/area, can use writing formula. example: …can see provided formula used calculate ling_imm__growth_l ling_imm__growth_w, age area available us thanks loops provided stock. can also define formulas reference . Gadget3 add definitions code appropriate. example: Note custom_delta_l recalculated every loop, since uses area, whereas custom_delta_w calculated step.","code":"ling_imm <- g3_stock('ling_imm', seq(0, 50, 10)) g3_stock_instance(ling_imm) ## length ##   0:10  10:20  20:30  30:40  40:50 50:Inf  ##     NA     NA     NA     NA     NA     NA ling_imm <- g3_stock('ling_imm', seq(0, 50, 10)) %>%     g3s_age(3, 10) g3_stock_instance(ling_imm) ##         age ## length   age3 age4 age5 age6 age7 age8 age9 age10 ##   0:10     NA   NA   NA   NA   NA   NA   NA    NA ##   10:20    NA   NA   NA   NA   NA   NA   NA    NA ##   20:30    NA   NA   NA   NA   NA   NA   NA    NA ##   30:40    NA   NA   NA   NA   NA   NA   NA    NA ##   40:50    NA   NA   NA   NA   NA   NA   NA    NA ##   50:Inf   NA   NA   NA   NA   NA   NA   NA    NA ling_imm <- g3_stock('ling_imm', seq(0, 50, 10)) %>%     g3s_livesonareas(c(1,2)) %>%     g3s_age(3, 10) g3_stock_instance(ling_imm)[,,'age3'] ##         area ## length   area1 area2 ##   0:10      NA    NA ##   10:20     NA    NA ##   20:30     NA    NA ##   30:40     NA    NA ##   40:50     NA    NA ##   50:Inf    NA    NA fn <- g3_to_r(g3a_growmature(     ling_imm,     impl_f = g3a_grow_impl_bbinom(         delta_len_f = ~age * 10,         delta_wgt_f = ~area * 20,         beta_f = ~g3_param(\"ling.bbin\"),         maxlengthgroupgrowth = 4),     transition_f = ~TRUE)) fn ## function (param)  ## { ##     stopifnot(\"ling.bbin\" %in% names(param)) ##     growth_bbinom <- function(delt_l, binn, beta) { ##         alpha <- (beta * delt_l)/(binn - delt_l) ##         x <- 0:binn ##         na <- length(alpha) ##         n <- length(x) - 1 ##         alpha <- rep(alpha, n + 1) ##         x <- rep(x, each = na) ##         val <- exp(lgamma(n + 1) + lgamma(alpha + beta) + lgamma(n -  ##             x + beta) + lgamma(x + alpha) - lgamma(n - x + 1) -  ##             lgamma(x + 1) - lgamma(n + alpha + beta) - lgamma(beta) -  ##             lgamma(alpha)) ##         dim(val) <- c(na, n + 1) ##         return(val) ##     } ##     avoid_zero_vec <- function(a) { ##         (pmax(a * 1000, 0) + log1p(exp(pmin(a * 1000, 0) - pmax(a *  ##             1000, 0))))/1000 ##     } ##     avoid_zero <- function(a) { ##         (pmax(a * 1000, 0) + log1p(exp(pmin(a * 1000, 0) - pmax(a *  ##             1000, 0))))/1000 ##     } ##     g3a_grow_matrix_wgt <- function(delta_w) { ##         na <- dim(delta_w)[[1]] ##         n <- dim(delta_w)[[2]] - 1 ##         wgt.matrix <- array(0, c(na, na)) ##         for (lg in 1:na) { ##             if (lg == na) { ##                 wgt.matrix[lg, lg:na] <- delta_w[lg, 1:(na -  ##                   lg + 1)] ##             } ##             else if (lg + n > na) { ##                 wgt.matrix[lg, lg:na] <- delta_w[lg, 1:(na -  ##                   lg + 1)] ##             } ##             else { ##                 wgt.matrix[lg, lg:(n + lg)] <- delta_w[lg, ] ##             } ##         } ##         return(wgt.matrix) ##     } ##     g3a_grow_matrix_len <- function(delta_l) { ##         na <- dim(delta_l)[[1]] ##         n <- dim(delta_l)[[2]] - 1 ##         growth.matrix <- array(0, c(na, na)) ##         for (lg in 1:na) { ##             if (lg == na) { ##                 growth.matrix[na, na] <- sum(delta_l[lg, ]) ##             } ##             else if (lg + n > na) { ##                 growth.matrix[lg, lg:(na - 1)] <- delta_l[lg,  ##                   1:(na - lg)] ##                 growth.matrix[lg, na] <- sum(delta_l[lg, (na -  ##                   lg + 1):(n + 1)]) ##             } ##             else { ##                 growth.matrix[lg, lg:(n + lg)] <- delta_l[lg,  ##                   ] ##             } ##         } ##         return(growth.matrix) ##     } ##     g3a_grow_apply <- function(growth.matrix, wgt.matrix, input_num,  ##         input_wgt) { ##         na <- dim(growth.matrix)[[1]] ##         avoid_zero_vec <- function(a) { ##             (pmax(a * 1000, 0) + log1p(exp(pmin(a * 1000, 0) -  ##                 pmax(a * 1000, 0))))/1000 ##         } ##         growth.matrix <- growth.matrix * as.vector(input_num) ##         wgt.matrix <- growth.matrix * (wgt.matrix + as.vector(input_wgt)) ##         growth.matrix.sum <- colSums(growth.matrix) ##         return(array(c(growth.matrix.sum, colSums(wgt.matrix)/avoid_zero_vec(growth.matrix.sum)),  ##             dim = c(na, 2))) ##     } ##     assert_msg <- function(expr, message) { ##         if (isFALSE(expr)) { ##             warning(message) ##             return(TRUE) ##         } ##         return(FALSE) ##     } ##     ling_imm__minage <- 3L ##     ling_imm__maxage <- 10L ##     ling_imm__growth_l <- array(NA, dim = structure(6:5, names = c(\"length\",  ##         \"delta\")), dimnames = list(length = c(\"0:10\", \"10:20\",  ##         \"20:30\", \"30:40\", \"40:50\", \"50:Inf\"), delta = c(\"0\",  ##         \"1\", \"2\", \"3\", \"4\"))) ##     ling_imm__plusdl <- 10 ##     ling_imm__growth_w <- array(NA, dim = structure(6:5, names = c(\"length\",  ##         \"delta\")), dimnames = list(length = c(\"0:10\", \"10:20\",  ##         \"20:30\", \"30:40\", \"40:50\", \"50:Inf\"), delta = c(\"0\",  ##         \"1\", \"2\", \"3\", \"4\"))) ##     ling_imm__num <- array(0, dim = c(length = 6L, area = 2L,  ##         age = 8L), dimnames = list(length = c(\"0:10\", \"10:20\",  ##         \"20:30\", \"30:40\", \"40:50\", \"50:Inf\"), area = c(\"area1\",  ##         \"area2\"), age = c(\"age3\", \"age4\", \"age5\", \"age6\", \"age7\",  ##         \"age8\", \"age9\", \"age10\"))) ##     ling_imm__wgt <- array(1, dim = c(length = 6L, area = 2L,  ##         age = 8L), dimnames = list(length = c(\"0:10\", \"10:20\",  ##         \"20:30\", \"30:40\", \"40:50\", \"50:Inf\"), area = c(\"area1\",  ##         \"area2\"), age = c(\"age3\", \"age4\", \"age5\", \"age6\", \"age7\",  ##         \"age8\", \"age9\", \"age10\"))) ##     ling_imm__prevtotal <- 0 ##     while (TRUE) { ##         { ##             comment(\"g3a_grow for ling_imm\") ##             for (age in seq(ling_imm__minage, ling_imm__maxage,  ##                 by = 1)) { ##                 ling_imm__age_idx <- age - ling_imm__minage +  ##                   1L ##                 for (ling_imm__area_idx in seq_along(ling_imm__areas)) { ##                   area <- ling_imm__areas[[ling_imm__area_idx]] ##                   growth_delta_l <- (ling_imm__growth_l[] <- growth_bbinom(avoid_zero_vec((age *  ##                     10)/ling_imm__plusdl), 4L, avoid_zero(param[[\"ling.bbin\"]]))) ##                   growth_delta_w <- (ling_imm__growth_w[] <- area *  ##                     20) ##                   growthmat_w <- g3a_grow_matrix_wgt(growth_delta_w) ##                   growthmat_l <- g3a_grow_matrix_len(growth_delta_l) ##                   growthresult <- g3a_grow_apply(growthmat_l,  ##                     growthmat_w, ling_imm__num[, ling_imm__area_idx,  ##                       ling_imm__age_idx], ling_imm__wgt[, ling_imm__area_idx,  ##                       ling_imm__age_idx]) ##                   { ##                     if (FALSE)  ##                       ling_imm__prevtotal <- sum(ling_imm__num[,  ##                         ling_imm__area_idx, ling_imm__age_idx]) ##                     comment(\"Update ling_imm using delta matrices\") ##                     ling_imm__num[, ling_imm__area_idx, ling_imm__age_idx] <- growthresult[,  ##                       (1)] ##                     ling_imm__wgt[, ling_imm__area_idx, ling_imm__age_idx] <- growthresult[,  ##                       (2)] ##                     if (FALSE)  ##                       assert_msg(~abs(ling_imm__prevtotal - sum(ling_imm__num[,  ##                         ling_imm__area_idx, ling_imm__age_idx])) <  ##                         1e-04, \"g3a_growmature: ling_imm__num totals are not the same before and after growth\") ##                   } ##                 } ##             } ##         } ##     } ## } ## <bytecode: 0x55778bcd7370> ## <environment: 0x557788104e80> custom_delta_l <- ~area * 99 custom_delta_w <- ~ling_imm__plusdl * 44 fn <- g3_to_r(g3a_growmature(     ling_imm,     impl_f = g3a_grow_impl_bbinom(         delta_len_f = ~age * custom_delta_l * 10,         delta_wgt_f = ~area * custom_delta_w * 20,         beta_f = ~g3_param(\"ling.bbin\"),         maxlengthgroupgrowth = 4),     transition_f = ~TRUE)) fn ## function (param)  ## { ##     stopifnot(\"ling.bbin\" %in% names(param)) ##     growth_bbinom <- function(delt_l, binn, beta) { ##         alpha <- (beta * delt_l)/(binn - delt_l) ##         x <- 0:binn ##         na <- length(alpha) ##         n <- length(x) - 1 ##         alpha <- rep(alpha, n + 1) ##         x <- rep(x, each = na) ##         val <- exp(lgamma(n + 1) + lgamma(alpha + beta) + lgamma(n -  ##             x + beta) + lgamma(x + alpha) - lgamma(n - x + 1) -  ##             lgamma(x + 1) - lgamma(n + alpha + beta) - lgamma(beta) -  ##             lgamma(alpha)) ##         dim(val) <- c(na, n + 1) ##         return(val) ##     } ##     avoid_zero_vec <- function(a) { ##         (pmax(a * 1000, 0) + log1p(exp(pmin(a * 1000, 0) - pmax(a *  ##             1000, 0))))/1000 ##     } ##     avoid_zero <- function(a) { ##         (pmax(a * 1000, 0) + log1p(exp(pmin(a * 1000, 0) - pmax(a *  ##             1000, 0))))/1000 ##     } ##     g3a_grow_matrix_wgt <- function(delta_w) { ##         na <- dim(delta_w)[[1]] ##         n <- dim(delta_w)[[2]] - 1 ##         wgt.matrix <- array(0, c(na, na)) ##         for (lg in 1:na) { ##             if (lg == na) { ##                 wgt.matrix[lg, lg:na] <- delta_w[lg, 1:(na -  ##                   lg + 1)] ##             } ##             else if (lg + n > na) { ##                 wgt.matrix[lg, lg:na] <- delta_w[lg, 1:(na -  ##                   lg + 1)] ##             } ##             else { ##                 wgt.matrix[lg, lg:(n + lg)] <- delta_w[lg, ] ##             } ##         } ##         return(wgt.matrix) ##     } ##     g3a_grow_matrix_len <- function(delta_l) { ##         na <- dim(delta_l)[[1]] ##         n <- dim(delta_l)[[2]] - 1 ##         growth.matrix <- array(0, c(na, na)) ##         for (lg in 1:na) { ##             if (lg == na) { ##                 growth.matrix[na, na] <- sum(delta_l[lg, ]) ##             } ##             else if (lg + n > na) { ##                 growth.matrix[lg, lg:(na - 1)] <- delta_l[lg,  ##                   1:(na - lg)] ##                 growth.matrix[lg, na] <- sum(delta_l[lg, (na -  ##                   lg + 1):(n + 1)]) ##             } ##             else { ##                 growth.matrix[lg, lg:(n + lg)] <- delta_l[lg,  ##                   ] ##             } ##         } ##         return(growth.matrix) ##     } ##     g3a_grow_apply <- function(growth.matrix, wgt.matrix, input_num,  ##         input_wgt) { ##         na <- dim(growth.matrix)[[1]] ##         avoid_zero_vec <- function(a) { ##             (pmax(a * 1000, 0) + log1p(exp(pmin(a * 1000, 0) -  ##                 pmax(a * 1000, 0))))/1000 ##         } ##         growth.matrix <- growth.matrix * as.vector(input_num) ##         wgt.matrix <- growth.matrix * (wgt.matrix + as.vector(input_wgt)) ##         growth.matrix.sum <- colSums(growth.matrix) ##         return(array(c(growth.matrix.sum, colSums(wgt.matrix)/avoid_zero_vec(growth.matrix.sum)),  ##             dim = c(na, 2))) ##     } ##     assert_msg <- function(expr, message) { ##         if (isFALSE(expr)) { ##             warning(message) ##             return(TRUE) ##         } ##         return(FALSE) ##     } ##     ling_imm__plusdl <- 10 ##     ling_imm__minage <- 3L ##     ling_imm__maxage <- 10L ##     ling_imm__growth_w <- array(NA, dim = structure(6:5, names = c(\"length\",  ##         \"delta\")), dimnames = list(length = c(\"0:10\", \"10:20\",  ##         \"20:30\", \"30:40\", \"40:50\", \"50:Inf\"), delta = c(\"0\",  ##         \"1\", \"2\", \"3\", \"4\"))) ##     ling_imm__growth_l <- array(NA, dim = structure(6:5, names = c(\"length\",  ##         \"delta\")), dimnames = list(length = c(\"0:10\", \"10:20\",  ##         \"20:30\", \"30:40\", \"40:50\", \"50:Inf\"), delta = c(\"0\",  ##         \"1\", \"2\", \"3\", \"4\"))) ##     ling_imm__num <- array(0, dim = c(length = 6L, area = 2L,  ##         age = 8L), dimnames = list(length = c(\"0:10\", \"10:20\",  ##         \"20:30\", \"30:40\", \"40:50\", \"50:Inf\"), area = c(\"area1\",  ##         \"area2\"), age = c(\"age3\", \"age4\", \"age5\", \"age6\", \"age7\",  ##         \"age8\", \"age9\", \"age10\"))) ##     ling_imm__wgt <- array(1, dim = c(length = 6L, area = 2L,  ##         age = 8L), dimnames = list(length = c(\"0:10\", \"10:20\",  ##         \"20:30\", \"30:40\", \"40:50\", \"50:Inf\"), area = c(\"area1\",  ##         \"area2\"), age = c(\"age3\", \"age4\", \"age5\", \"age6\", \"age7\",  ##         \"age8\", \"age9\", \"age10\"))) ##     ling_imm__prevtotal <- 0 ##     while (TRUE) { ##         { ##             custom_delta_w <- (ling_imm__plusdl * 44) ##             { ##                 comment(\"g3a_grow for ling_imm\") ##                 for (age in seq(ling_imm__minage, ling_imm__maxage,  ##                   by = 1)) { ##                   ling_imm__age_idx <- age - ling_imm__minage +  ##                     1L ##                   for (ling_imm__area_idx in seq_along(ling_imm__areas)) { ##                     area <- ling_imm__areas[[ling_imm__area_idx]] ##                     growth_delta_w <- (ling_imm__growth_w[] <- area *  ##                       custom_delta_w * 20) ##                     custom_delta_l <- (area * 99) ##                     growth_delta_l <- (ling_imm__growth_l[] <- growth_bbinom(avoid_zero_vec((age *  ##                       custom_delta_l * 10)/ling_imm__plusdl),  ##                       4L, avoid_zero(param[[\"ling.bbin\"]]))) ##                     growthmat_w <- g3a_grow_matrix_wgt(growth_delta_w) ##                     growthmat_l <- g3a_grow_matrix_len(growth_delta_l) ##                     growthresult <- g3a_grow_apply(growthmat_l,  ##                       growthmat_w, ling_imm__num[, ling_imm__area_idx,  ##                         ling_imm__age_idx], ling_imm__wgt[, ling_imm__area_idx,  ##                         ling_imm__age_idx]) ##                     { ##                       if (FALSE)  ##                         ling_imm__prevtotal <- sum(ling_imm__num[,  ##                           ling_imm__area_idx, ling_imm__age_idx]) ##                       comment(\"Update ling_imm using delta matrices\") ##                       ling_imm__num[, ling_imm__area_idx, ling_imm__age_idx] <- growthresult[,  ##                         (1)] ##                       ling_imm__wgt[, ling_imm__area_idx, ling_imm__age_idx] <- growthresult[,  ##                         (2)] ##                       if (FALSE)  ##                         assert_msg(~abs(ling_imm__prevtotal -  ##                           sum(ling_imm__num[, ling_imm__area_idx,  ##                             ling_imm__age_idx])) < 1e-04, \"g3a_growmature: ling_imm__num totals are not the same before and after growth\") ##                     } ##                   } ##                 } ##             } ##         } ##     } ## } ## <bytecode: 0x55778e76f888> ## <environment: 0x55778bba79f8>"},{"path":"/dev/articles/model-structure.html","id":"model-parameterization","dir":"Articles","previous_headings":"","what":"Model parameterization","title":"Structure of a gadget3 model","text":"g3a_growmature function , see reference g3_param(\"ling.bbin\"). g3_param() function pseudo-code specifies model accept parameter point. R code, converted param[[\"ling.bbin\"]], call R function, can provide value, e.g. fn(list(ling.bbin = 6)). can also use g3_param_vector() provide model vector values. See ?g3_param information functions available . converting TMB, lot options using optimisation features offers.","code":""},{"path":"/dev/articles/model-structure.html","id":"combining-actions","dir":"Articles","previous_headings":"","what":"Combining actions","title":"Structure of a gadget3 model","text":"useful model multiple actions, outputs g3a_ functions need combined. , can pass list actions g3_to_* functions, example: useful technique break actions separate lists, e.g. actions can combined order, reasons next section.","code":"ling_model <- g3_to_r(list(     g3a_age(ling_imm),     g3a_growmature(         ling_imm,         impl_f = g3a_grow_impl_bbinom(             delta_len_f = ~age * 10,             delta_wgt_f = ~area * 20,             beta_f = ~g3_param(\"ling.bbin\"),             maxlengthgroupgrowth = 4)),     g3a_time(1990, 1999))) ling_imm_actions <- list(     g3a_age(ling_imm),     g3a_growmature(         ling_imm,         impl_f = g3a_grow_impl_bbinom(             delta_len_f = ~age * 10,             delta_wgt_f = ~area * 20,             beta_f = ~g3_param(\"ling.bbin\"),             maxlengthgroupgrowth = 4))) time_actions <- list(     g3a_time(1990, 1999))  ling_model <- g3_to_r(c(ling_imm_actions, time_actions))"},{"path":"/dev/articles/model-structure.html","id":"ordering-of-actions","dir":"Articles","previous_headings":"","what":"Ordering of actions","title":"Structure of a gadget3 model","text":"Gadget2 strict Order Calculations, re-ordering calculations may well averse effects. Actions also common steps perform, example overstocking prey calculated, calculated , fleet finished harvesting. manage , formulas within action labelled string, example: see step colon-separated name, including following parts: number corresponding order calculations. look gadget2 user-guide, consumption step 3. can controlled using run_at parameter g3a_predate_fleet(), action. Another number specifying order within action step performed. prey relevant fleet name hash, corresponds parameters g3a_predate_fleet() call. G3 model made, sort combined list steps name, remove duplicates name. means : Predation happen correct part model cycle. Predation steps ordered. defined predation steps collect catch (003:001) overconsumption calculated (003:004). ’s explict process needed interleave multiple predation actions. overconsumption co-efficient ling_imm calculated , regardless number predation actions, since remove duplicate versions step. Conversely hash ensures never duplicate versions main predation step, repated. relevant renewal, can multiple renewal actions working stock.","code":"lln <- g3_fleet('lln') %>% g3s_livesonareas(1) action <- g3a_predate_fleet(         lln,         list(ling_imm),         suitabilities = list(             ling_imm = g3_suitability_exponentiall50(                 ~g3_param('ling.lln.alpha'),                 ~g3_param('ling.lln.l50')),             ling_mat = g3_suitability_exponentiall50(                 ~g3_param('ling.lln.alpha'),                 ~g3_param('ling.lln.l50'))),         catchability_f = g3a_predate_catchability_totalfleet(1)) names(action) ## [1] \"003:002:lln                 :ling_imm            :be1c9cb11c841a862f53\"   ## [2] \"003:004:ling_imm            \"                                             ## [3] \"000:000:g3a_suitability_report:lln                 :ling_imm            \" ## [4] \"003:005:lln                 :ling_imm            \"                        ## [5] \"003:000:000:ling_imm            \"                                         ## [6] \"003:000:001:lln                 \"                                         ## [7] \"003:001:lln                 :ling_imm            :be1c9cb11c841a862f53\"   ## [8] \"003:099:lln                 :ling_imm            \""},{"path":"/dev/articles/multiple-substocks.html","id":"stocks-substocks","dir":"Articles","previous_headings":"","what":"Stocks & substocks","title":"Modelling maturity & sex with multiple stocks","text":"mentioned vignette('introduction-single-stock'), gadget3 stock objects correspond 1:1 species. can multiple stock objects representing species different stage life-cycle, commonly mature immature versions, male female versions, 4. set much , major differences highlighted. Initial setup & time-keeping identical:","code":"library(gadget3) library(dplyr)  actions <- list() area_names <- g3_areas(c('IXa', 'IXb'))  # Create time definitions ####################  actions_time <- list(   g3a_time(     1979L, 2023L,     step_lengths = c(3L, 3L, 3L, 3L)),   NULL)  actions <- c(actions, actions_time)"},{"path":"/dev/articles/multiple-substocks.html","id":"stocks","dir":"Articles","previous_headings":"Stocks & substocks","what":"Stocks","title":"Modelling maturity & sex with multiple stocks","text":"define 2 stocks instead one, list() containing convenience: Notice : name stock 2 parts. makes possible parameters refer species whole. model output names combined, e.g. \"fish_imm\". age ranges identical, obviously mature stocks older, adjust suit.","code":"# Create stock definition for fish #################### st_imm <- g3_stock(c(species = \"fish\", 'imm'), seq(5L, 25L, 5)) |>   g3s_livesonareas(area_names[\"IXa\"]) |>   g3s_age(1L, 5L)  st_mat <- g3_stock(c(species = \"fish\", 'mat'), seq(5L, 25L, 5)) |>   g3s_livesonareas(area_names[\"IXa\"]) |>   g3s_age(3L, 10L) stocks = list(imm = st_imm, mat = st_mat)"},{"path":"/dev/articles/multiple-substocks.html","id":"stock-actions","dir":"Articles","previous_headings":"Stocks & substocks","what":"Stock actions","title":"Modelling maturity & sex with multiple stocks","text":"Stock actions now need include interactions immature & mature: actions_st_imm actions_st_imm largely similar actions_fish previous model, : added maturity_f g3a_growmature() move individuals mature stock. rate maturity coupled growth, g3a_growmature() time. Immature g3a_age() can also move individuals mature stock. happen immature fish ages beyond final age bin (5 case). point matures “default”. Mature g3a_renewal_normalparam(), recruitment directly mature stock.","code":"actions_st_imm <- list(   g3a_growmature(st_imm,     g3a_grow_impl_bbinom(       maxlengthgroupgrowth = 4L ),     # Add maturation     maturity_f = g3a_mature_continuous(),     output_stocks = list(st_mat),     transition_f = ~TRUE ),   g3a_naturalmortality(st_imm),   g3a_initialconditions_normalcv(st_imm),   g3a_renewal_normalparam(st_imm),   g3a_age(st_imm, output_stocks = list(st_mat)),   NULL)  actions_st_mat <- list(   g3a_growmature(st_mat,     g3a_grow_impl_bbinom(       maxlengthgroupgrowth = 4L )),   g3a_naturalmortality(st_mat),   g3a_initialconditions_normalcv(st_mat),   g3a_age(st_mat),   NULL)  actions_likelihood_st <- list(   g3l_understocking(stocks, nll_breakdown = TRUE),   NULL)  actions <- c(actions, actions_st_imm, actions_st_mat, actions_likelihood_st)"},{"path":"/dev/articles/multiple-substocks.html","id":"fleet-actions","dir":"Articles","previous_headings":"Stocks & substocks","what":"Fleet actions","title":"Modelling maturity & sex with multiple stocks","text":"little difference defining fleet multiple stock model vs. single stocks. define fleet, need introduce historical data model. case generate random data use later: information works, see vignette(\"incorporating-observation-data\"). fleet defined set actions single-species model: 2 differences : actions use list stocks, individual stock. Without additional changes, 2 treated single combined stock. set g3_suitability_exponentiall50(by_stock = 'species'), instructing single alpha & l50 parameter stocks, species name. by_stock parameter passed g3_parameterized(). can see result setting parameter template. by_stock = TRUE (default) get parameters fish_imm.f_surv.l50 & fish_mat.f_surv.l50: by_stock = 'species', single, shared fish.f_surv.l50 parameter: by_stock parameter just convenient shortcut change default settings, specify g3_parameterized() can change parameterization ways, example by_year = TRUE gives us per-year l50: See ?vignette('model-customisation') . data distribution mature vs. immature, observation data contain stock column fish_imm fish_mat. See vignette(\"incorporating-observation-data\"). , fleets can added repeating code .","code":"# Fleet data for f_surv #################################  # Landings data: For each year/step/area expand.grid(year = 1990:1994, step = 2, area = 'IXa') |>     # Generate a random total landings by weight     mutate(weight = rnorm(n(), mean = 1000, sd = 100)) |>     # Assign result to landings_f_surv     identity() -> landings_f_surv  # Length distribution data: Generate 100 random samples in each year/step/area expand.grid(year = 1990:1994, step = 2, area = 'IXa', length = rep(NA, 100)) |>   # Generate random lengths for these samples   mutate(length = rnorm(n(), mean = 50, sd = 20)) |>   # Save unagggregated data into ldist_f_surv.raw   identity() -> ldist_f_surv.raw  # Aggregate .raw data ldist_f_surv.raw |>   # Group into length bins   group_by(       year = year,       step = step,       length = cut(length, breaks = c(seq(0, 80, 20), Inf), right = FALSE) ) |>   # Report count in each length bin   summarise(number = n(), .groups = 'keep') |>   # Save into ldist_f_surv   identity() -> ldist_f_surv  # Assume 5 * 5 samples in each year/step/area expand.grid(year = 1990:1994, step = 2, area = 'IXa', age = rep(NA, 5), length = rep(NA, 5)) |>   # Generate random lengths/ages for these samples   mutate(length = rnorm(n(), mean = 50, sd = 20)) |>   # Generate random whole numbers for age   mutate(age = floor(runif(n(), min = 1, max = 5))) |>   # Group into length/age bins   group_by(       year = year,       step = step,       age = age,       length = cut(length, breaks = c(seq(0, 80, 20), Inf), right = FALSE) ) |>   # Report count in each length bin   summarise(number = n(), .groups = 'keep') ->   aldist_f_surv # Create fleet definition for f_surv #################### f_surv <- g3_fleet(\"f_surv\") |> g3s_livesonareas(area_names[\"IXa\"])  actions_f_surv <- list(   g3a_predate_fleet(     f_surv,     stocks,     suitabilities = g3_suitability_exponentiall50(by_stock = 'species'),     catchability_f = g3a_predate_catchability_totalfleet(       g3_timeareadata(\"landings_f_surv\", landings_f_surv, \"weight\", areas = area_names))),   NULL) actions_likelihood_f_surv <- list(   g3l_catchdistribution(     \"ldist_f_surv\",     obs_data = ldist_f_surv,     fleets = list(f_surv),     stocks = stocks,     function_f = g3l_distribution_sumofsquares(),     area_group = area_names,     report = TRUE,     nll_breakdown = TRUE),   g3l_catchdistribution(     \"aldist_f_surv\",     obs_data = aldist_f_surv,     fleets = list(f_surv),     stocks = stocks,     function_f = g3l_distribution_sumofsquares(),     area_group = area_names,     report = TRUE,     nll_breakdown = TRUE),   NULL)  actions <- c(actions, actions_f_surv, actions_likelihood_f_surv) simple_model <- g3_to_r(list(g3a_time(1990, 1994), g3a_predate_fleet(     f_surv,     stocks,     suitabilities = g3_suitability_exponentiall50(by_stock = TRUE),     catchability_f = g3a_predate_catchability_totalfleet(1) ))) ## Warning in value[[3L]](cond): Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__num' not found ## Used in expression(s): ## g3_with(`:=`(catchability, (suitability * fish_imm__num[, fish_imm__area_idx, fish_imm__age_idx] * fish_imm__wgt[, fish_imm__area_idx, fish_imm__age_idx])), `:=`(f_surv__area_idx, g3_idx(1L)), `:=`(predator_area, area), { ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__num' not found ## Used in expression(s): ## fish_imm__consratio <- fish_imm__totalpredate/avoid_zero_vec(fish_imm__num * fish_imm__wgt) ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__num' not found ## Used in expression(s): ## fish_imm__totalpredate <- (fish_imm__num * fish_imm__wgt) * fish_imm__consratio ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__num' not found ## Used in expression(s): ## fish_imm__num <- fish_imm__num * (1 - fish_imm__consratio) ## Warning in value[[3L]](cond): Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__wgt' not found ## Used in expression(s): ## g3_with(`:=`(catchability, (suitability * fish_imm__num[, fish_imm__area_idx, fish_imm__age_idx] * fish_imm__wgt[, fish_imm__area_idx, fish_imm__age_idx])), `:=`(f_surv__area_idx, g3_idx(1L)), `:=`(predator_area, area), { ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__wgt' not found ## Used in expression(s): ## fish_imm__consratio <- fish_imm__totalpredate/avoid_zero_vec(fish_imm__num * fish_imm__wgt) ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__wgt' not found ## Used in expression(s): ## fish_imm__totalpredate <- (fish_imm__num * fish_imm__wgt) * fish_imm__consratio ## Warning in value[[3L]](cond): Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__num' not found ## Used in expression(s): ## g3_with(`:=`(catchability, (suitability * fish_mat__num[, fish_mat__area_idx, fish_mat__age_idx] * fish_mat__wgt[, fish_mat__area_idx, fish_mat__age_idx])), `:=`(f_surv__area_idx, g3_idx(1L)), `:=`(predator_area, area), { ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__num' not found ## Used in expression(s): ## fish_mat__consratio <- fish_mat__totalpredate/avoid_zero_vec(fish_mat__num * fish_mat__wgt) ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__num' not found ## Used in expression(s): ## fish_mat__totalpredate <- (fish_mat__num * fish_mat__wgt) * fish_mat__consratio ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__num' not found ## Used in expression(s): ## fish_mat__num <- fish_mat__num * (1 - fish_mat__consratio) ## Warning in value[[3L]](cond): Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__wgt' not found ## Used in expression(s): ## g3_with(`:=`(catchability, (suitability * fish_mat__num[, fish_mat__area_idx, fish_mat__age_idx] * fish_mat__wgt[, fish_mat__area_idx, fish_mat__age_idx])), `:=`(f_surv__area_idx, g3_idx(1L)), `:=`(predator_area, area), { ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__wgt' not found ## Used in expression(s): ## fish_mat__consratio <- fish_mat__totalpredate/avoid_zero_vec(fish_mat__num * fish_mat__wgt) ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__wgt' not found ## Used in expression(s): ## fish_mat__totalpredate <- (fish_mat__num * fish_mat__wgt) * fish_mat__consratio names(attr(simple_model, \"parameter_template\")) ## [1] \"retro_years\"           \"fish_imm.f_surv.alpha\" \"fish_imm.f_surv.l50\"   ## [4] \"fish_mat.f_surv.alpha\" \"fish_mat.f_surv.l50\"   \"project_years\" simple_model <- g3_to_r(list(g3a_time(1990, 1994), g3a_predate_fleet(     f_surv,     stocks,     suitabilities = g3_suitability_exponentiall50(by_stock = 'species'),     catchability_f = g3a_predate_catchability_totalfleet(1) ))) ## Warning in value[[3L]](cond): Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__num' not found ## Used in expression(s): ## g3_with(`:=`(catchability, (suitability * fish_imm__num[, fish_imm__area_idx, fish_imm__age_idx] * fish_imm__wgt[, fish_imm__area_idx, fish_imm__age_idx])), `:=`(f_surv__area_idx, g3_idx(1L)), `:=`(predator_area, area), { ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__num' not found ## Used in expression(s): ## fish_imm__consratio <- fish_imm__totalpredate/avoid_zero_vec(fish_imm__num * fish_imm__wgt) ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__num' not found ## Used in expression(s): ## fish_imm__totalpredate <- (fish_imm__num * fish_imm__wgt) * fish_imm__consratio ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__num' not found ## Used in expression(s): ## fish_imm__num <- fish_imm__num * (1 - fish_imm__consratio) ## Warning in value[[3L]](cond): Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__wgt' not found ## Used in expression(s): ## g3_with(`:=`(catchability, (suitability * fish_imm__num[, fish_imm__area_idx, fish_imm__age_idx] * fish_imm__wgt[, fish_imm__area_idx, fish_imm__age_idx])), `:=`(f_surv__area_idx, g3_idx(1L)), `:=`(predator_area, area), { ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__wgt' not found ## Used in expression(s): ## fish_imm__consratio <- fish_imm__totalpredate/avoid_zero_vec(fish_imm__num * fish_imm__wgt) ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__wgt' not found ## Used in expression(s): ## fish_imm__totalpredate <- (fish_imm__num * fish_imm__wgt) * fish_imm__consratio ## Warning in value[[3L]](cond): Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__num' not found ## Used in expression(s): ## g3_with(`:=`(catchability, (suitability * fish_mat__num[, fish_mat__area_idx, fish_mat__age_idx] * fish_mat__wgt[, fish_mat__area_idx, fish_mat__age_idx])), `:=`(f_surv__area_idx, g3_idx(1L)), `:=`(predator_area, area), { ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__num' not found ## Used in expression(s): ## fish_mat__consratio <- fish_mat__totalpredate/avoid_zero_vec(fish_mat__num * fish_mat__wgt) ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__num' not found ## Used in expression(s): ## fish_mat__totalpredate <- (fish_mat__num * fish_mat__wgt) * fish_mat__consratio ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__num' not found ## Used in expression(s): ## fish_mat__num <- fish_mat__num * (1 - fish_mat__consratio) ## Warning in value[[3L]](cond): Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__wgt' not found ## Used in expression(s): ## g3_with(`:=`(catchability, (suitability * fish_mat__num[, fish_mat__area_idx, fish_mat__age_idx] * fish_mat__wgt[, fish_mat__area_idx, fish_mat__age_idx])), `:=`(f_surv__area_idx, g3_idx(1L)), `:=`(predator_area, area), { ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__wgt' not found ## Used in expression(s): ## fish_mat__consratio <- fish_mat__totalpredate/avoid_zero_vec(fish_mat__num * fish_mat__wgt) ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__wgt' not found ## Used in expression(s): ## fish_mat__totalpredate <- (fish_mat__num * fish_mat__wgt) * fish_mat__consratio names(attr(simple_model, \"parameter_template\")) ## [1] \"retro_years\"       \"fish.f_surv.alpha\" \"fish.f_surv.l50\"   ## [4] \"project_years\" simple_model <- g3_to_r(list(g3a_time(1990, 1994), g3a_predate_fleet(     f_surv,     stocks,     suitabilities = g3_suitability_exponentiall50(         l50 = g3_parameterized(\"l50\", by_stock = 'species', by_predator = TRUE, by_year = TRUE)),     catchability_f = g3a_predate_catchability_totalfleet(1) ))) ## Warning in value[[3L]](cond): Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__num' not found ## Used in expression(s): ## g3_with(`:=`(catchability, (suitability * fish_imm__num[, fish_imm__area_idx, fish_imm__age_idx] * fish_imm__wgt[, fish_imm__area_idx, fish_imm__age_idx])), `:=`(f_surv__area_idx, g3_idx(1L)), `:=`(predator_area, area), { ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__num' not found ## Used in expression(s): ## fish_imm__consratio <- fish_imm__totalpredate/avoid_zero_vec(fish_imm__num * fish_imm__wgt) ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__num' not found ## Used in expression(s): ## fish_imm__totalpredate <- (fish_imm__num * fish_imm__wgt) * fish_imm__consratio ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__num' not found ## Used in expression(s): ## fish_imm__num <- fish_imm__num * (1 - fish_imm__consratio) ## Warning in value[[3L]](cond): Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__wgt' not found ## Used in expression(s): ## g3_with(`:=`(catchability, (suitability * fish_imm__num[, fish_imm__area_idx, fish_imm__age_idx] * fish_imm__wgt[, fish_imm__area_idx, fish_imm__age_idx])), `:=`(f_surv__area_idx, g3_idx(1L)), `:=`(predator_area, area), { ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__wgt' not found ## Used in expression(s): ## fish_imm__consratio <- fish_imm__totalpredate/avoid_zero_vec(fish_imm__num * fish_imm__wgt) ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_imm__wgt' not found ## Used in expression(s): ## fish_imm__totalpredate <- (fish_imm__num * fish_imm__wgt) * fish_imm__consratio ## Warning in value[[3L]](cond): Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__num' not found ## Used in expression(s): ## g3_with(`:=`(catchability, (suitability * fish_mat__num[, fish_mat__area_idx, fish_mat__age_idx] * fish_mat__wgt[, fish_mat__area_idx, fish_mat__age_idx])), `:=`(f_surv__area_idx, g3_idx(1L)), `:=`(predator_area, area), { ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__num' not found ## Used in expression(s): ## fish_mat__consratio <- fish_mat__totalpredate/avoid_zero_vec(fish_mat__num * fish_mat__wgt) ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__num' not found ## Used in expression(s): ## fish_mat__totalpredate <- (fish_mat__num * fish_mat__wgt) * fish_mat__consratio ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__num' not found ## Used in expression(s): ## fish_mat__num <- fish_mat__num * (1 - fish_mat__consratio) ## Warning in value[[3L]](cond): Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__wgt' not found ## Used in expression(s): ## g3_with(`:=`(catchability, (suitability * fish_mat__num[, fish_mat__area_idx, fish_mat__age_idx] * fish_mat__wgt[, fish_mat__area_idx, fish_mat__age_idx])), `:=`(f_surv__area_idx, g3_idx(1L)), `:=`(predator_area, area), { ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__wgt' not found ## Used in expression(s): ## fish_mat__consratio <- fish_mat__totalpredate/avoid_zero_vec(fish_mat__num * fish_mat__wgt) ## Error in get(var_name, envir = env, inherits = TRUE): object 'fish_mat__wgt' not found ## Used in expression(s): ## fish_mat__totalpredate <- (fish_mat__num * fish_mat__wgt) * fish_mat__consratio names(attr(simple_model, \"parameter_template\")) ## [1] \"retro_years\"           \"fish_imm.f_surv.alpha\" \"fish.f_surv.l50.1990\"  ## [4] \"fish.f_surv.l50.1991\"  \"fish.f_surv.l50.1992\"  \"fish.f_surv.l50.1993\"  ## [7] \"fish.f_surv.l50.1994\"  \"fish_mat.f_surv.alpha\" \"project_years\""},{"path":"/dev/articles/multiple-substocks.html","id":"survey-indices","dir":"Articles","previous_headings":"Stocks & substocks","what":"Survey indices","title":"Modelling maturity & sex with multiple stocks","text":"Survey indices handed full stocks list, instead single stock, otherwise :","code":"# Create abundance index for si_cpue ########################  # Generate random data expand.grid(year = 1990:1994, step = 3, area = 'IXa') |>     # Fill in a weight column with total biomass for the year/step/area combination     mutate(weight = runif(n(), min = 10000, max = 100000)) ->     dist_si_cpue  actions_likelihood_si_cpue <- list(    g3l_abundancedistribution(     \"dist_si_cpue\",     dist_si_cpue,      stocks = stocks,     function_f = g3l_distribution_surveyindices_log(alpha = NULL, beta = 1),     area_group = area_names,     report = TRUE,     nll_breakdown = TRUE),   NULL)  actions <- c(actions, actions_likelihood_si_cpue)"},{"path":"/dev/articles/multiple-substocks.html","id":"creating-model-functions-and-parameterization","dir":"Articles","previous_headings":"Stocks & substocks","what":"Creating model functions and Parameterization","title":"Modelling maturity & sex with multiple stocks","text":"point, ready convert model code: Now configuring parameters based template. Thanks using wildcards g3_init_val() calls, lot parameter settings work regardless model single- multi-stock, don’t need change initial values previous model: Finally ready optimisation runs. g3_tmb_adfun() wrapper around TMB::MakeADFun() TMB::compile, producing TMB objective function. gadgetutils::g3_iterative() optimises based iterative reweighting finished, can view output using gadgetplots::gadget_plots(). finished, can view output web browser:","code":"# Create model objective function ####################  model_code <- g3_to_tmb(c(actions, list(     g3a_report_detail(actions),     g3l_bounds_penalty(actions) ))) # Guess l50 / linf based on stock sizes estimate_l50 <- g3_stock_def(st_imm, \"midlen\")[[length(g3_stock_def(st_imm, \"midlen\")) / 2]] estimate_linf <- max(g3_stock_def(st_imm, \"midlen\")) estimate_t0 <- g3_stock_def(st_imm, \"minage\") - 0.8  attr(model_code, \"parameter_template\") |>   g3_init_val(\"*.rec|init.scalar\", 10, lower = 0.001, upper = 200) |>   g3_init_val(\"*.init.#\", 10, lower = 0.001, upper = 200) |>   g3_init_val(\"*.rec.#\", 100, lower = 1e-6, upper = 1000) |>   g3_init_val(\"*.rec.sd\", 5, lower = 4, upper = 20) |>   g3_init_val(\"*.M.#\", 0.15, lower = 0.001, upper = 1) |>   g3_init_val(\"init.F\", 0.5, lower = 0.1, upper = 1) |>   g3_init_val(\"*.Linf\", estimate_linf, spread = 0.2) |>   g3_init_val(\"*.K\", 0.3, lower = 0.04, upper = 1.2) |>   g3_init_val(\"*.t0\", estimate_t0, spread = 2) |>   g3_init_val(\"*.walpha\", 0.01, optimise = FALSE) |>   g3_init_val(\"*.wbeta\", 3, optimise = FALSE) |>   g3_init_val(\"*.*.alpha\", 0.07, lower = 0.01, upper = 0.2) |>   g3_init_val(\"*.*.l50\", estimate_l50, spread = 0.25) |>   g3_init_val(\"*.bbin\", 100, lower = 1e-05, upper = 1000) |>   identity() -> params.in # Optimise model ################################ obj.fn <- g3_tmb_adfun(model_code, params.in)  params.out <- gadgetutils::g3_iterative(getwd(),     wgts = \"WGTS\",     model = model_code,     params.in = params.in,     grouping = list(         fleet = c(\"ldist_f_surv\", \"aldist_f_surv\"),         abund = c(\"dist_si_cpue\")),     method = \"BFGS\",     control = list(maxit = 1000, reltol = 1e-10),     cv_floor = 0.05) # Generate detailed report ###################### fit <- gadgetutils::g3_fit(model_code, params.out) gadgetplots::gadget_plots(fit, \"figs\", file_type = \"html\") utils::browseURL(\"figs/model_output_figures.html\")"},{"path":"/dev/articles/multiple-substocks.html","id":"appendix-full-model-script","dir":"Articles","previous_headings":"","what":"Appendix: Full model script","title":"Modelling maturity & sex with multiple stocks","text":"convenience, sections model script joined together:","code":""},{"path":"/dev/articles/random-effects.html","id":"spawning","dir":"Articles","previous_headings":"","what":"Spawning","title":"Spawning & Random effects","text":"vignette(\"introduction-single-stock\") introduced g3a_renewal_normalparam() means adding recruitment model. alternative action g3a_spawn(). main difference existing state stock used inform rate recruitment. improve model fit, shall define rate spawning using random walk. Firstly, define immature stock. ’s real difference , apart g3a_renewal_normalparam() longer present: Next, need define set parameters constitute random walk: saw vignette('multiple-substocks'), by_year give us series parameters spawn_mu, one per year. random = TRUE ensure parameters TRUE random column parameter template. scale parameter adds seasonal variation parameters, spawn_mu_seasonal.1..spawn_mu_seasonal.4, can used control spawning happens. store separate variable need use 2 places. First, configure spawning action: Mature stocks spawn, output going immature stock. use suitability functions define proportion_f, proportion stock ready spawn, by_step meaning proportion seasonal. random walk used rate recruitment, mu. Next use likelihood action constrain values random walk optimisation: random effects useful, constrained sensible bounds. 2 likelihood actions help , g3l_random_dnorm() & g3l_random_walk(). former penalises random values stray outside given normal distribution, latter constrains along random walk; current year’s value vary significantly previous.","code":"actions_st_imm <- list(   g3a_growmature(st_imm,     g3a_grow_impl_bbinom(       maxlengthgroupgrowth = 4L ),     # Add maturation     maturity_f = g3a_mature_continuous(),     output_stocks = list(st_mat),     transition_f = ~TRUE ),   g3a_naturalmortality(st_imm),   g3a_initialconditions_normalcv(st_imm),   # NB: g3a_renewal_normalparam() no longer here   g3a_age(st_imm, output_stocks = list(st_mat)),   NULL) actions <- c(actions, actions_st_imm) # Configure our random walk for mu st_spawn_mu <- g3_parameterized('spawn_mu',     by_year = TRUE,     scale = g3_parameterized('spawn_mu_seasonal', by_step = TRUE, value = 1, optimise = FALSE),     random = TRUE) actions_st_mat <- list(   g3a_growmature(st_mat,     g3a_grow_impl_bbinom(       maxlengthgroupgrowth = 4L )),   g3a_naturalmortality(st_mat),   g3a_initialconditions_normalcv(st_mat),   g3a_spawn(       st_mat,       recruitment_f = g3a_spawn_recruitment_bevertonholt(           mu = st_spawn_mu,           lambda = g3_parameterized(\"spawn_lambda\", by_stock = TRUE) ),       proportion_f = g3_suitability_exponentiall50(),       output_stocks = list(st_imm) ),   g3a_age(st_mat),   NULL) actions <- c(actions, actions_st_mat) actions_likelihood_st <- list(   g3l_understocking(stocks, nll_breakdown = TRUE),   g3l_random_walk('rwalk_st_spawn_mu',       param_f = st_spawn_mu,       sigma_f = g3_parameterized('spawn_mu.sigma', value = 5, optimise = FALSE),       log_f = FALSE ),   g3l_random_dnorm('rwalk_st_spawn_mu',       param_f = st_spawn_mu,       mean_f = g3_parameterized('spawn_mu.mean', value = 78, optimise = FALSE),       sigma_f = g3_parameterized('spawn_mu.sigma', value = 1, optimise = FALSE),       log_f = FALSE ),   NULL) actions <- c(actions, actions_likelihood_st) # Fleet data for f_surv #################################  # Landings data: For each year/step/area expand.grid(year = 1980:2000, step = 2, area = 'IXa') |>     # Generate a random total landings by weight     mutate(weight = rnorm(n(), mean = 1000, sd = 100)) |>     # Assign result to landings_f_surv     identity() -> landings_f_surv  # Length distribution data: Generate 100 random samples in each year/step/area expand.grid(year = 1980:2000, step = 2, area = 'IXa', length = rep(NA, 100)) |>   # Generate random lengths for these samples   mutate(length = rnorm(n(), mean = 50, sd = 20)) |>   # Save unagggregated data into ldist_f_surv.raw   identity() -> ldist_f_surv.raw  # Aggregate .raw data ldist_f_surv.raw |>   # Group into length bins   group_by(       year = year,       step = step,       length = cut(length, breaks = c(seq(0, 80, 20), Inf), right = FALSE) ) |>   # Report count in each length bin   summarise(number = n(), .groups = 'keep') |>   # Save into ldist_f_surv   identity() -> ldist_f_surv  # Assume 5 * 5 samples in each year/step/area expand.grid(year = 1980:2000, step = 2, area = 'IXa', age = rep(NA, 5), length = rep(NA, 5)) |>   # Generate random lengths/ages for these samples   mutate(length = rnorm(n(), mean = 50, sd = 20)) |>   # Generate random whole numbers for age   mutate(age = floor(runif(n(), min = 1, max = 5))) |>   # Group into length/age bins   group_by(       year = year,       step = step,       age = age,       length = cut(length, breaks = c(seq(0, 80, 20), Inf), right = FALSE) ) |>   # Report count in each length bin   summarise(number = n(), .groups = 'keep') ->   aldist_f_surv # Create fleet definition for f_surv #################### f_surv <- g3_fleet(\"f_surv\") |> g3s_livesonareas(area_names[\"IXa\"])  actions_f_surv <- list(   g3a_predate_fleet(     f_surv,     stocks,     suitabilities = g3_suitability_exponentiall50(by_stock = 'species'),     catchability_f = g3a_predate_catchability_totalfleet(       g3_timeareadata(\"landings_f_surv\", landings_f_surv, \"weight\", areas = area_names))),   NULL) actions_likelihood_f_surv <- list(   g3l_catchdistribution(     \"ldist_f_surv\",     obs_data = ldist_f_surv,     fleets = list(f_surv),     stocks = stocks,     function_f = g3l_distribution_sumofsquares(),     area_group = area_names,     report = TRUE,     nll_breakdown = TRUE),   g3l_catchdistribution(     \"aldist_f_surv\",     obs_data = aldist_f_surv,     fleets = list(f_surv),     stocks = stocks,     function_f = g3l_distribution_sumofsquares(),     area_group = area_names,     report = TRUE,     nll_breakdown = TRUE),   NULL)  actions <- c(actions, actions_f_surv, actions_likelihood_f_surv) # Create abundance index for si_cpue ########################  # Generate random data expand.grid(year = 1980:2000, step = 3, area = 'IXa') |>     # Fill in a weight column with total biomass for the year/step/area combination     mutate(weight = runif(n(), min = 10000, max = 100000)) ->     dist_si_cpue  actions_likelihood_si_cpue <- list(    g3l_abundancedistribution(     \"dist_si_cpue\",     dist_si_cpue,      stocks = stocks,     function_f = g3l_distribution_surveyindices_log(alpha = NULL, beta = 1),     area_group = area_names,     report = TRUE,     nll_breakdown = TRUE),   NULL)  actions <- c(actions, actions_likelihood_si_cpue)"},{"path":"/dev/articles/random-effects.html","id":"creating-model-functions-and-parameterization","dir":"Articles","previous_headings":"Spawning","what":"Creating model functions and Parameterization","title":"Spawning & Random effects","text":"point, ready convert model code: Finally ready optimisation runs. g3_tmb_adfun() wrapper around TMB::MakeADFun() TMB::compile, producing TMB objective function. gadgetutils::g3_iterative() optimises based iterative reweighting","code":"# Create model objective function ####################  model_code <- g3_to_tmb(c(actions, list(     g3a_report_detail(actions),     g3l_bounds_penalty(actions) ))) # Guess l50 / linf based on stock sizes estimate_l50 <- g3_stock_def(st_imm, \"midlen\")[[length(g3_stock_def(st_imm, \"midlen\")) / 2]] estimate_linf <- max(g3_stock_def(st_imm, \"midlen\")) estimate_t0 <- g3_stock_def(st_imm, \"minage\") - 0.8  attr(model_code, \"parameter_template\") |>   g3_init_val(\"*.rec|init.scalar\", 10, lower = 0.001, upper = 200) |>   g3_init_val(\"*.init.#\", 10, lower = 0.001, upper = 200) |>   g3_init_val(\"*.M.#\", 0.15, lower = 0.001, upper = 1) |>   g3_init_val(\"init.F\", 0.5, lower = 0.1, upper = 1) |>   g3_init_val(\"*.Linf\", estimate_linf, spread = 0.2) |>   g3_init_val(\"*.K\", 0.3, lower = 0.04, upper = 1.2) |>   g3_init_val(\"*.t0\", estimate_t0, spread = 2) |>   g3_init_val(\"*.walpha\", 0.01, optimise = FALSE) |>   g3_init_val(\"*.wbeta\", 3, optimise = FALSE) |>   g3_init_val(\"*.*.alpha\", 0.07, lower = 0.01, upper = 0.2) |>   g3_init_val(\"*.*.l50\", estimate_l50, spread = 0.25) |>   g3_init_val(\"*.bbin\", 100, lower = 1e-05, upper = 1000) |>    g3_init_val(\"spawn_mu.#\", value = 78) |>   #g3_init_val(\"spawn_mu.1980\", value = 78, random = FALSE) |>   #g3_init_val(\"spawn_lambda\", value = 1e-6, optimise = TRUE) |>    identity() -> params.in  # Uncomment this to temporarily disable random effects #params.in[params.in$random, 'optimise'] <- TRUE #params.in[params.in$random, 'random'] <- FALSE # Optimise model ################################ obj.fn <- g3_tmb_adfun(model_code, params.in, inner.control = list(trace = 3, maxit = 100))  #obj.fn$env$tracepar <- TRUE #obj.fn$env$tracemgc <- TRUE # TODO: #out <- optim(par = obj.fn$par, fn = obj.fn$fn, gr = obj.fn$gr, method = 'BFGS', control = list( #    maxit = 1000, #    trace = 1, #    reltol = .Machine$double.eps^2 )) #params.out <- g3_tmb_relist(params.in, out$par) #fit <- gadgetutils::g3_fit(model_code, params.out)"},{"path":"/dev/articles/random-effects.html","id":"appendix-full-model-script","dir":"Articles","previous_headings":"","what":"Appendix: Full model script","title":"Spawning & Random effects","text":"convenience, sections model script joined together:","code":""},{"path":"/dev/articles/writing_actions.html","id":"g3-functions","dir":"Articles","previous_headings":"","what":"G3 Functions","title":"Writing G3 Actions","text":"also special g3 functions can used formula affect resulting code, rather just called run. See ?g3_param information.","code":""},{"path":"/dev/articles/writing_actions.html","id":"g3-global-environment","dir":"Articles","previous_headings":"","what":"G3 global environment","title":"Writing G3 Actions","text":"G3 models G3 global environment included, contains definition generally useful functions. example avoid_zero(), used avoid div/0 conditions adding small amount error close zero. See R/aab_env.R information, existing helpers.","code":""},{"path":"/dev/articles/writing_actions.html","id":"global-native-functions","dir":"Articles","previous_headings":"","what":"Global & native functions","title":"Writing G3 Actions","text":"things aren’t easy code translation. g3_native allows define function separate R C++ definitions, example logspace_add_vec, used many actions avoid div/0, following definition:","code":"# vector<Type> form of logspace_add g3_env$logspace_add_vec <- g3_native(r = function(a,b) {     # https://github.com/kaskr/adcomp/issues/7#issuecomment-642559660     pmax(a, b) + log1p(exp(pmin(a,b) - pmax(a, b))) }, cpp = '[](vector<Type> a, Type b) -> vector<Type> {     vector<Type> res(a.size());     for(int i = 0; i < a.size(); i++) {         res[i] = logspace_add(a[i], b);     }     return res; }')"},{"path":"/dev/articles/writing_actions.html","id":"stock-steps","dir":"Articles","previous_headings":"","what":"Stock steps","title":"Writing G3 Actions","text":"actions interact stocks, fill abstract formulae stocks provided function. need series substitutions, handled g3_step(). takes formula, looks stock_* named functions mangles formula appropriate. example, snippet action_mature.R. Assume stock name “ling_imm” matured name “ling_imm_maturing”. first line uses debug_label() produce debug_label() function call, debug_label(\"g3a_mature ling_imm\"). used code comment label block producing diagrams. Next stock_with() used transform matured__wgt <- stock__wgt use proper stock names. don’t care dimensions since ’re copying data. Finally, use combination stock_iterate() stock_intersect(). stock_iterate() create loop loops stock’s dimensions, stock_ss() subset stock__num, prividing 1-dimension lengthgroup vector. stock_intersect(). iterators available maturity_f users provide, demonstrated [Stocks] section. information stock_* functions, see ?stock_ss.","code":"out <- new.env(parent = emptyenv())     out[[step_id(run_at, 1, stock)]] <- g3_step(f_substitute(~{         debug_label(\"g3a_mature for \", stock)         # Matured stock will weigh the same         stock_with(stock, stock_with(matured, matured__wgt <- stock__wgt))          stock_iterate(stock, stock_intersect(matured, if (run_f) {             debug_label(\"Move matured \", stock, \" into temporary storage\")             stock_ss(matured__num) <- stock_ss(stock__num) * maturity_f             stock_ss(stock__num) <- stock_ss(stock__num) - stock_ss(matured__num)         }))     }, list(run_f = run_f, maturity_f = maturity_f)))"},{"path":"/dev/articles/writing_actions.html","id":"writing-r-code-destined-for-c","dir":"Articles","previous_headings":"","what":"Writing R code destined for C++","title":"Writing G3 Actions","text":"Obviously R C++’s type systems quite different, gadget3 attempts bridge gap. R, difference scalar 1-element vector. expect treat variable vector array, state explicitly array, even result may 1-element vector. means methods work TMB array vector classes available. One needs careful type constants C++ R. particular, x / 2 means integer division. result, G3 cast numeric constant double outside certain situations, e.g. array indices, integer values. However, want integer ’s best express explictly, .e. 3L. Note difference R code 3 3.0.","code":""},{"path":"/dev/articles/writing_actions.html","id":"sub-formulas-and-g3_global_formula","dir":"Articles","previous_headings":"","what":"Sub-formulas and g3_global_formula","title":"Writing G3 Actions","text":"R forumlas include extra definitions defining formula. allows break definition readable chunks. example: Note : definition E refers age, gadget3 automatically inserted loop. F however can defined outside loop, . defined step, necessarily whole model function. TMB enforced scoping. need something available ther steps, can defined using g3_global_formula providing init_val: well making values available steps, g3_global_formula() can also used ensure value ends model report, happen automatically non-constant global model.","code":"ling_imm <- g3_stock('ling_imm', seq(0, 50, 10)) %>%     g3s_age(3, 10) nmort <- function() {     E <- ~stock__minlen * age     F <- ~stock__minage  # TODO: Does this work now?     ~E * F * 4 } g3_to_r(list(g3a_naturalmortality(ling_imm, nmort()))) ling_imm <- g3_stock('ling_imm', seq(0, 50, 10)) %>%     g3s_age(3, 10) nmort <- function() {     # Define a counter     E <- g3_global_formula(         ~E + 1, init_val = 0L)     # We can just give init_val, to define something global to the model     F <- g3_global_formula(         init_val = 99L)     ~E * F * 4 } g3_to_r(list(g3a_naturalmortality(ling_imm, nmort())))"},{"path":"/dev/articles/writing_actions.html","id":"g3_native","dir":"Articles","previous_headings":"","what":"g3_native","title":"Writing G3 Actions","text":"limits Gadget3 transpilation can manage, particularly need operate matrices. get around , can define functions using g3_native, annotates functions C++ definition. example, used define logspace_add_vec:","code":"# vector<Type> form of logspace_add g3_env$logspace_add_vec <- g3_native(r = function(a,b) {     pmax(a, b) + log1p(exp(pmin(a,b) - pmax(a, b))) }, cpp = '[](vector<Type> a, Type b) -> vector<Type> {     vector<Type> res(a.size());      for(int i = 0; i < a.size(); i++) {         res[i] = logspace_add(a[i], b);     }      // NB: This is a string within R code, so we have to escape slashes.     //     For example, \"\\\\n\"      return res; }')"},{"path":"/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jamie Lentin. Author, maintainer. Bjarki Thor Elvarsson. Author. William Butler. Author. Marine Freshwater Research Institute (Iceland). Copyright holder.","code":""},{"path":"/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lentin J, Elvarsson B, Butler W (2024). gadget3: Globally-Applicable Area Disaggregated General Ecosystem Toolbox V3. R package version 0.12-1-999, https://github.com/gadget-framework/gadget3/, https://gadget-framework.github.io/gadget3/.","code":"@Manual{,   title = {gadget3: Globally-Applicable Area Disaggregated General Ecosystem Toolbox V3},   author = {Jamie Lentin and Bjarki Thor Elvarsson and William Butler},   year = {2024},   note = {R package version 0.12-1-999, https://github.com/gadget-framework/gadget3/},   url = {https://gadget-framework.github.io/gadget3/}, }"},{"path":"/dev/index.html","id":"gadget3-globally-applicable-area-disaggregated-general-ecosystem-toolbox-v3","dir":"","previous_headings":"","what":"Globally-Applicable Area Disaggregated General Ecosystem Toolbox V3","title":"Globally-Applicable Area Disaggregated General Ecosystem Toolbox V3","text":"Gadget3 framework producing marine ecosystem models. Gadget3 creates R TMB objective function , can optimised standard tools nlminb(). Gadget3 primarily designed produce models matching behaviour gadget2, although implementing new modelling systems possible package part suite tools, including: gadgetutils: Simplify common steps setting gadget3 model gadgetplots: Plot output gadget3 model gadget2to3: Convert gadget2 model configuration gadget3 mfdb: Marine ecosystem data management tool","code":""},{"path":"/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Globally-Applicable Area Disaggregated General Ecosystem Toolbox V3","text":"gadget3 available CRAN: can also install latest development version github:","code":"> install.packages('gadget3') > remotes::install_github('gadget-framework/gadget3')"},{"path":"/dev/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Globally-Applicable Area Disaggregated General Ecosystem Toolbox V3","text":"gadget3 documentation published online. get started, read introductory vignette, walks process building model. real-life examples gadget3 models, look gadget-models repository: ling Blue Ling","code":""},{"path":"/dev/index.html","id":"development-of-gadget3","dir":"","previous_headings":"","what":"Development of gadget3","title":"Globally-Applicable Area Disaggregated General Ecosystem Toolbox V3","text":"Tests can run R CMD check. default, tests run R backend speed. run TMB backend, set G3_TEST_TMB environment variable, : Sys.setenv(G3_TEST_TMB = 1) ; source('tests/test-action_grow.R') make, runs test & integration tests G3_TEST_TMB Releases made : success, upload tarball https://cran.r-project.org/submit.html","code":"make release NEW_VERSION=0.9-0 git push --tags && git push"},{"path":"/dev/reference/aaa_lang.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 language utilities — aaa_lang","title":"Gadget3 language utilities — aaa_lang","text":"Produce objects special meaning gadget3","code":""},{"path":"/dev/reference/aaa_lang.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 language utilities — aaa_lang","text":"","code":"g3_native(r, cpp, depends = c()) g3_global_formula(f = quote(noop), init_val = NULL)"},{"path":"/dev/reference/aaa_lang.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 language utilities — aaa_lang","text":"r R function decorate 'C++' equivalent cpp Either: character string containing 'C++' equivalent Lambda function character string containing 'C++' function template definition, calling function  __fn__ list type-casts use calling equivalently named native function depends list string names dependent functions.     content initial [] Lambda function match. f optional formula modify content globablly-defined variable init_val optiona formula set initial value globally-defined variable","code":""},{"path":"/dev/reference/aaa_lang.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 language utilities — aaa_lang","text":"functions generally gadget3 development, made available actions can produced outside package.","code":""},{"path":[]},{"path":"/dev/reference/aaa_lang.html","id":"g-native","dir":"Reference","previous_headings":"","what":"g3_native","title":"Gadget3 language utilities — aaa_lang","text":"Returns function can used formulas R TMB-based models.","code":""},{"path":"/dev/reference/aaa_lang.html","id":"g-global-formula","dir":"Reference","previous_headings":"","what":"g3_global_formula","title":"Gadget3 language utilities — aaa_lang","text":"Returns formula defined globally, can preserve state across timesteps.","code":""},{"path":"/dev/reference/aaa_lang.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 language utilities — aaa_lang","text":"","code":"# The definition of g3_env$ratio_add_vec looks like: eg_ratio_add_vec <- g3_native(r = function(orig_vec, orig_amount,                                         new_vec, new_amount) {     ((orig_vec * orig_amount + new_vec * new_amount)       /     avoid_zero_vec(orig_amount + new_amount)) }, cpp = '[&avoid_zero_vec](vector<Type> orig_vec, vector<Type> orig_amount,                             vector<Type> new_vec, vector<Type> new_amount)                             -> vector<Type> {     return (orig_vec * orig_amount + new_vec * new_amount)              /            avoid_zero_vec(orig_amount + new_amount); }', depends = c('avoid_zero_vec')) # eg_ratio_add_vec() can then be used in formulas, both in R & TMB.  # Define a random walk action, using g3_global_formula to keep track of # previous value. NB: my_randomwalk_prevrec must be unique in a model random_walk_action <- g3_formula(quote({     if (cur_time > 0) nll <- nll + dnorm(x, stock__prevrec, 1, 1)     my_randomwalk_prevrec <- x }), x = 'TODO', my_randomwalk_prevrec = g3_global_formula(init_val = 0.0))"},{"path":"/dev/reference/aab_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 global environment — aab_env","title":"Gadget3 global environment — aab_env","text":"Functions available gadget3 model","code":""},{"path":"/dev/reference/aab_env.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 global environment — aab_env","text":"g3_env top-level environment gadget3 model uses,   populated utility functions. NB: Several functions _vec variants.   Due TMB limitations used vector scalar input.","code":""},{"path":"/dev/reference/aab_env.html","id":"adreport","dir":"Reference","previous_headings":"","what":"ADREPORT","title":"Gadget3 global environment — aab_env","text":"TMB's ADREPORT function. See sdreport documentation","code":""},{"path":"/dev/reference/aab_env.html","id":"as-integer","dir":"Reference","previous_headings":"","what":"as_integer","title":"Gadget3 global environment — aab_env","text":"C++ compatible equivalent .integer","code":""},{"path":"/dev/reference/aab_env.html","id":"as-numeric","dir":"Reference","previous_headings":"","what":"as.numeric","title":"Gadget3 global environment — aab_env","text":"R .numeric TMB asDouble","code":""},{"path":"/dev/reference/aab_env.html","id":"assert-msg","dir":"Reference","previous_headings":"","what":"assert_msg","title":"Gadget3 global environment — aab_env","text":"C++/R function ensures expression true, stops model.","code":"assert_msg(x > 0, \"x must be positive\")"},{"path":"/dev/reference/aab_env.html","id":"avoid-zero-avoid-zero-vec","dir":"Reference","previous_headings":"","what":"avoid_zero / avoid_zero_vec","title":"Gadget3 global environment — aab_env","text":"Adds small value input ensure output never zero","code":""},{"path":"/dev/reference/aab_env.html","id":"bounded-bounded-vec","dir":"Reference","previous_headings":"","what":"bounded / bounded_vec","title":"Gadget3 global environment — aab_env","text":"Ensures x within limits & b.","code":"bounded_vec(x, 100, 1000)"},{"path":"/dev/reference/aab_env.html","id":"g-matrix-vec","dir":"Reference","previous_headings":"","what":"g3_matrix_vec","title":"Gadget3 global environment — aab_env","text":"Apply matrix transformation tf vector vec, return resultant vector.","code":"g3_matrix_vec(tf, vec)"},{"path":"/dev/reference/aab_env.html","id":"lgamma-vec","dir":"Reference","previous_headings":"","what":"lgamma_vec","title":"Gadget3 global environment — aab_env","text":"Vector equivalent lgamma","code":""},{"path":"/dev/reference/aab_env.html","id":"logspace-add-logspace-add-vec","dir":"Reference","previous_headings":"","what":"logspace_add / logspace_add_vec","title":"Gadget3 global environment — aab_env","text":"TMB's logspace_add, essentially differentiable version pmax.","code":""},{"path":"/dev/reference/aab_env.html","id":"logspace-minmax-vec","dir":"Reference","previous_headings":"","what":"logspace_minmax_vec","title":"Gadget3 global environment — aab_env","text":"Differentiable equivalent pmax(pmin(vec, upper), lower).   scale influences sharpness inflection points lower & upper,   ~1e5, depending ranges input values.","code":"logspace_minmax_vec(vec, lower, upper, scale)"},{"path":"/dev/reference/aab_env.html","id":"normalize-vec","dir":"Reference","previous_headings":"","what":"normalize_vec","title":"Gadget3 global environment — aab_env","text":"Divide vector sum, .e. now sums 1","code":""},{"path":"/dev/reference/aab_env.html","id":"nvl","dir":"Reference","previous_headings":"","what":"nvl","title":"Gadget3 global environment — aab_env","text":"Return first non-null argument.   NB: C++ implementation.","code":""},{"path":"/dev/reference/aab_env.html","id":"pow-vec","dir":"Reference","previous_headings":"","what":"pow_vec","title":"Gadget3 global environment — aab_env","text":"Vector equivalent ^","code":""},{"path":"/dev/reference/aab_env.html","id":"print-array","dir":"Reference","previous_headings":"","what":"print_array","title":"Gadget3 global environment — aab_env","text":"Utility pretty-print array ar","code":""},{"path":"/dev/reference/aab_env.html","id":"ratio-add-vec","dir":"Reference","previous_headings":"","what":"ratio_add_vec","title":"Gadget3 global environment — aab_env","text":"Sum orig_vec & new_vec according ratio orig_amount & new_amount","code":""},{"path":"/dev/reference/aab_env.html","id":"nonconform-add-nonconform-mult-nonconform-div-nonconform-div-avz","dir":"Reference","previous_headings":"","what":"nonconform_add / nonconform_mult / nonconform_div / nonconform_div_avz","title":"Gadget3 global environment — aab_env","text":"Scalar sum/multiply/divide 2 non-conforming arrays,   treating latter vector repeating many times required.   Results structured identically first array. nonconform_div_avz(x, y) equivalent nonconform_div(x, avoid_zero_vec(y))","code":""},{"path":"/dev/reference/aab_env.html","id":"report","dir":"Reference","previous_headings":"","what":"REPORT","title":"Gadget3 global environment — aab_env","text":"TMB's REPORT function.","code":""},{"path":"/dev/reference/aab_env.html","id":"reprintf","dir":"Reference","previous_headings":"","what":"REprintf","title":"Gadget3 global environment — aab_env","text":"Equivalent RCpp REprintf","code":""},{"path":"/dev/reference/aab_env.html","id":"rprintf","dir":"Reference","previous_headings":"","what":"Rprintf","title":"Gadget3 global environment — aab_env","text":"Equivalent RCpp Rprintf","code":""},{"path":"/dev/reference/aab_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 global environment — aab_env","text":"","code":"## avoid_zero / avoid_zero_vec g3_eval(quote( c( avoid_zero(0), avoid_zero(10) ) )) #> [1] 6.931472e-04 1.000000e+01 g3_eval(quote( avoid_zero_vec(0:5) )) #> [1] 0.0006931472 1.0000000000 2.0000000000 3.0000000000 4.0000000000 #> [6] 5.0000000000  ## bounded / bounded_vec curve(g3_eval(quote( bounded(x, 100, 200) ), x = x), -100, 100)   ## logspace_add curve(g3_eval(quote( logspace_add(x, 10) ), x = x), 0, 40)   ## logspace_minmax_vec curve(g3_eval(quote( logspace_minmax_vec(x, 30, 60, scale = 1e5)), x = x), 0, 100)   ## normalize_vec g3_eval(quote( normalize_vec(c( 4, 4, 8, 2 )) )) #> [1] 0.2222222 0.2222222 0.4444444 0.1111111  ## nonconform_mult g3_eval(quote( nonconform_mult(     array(seq(0, 4*5*6), dim = c(4,5,6)),     c(1e1, 1e2, 1e3, 1e4)) )) #> , , 1 #>  #>       [,1]  [,2]   [,3]   [,4]   [,5] #> [1,]     0    40     80    120    160 #> [2,]   100   500    900   1300   1700 #> [3,]  2000  6000  10000  14000  18000 #> [4,] 30000 70000 110000 150000 190000 #>  #> , , 2 #>  #>        [,1]   [,2]   [,3]   [,4]   [,5] #> [1,]    200    240    280    320    360 #> [2,]   2100   2500   2900   3300   3700 #> [3,]  22000  26000  30000  34000  38000 #> [4,] 230000 270000 310000 350000 390000 #>  #> , , 3 #>  #>        [,1]   [,2]   [,3]   [,4]   [,5] #> [1,]    400    440    480    520    560 #> [2,]   4100   4500   4900   5300   5700 #> [3,]  42000  46000  50000  54000  58000 #> [4,] 430000 470000 510000 550000 590000 #>  #> , , 4 #>  #>        [,1]   [,2]   [,3]   [,4]   [,5] #> [1,]    600    640    680    720    760 #> [2,]   6100   6500   6900   7300   7700 #> [3,]  62000  66000  70000  74000  78000 #> [4,] 630000 670000 710000 750000 790000 #>  #> , , 5 #>  #>        [,1]   [,2]   [,3]   [,4]   [,5] #> [1,]    800    840    880    920    960 #> [2,]   8100   8500   8900   9300   9700 #> [3,]  82000  86000  90000  94000  98000 #> [4,] 830000 870000 910000 950000 990000 #>  #> , , 6 #>  #>         [,1]    [,2]    [,3]    [,4]    [,5] #> [1,]    1000    1040    1080    1120    1160 #> [2,]   10100   10500   10900   11300   11700 #> [3,]  102000  106000  110000  114000  118000 #> [4,] 1030000 1070000 1110000 1150000 1190000 #>   ## nonconform_div_avz g3_eval(quote( nonconform_div_avz(     array(seq(0, 4*5*6), dim = c(4,5,6)),     c(1e1, 1e2, 0, 1e4)) )) #> , , 1 #>  #>           [,1]      [,2]       [,3]       [,4]       [,5] #> [1,]    0.0000    0.4000     0.8000     1.2000     1.6000 #> [2,]    0.0100    0.0500     0.0900     0.1300     0.1700 #> [3,] 2885.3901 8656.1702 14426.9504 20197.7306 25968.5107 #> [4,]    0.0003    0.0007     0.0011     0.0015     0.0019 #>  #> , , 2 #>  #>            [,1]       [,2]       [,3]       [,4]       [,5] #> [1,]     2.0000     2.4000     2.8000     3.2000     3.6000 #> [2,]     0.2100     0.2500     0.2900     0.3300     0.3700 #> [3,] 31739.2909 37510.0711 43280.8512 49051.6314 54822.4116 #> [4,]     0.0023     0.0027     0.0031     0.0035     0.0039 #>  #> , , 3 #>  #>            [,1]       [,2]       [,3]       [,4]       [,5] #> [1,]     4.0000     4.4000     4.8000     5.2000     5.6000 #> [2,]     0.4100     0.4500     0.4900     0.5300     0.5700 #> [3,] 60593.1917 66363.9719 72134.7520 77905.5322 83676.3124 #> [4,]     0.0043     0.0047     0.0051     0.0055     0.0059 #>  #> , , 4 #>  #>            [,1]       [,2]        [,3]        [,4]        [,5] #> [1,]     6.0000     6.4000      6.8000      7.2000      7.6000 #> [2,]     0.6100     0.6500      0.6900      0.7300      0.7700 #> [3,] 89447.0925 95217.8727 100988.6529 106759.4330 112530.2132 #> [4,]     0.0063     0.0067      0.0071      0.0075      0.0079 #>  #> , , 5 #>  #>             [,1]        [,2]        [,3]        [,4]        [,5] #> [1,]      8.0000      8.4000      8.8000      9.2000      9.6000 #> [2,]      0.8100      0.8500      0.8900      0.9300      0.9700 #> [3,] 118300.9934 124071.7735 129842.5537 135613.3338 141384.1140 #> [4,]      0.0083      0.0087      0.0091      0.0095      0.0099 #>  #> , , 6 #>  #>             [,1]        [,2]        [,3]        [,4]        [,5] #> [1,]     10.0000     10.4000     10.8000     11.2000     11.6000 #> [2,]      1.0100      1.0500      1.0900      1.1300      1.1700 #> [3,] 147154.8942 152925.6743 158696.4545 164467.2347 170238.0148 #> [4,]      0.0103      0.0107      0.0111      0.0115      0.0119 #>  g3_eval(quote( nonconform_div(     array(seq(0, 4*5*6), dim = c(4,5,6)),     avoid_zero(c(1e1, 1e2, 0, 1e4))) )) #> , , 1 #>  #>           [,1]      [,2]       [,3]       [,4]       [,5] #> [1,]    0.0000    0.4000     0.8000     1.2000     1.6000 #> [2,]    0.0100    0.0500     0.0900     0.1300     0.1700 #> [3,] 2885.3901 8656.1702 14426.9504 20197.7306 25968.5107 #> [4,]    0.0003    0.0007     0.0011     0.0015     0.0019 #>  #> , , 2 #>  #>            [,1]       [,2]       [,3]       [,4]       [,5] #> [1,]     2.0000     2.4000     2.8000     3.2000     3.6000 #> [2,]     0.2100     0.2500     0.2900     0.3300     0.3700 #> [3,] 31739.2909 37510.0711 43280.8512 49051.6314 54822.4116 #> [4,]     0.0023     0.0027     0.0031     0.0035     0.0039 #>  #> , , 3 #>  #>            [,1]       [,2]       [,3]       [,4]       [,5] #> [1,]     4.0000     4.4000     4.8000     5.2000     5.6000 #> [2,]     0.4100     0.4500     0.4900     0.5300     0.5700 #> [3,] 60593.1917 66363.9719 72134.7520 77905.5322 83676.3124 #> [4,]     0.0043     0.0047     0.0051     0.0055     0.0059 #>  #> , , 4 #>  #>            [,1]       [,2]        [,3]        [,4]        [,5] #> [1,]     6.0000     6.4000      6.8000      7.2000      7.6000 #> [2,]     0.6100     0.6500      0.6900      0.7300      0.7700 #> [3,] 89447.0925 95217.8727 100988.6529 106759.4330 112530.2132 #> [4,]     0.0063     0.0067      0.0071      0.0075      0.0079 #>  #> , , 5 #>  #>             [,1]        [,2]        [,3]        [,4]        [,5] #> [1,]      8.0000      8.4000      8.8000      9.2000      9.6000 #> [2,]      0.8100      0.8500      0.8900      0.9300      0.9700 #> [3,] 118300.9934 124071.7735 129842.5537 135613.3338 141384.1140 #> [4,]      0.0083      0.0087      0.0091      0.0095      0.0099 #>  #> , , 6 #>  #>             [,1]        [,2]        [,3]        [,4]        [,5] #> [1,]     10.0000     10.4000     10.8000     11.2000     11.6000 #> [2,]      1.0100      1.0500      1.0900      1.1300      1.1700 #> [3,] 147154.8942 152925.6743 158696.4545 164467.2347 170238.0148 #> [4,]      0.0103      0.0107      0.0111      0.0115      0.0119 #>"},{"path":"/dev/reference/action_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 age action — action_age","title":"Gadget3 age action — action_age","text":"Add ageing actions g3 model","code":""},{"path":"/dev/reference/action_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 age action — action_age","text":"","code":"g3a_age(         stock,         output_stocks = list(),         output_ratios = rep(1/length(output_stocks),         times = length(output_stocks)),         run_f = ~cur_step_final,         run_at = g3_action_order$age,         transition_at = g3_action_order$age)"},{"path":"/dev/reference/action_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 age action — action_age","text":"stock g3_stock age. output_stocks List g3_stocks oldest specimens stock move . output_ratios Vector proportions distribute output_stocks, default evenly spread. run_f formula specifying condition running action, default end model year. run_at Integer order actions run within model, see g3_action_order. transition_at Integer order transition actions run within model, see g3_action_order.","code":""},{"path":"/dev/reference/action_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gadget3 age action — action_age","text":"action (.e. list formula objects) , given stock... Move final age group temporary storage, stock__transitioning_num / stock__transitioning_wgt Move contents age groups age group Move contents temporary storage output_stocks stock one age, output_stocks specified, contentes moved, output_stocks empty, action nothing.","code":""},{"path":[]},{"path":"/dev/reference/action_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 age action — action_age","text":"","code":"ling_imm <- g3_stock('ling_imm', seq(20, 156, 4)) %>% g3s_age(3, 10) ling_mat <- g3_stock('ling_mat', seq(20, 156, 4)) %>% g3s_age(5, 15)  # Ageing for immature ling age_action <- g3a_age(ling_imm,     output_stocks = list(ling_mat))"},{"path":"/dev/reference/action_grow.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 growth action — action_grow","title":"Gadget3 growth action — action_grow","text":"Add growth/maturity actions g3 model","code":""},{"path":"/dev/reference/action_grow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 growth action — action_grow","text":"","code":"g3a_grow_lengthvbsimple(         linf_f = g3_parameterized('Linf', by_stock = by_stock),         kappa_f = g3_parameterized('K', by_stock = by_stock),         by_stock = TRUE)  g3a_grow_weightsimple(         alpha_f = g3_parameterized('walpha', by_stock = by_stock),         beta_f = g3_parameterized('wbeta', by_stock = by_stock),         by_stock = TRUE)  g3a_grow_impl_bbinom(         delta_len_f = g3a_grow_lengthvbsimple(by_stock = by_stock),         delta_wgt_f = g3a_grow_weightsimple(by_stock = by_stock),         beta_f = g3_parameterized('bbin', by_stock = by_stock),         maxlengthgroupgrowth,         by_stock = TRUE)  g3a_grow_length_multspec(         p0 = g3_parameterized('multispec.p0', value = 1, by_stock = by_stock),         p1 = g3_parameterized('multispec.p1', value = 1, by_stock = by_stock),         p2 = g3_parameterized('multispec.p2', value = 1, by_stock = by_stock),         p3 = g3_parameterized('multispec.p3', value = 0, by_stock = by_stock),         temperature = 0,         by_stock = TRUE)  g3a_grow_weight_multspec(         p4 = g3_parameterized('multispec.p4', value = 1, by_stock = by_stock),         p5 = g3_parameterized('multispec.p5', value = 1, by_stock = by_stock),         p6 = g3_parameterized('multispec.p6', value = 0, by_stock = by_stock),         p7 = g3_parameterized('multispec.p7', value = 1, by_stock = by_stock),         p8 = g3_parameterized('multispec.p8', value = 0, by_stock = by_stock),         temperature = 0,         by_stock = TRUE)  g3a_grow_length_weightjones(         p0 = g3_parameterized('weightjones.p0', value = 0, by_stock = by_stock),         p1 = g3_parameterized('weightjones.p1', value = 0, by_stock = by_stock),         p2 = g3_parameterized('weightjones.p2', value = 1, by_stock = by_stock),         p3 = g3_parameterized('weightjones.p3', value = 0, by_stock = by_stock),         p4 = g3_parameterized('weightjones.p4', value = 1, by_stock = by_stock),         p5 = g3_parameterized('weightjones.p5', value = 100, by_stock = by_stock),         p6 = g3_parameterized('weightjones.p6', value = 1, by_stock = by_stock),         p7 = g3_parameterized('weightjones.p7', value = 1, by_stock = by_stock),         reference_weight = 0,         temperature = 0,         by_stock = TRUE)  g3a_grow_weight_weightjones(         q0 = g3_parameterized('weightjones.q0', value = 1, by_stock = by_stock),         q1 = g3_parameterized('weightjones.q1', value = 1, by_stock = by_stock),         q2 = g3_parameterized('weightjones.q2', value = 1, by_stock = by_stock),         q3 = g3_parameterized('weightjones.q3', value = 1, by_stock = by_stock),         q4 = g3_parameterized('weightjones.q4', value = 1, by_stock = by_stock),         q5 = g3_parameterized('weightjones.q5', value = 0, by_stock = by_stock),         max_consumption = g3a_predate_maxconsumption(temperature = temperature),         temperature = 0,         by_stock = TRUE)  g3a_growmature(stock, impl_f, maturity_f = ~0, output_stocks = list(),      output_ratios = rep(1/length(output_stocks), times = length(output_stocks)),      transition_f = ~cur_step_final, run_f = ~TRUE,     run_at = g3_action_order$grow,     transition_at = g3_action_order$mature)"},{"path":"/dev/reference/action_grow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 growth action — action_grow","text":"linf_f formula substitute \\(L_\\infty\\). kappa_f formula substitute \\(\\kappa\\). alpha_f formula substitute \\(\\alpha\\). beta_f formula substitute \\(\\beta\\). p0, p1, p2, p3, p4, p5, p6, p7, p8, q0, q1, q2, q3, q4, q5 formula substitute equivalent value. max_consumption Maximum predator consumption, see g3a_predate_maxconsumption. temperature formula providing values current temperature,     likely implemented g3_timeareadata. maxlengthgroupgrowth integer maximum length groups individual can jump one step. reference_weight Reference weight. see formula g3a_grow_length_weightjones. stock g3_stock grow. delta_len_f formula defining non-negative vector mean increase length stock     lengthgroup, defined g3a_grow_lengthvbsimple. delta_wgt_f formula defining corresponding weight increase matrix     lengthgroup lengthgroup delta stock, defined g3a_grow_weightsimple. by_stock Change default parameterisation (e.g. 'species'), see g3_parameterized. impl_f pair formula objects, defined g3a_grow_impl_bbinom.     define matrix length groups length group deltas j (0..maxlengthgroupgrowth),     values first indicate proportion individuals moving + j,     values second indicate corresponding weight increase individuals moving + j. maturity_f maturity formula, defined g3a_mature_constant. output_stocks List g3_stocks maturing stock move . output_ratios Vector proportions distribute output_stocks, summing 1, default evenly spread. transition_f formula specifying contition running maturation steps well growth, default final step year. run_f formula specifying condition running action, default always runs. run_at Integer order actions run within model, see g3_action_order. transition_at Integer order transition actions run within model, see g3_action_order.","code":""},{"path":"/dev/reference/action_grow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 growth action — action_grow","text":"model can number g3a_growmature actions, long   calling arguments different. instance, run_f = ~age == 5   run_f = ~age == 7. impl_f's dependent variables analysed see affect growth.   nothing cur_step_size affect growth, growth   recalculated step size changes.","code":""},{"path":[]},{"path":"/dev/reference/action_grow.html","id":"g-a-grow-lengthvbsimple","dir":"Reference","previous_headings":"","what":"g3a_grow_lengthvbsimple","title":"Gadget3 growth action — action_grow","text":"Returns formula use delta_len_f: $$ {{\\Delta}L}_i = ( L_\\infty - L_i )(1 - e^{-\\kappa{\\Delta}t}) $$ \\( \\Delta{t} \\) length current timestep.","code":""},{"path":"/dev/reference/action_grow.html","id":"g-a-grow-weightsimple","dir":"Reference","previous_headings":"","what":"g3a_grow_weightsimple","title":"Gadget3 growth action — action_grow","text":"Returns formula use delta_wgt_f: $$ {{\\Delta}W}_{,j} = \\alpha ( (L_i + {{\\Delta}L}_j)^\\beta - {L_i}^\\beta ) $$ \\( \\Delta{t} \\) length current timestep,   \\( {{\\Delta}L} \\) possible length group increases .e 0..maxlengthgroupgrowth.","code":""},{"path":"/dev/reference/action_grow.html","id":"g-a-grow-length-multspec","dir":"Reference","previous_headings":"","what":"g3a_grow_length_multspec","title":"Gadget3 growth action — action_grow","text":"Returns formula use delta_len_f:     $$ {{\\Delta}L}_i = {\\Delta}t p_0 L_i^{p_1} \\psi_i (p_2 T + p_3) $$ \\(p_x\\) Supplied parameters \\({\\Delta}t\\) Length current timestep \\(L_i\\) Current length \\(\\psi_i\\) Feeding level stock. See g3a_predate_catchability_predator \\(T\\) Temperature current region","code":""},{"path":"/dev/reference/action_grow.html","id":"g-a-grow-weight-multspec","dir":"Reference","previous_headings":"","what":"g3a_grow_weight_multspec","title":"Gadget3 growth action — action_grow","text":"Returns formula use delta_wgt_f:     $$ {{\\Delta}W}_{,j} = {\\Delta}t p_4 {W_i}^p_5 (\\psi_i - p_6) (p_7 T + p_8) $$ \\(p_x\\) Supplied parameters \\({\\Delta}t\\) Length current timestep \\(W_i\\) Current mean weight \\(\\psi_i\\) Feeding level stock. See g3a_predate_catchability_predator \\(T\\) Temperature current region Note equation dependent change length, value \\(j\\).","code":""},{"path":"/dev/reference/action_grow.html","id":"g-a-grow-impl-bbinom","dir":"Reference","previous_headings":"","what":"g3a_grow_impl_bbinom","title":"Gadget3 growth action — action_grow","text":"formula object converting mean growths using beta-binomia distribution. See https://gadget-framework.github.io/gadget2/userguide/chap-stock.html#beta-binomial","code":""},{"path":"/dev/reference/action_grow.html","id":"g-a-growmature","dir":"Reference","previous_headings":"","what":"g3a_growmature","title":"Gadget3 growth action — action_grow","text":"action (.e. list formula objects) , given stock... Move maturing individuals temporary storage, stock__transitioning_num / stock__transitioning_wgt Calculate increase length/weight using growth_f impl_f Move contents temporary storage output_stocks","code":""},{"path":[]},{"path":"/dev/reference/action_grow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 growth action — action_grow","text":"","code":"ling_imm <- g3_stock(c(species = 'ling', 'imm'), seq(20, 156, 4)) ling_mat <- g3_stock(c(species = 'ling', 'mat'), seq(20, 156, 4))  # Growth / maturity for immature ling growth_action <- g3a_growmature(ling_imm,     impl_f = g3a_grow_impl_bbinom(         # Parameters will be ling.Linf, ling.K         g3a_grow_lengthvbsimple(by_stock = 'species'),         # Parameters will be ling_imm.walpha, ling_imm.wbeta         g3a_grow_weightsimple(),         maxlengthgroupgrowth = 15),     maturity_f = g3a_mature_constant(         alpha = g3_parameterized('ling.mat1', scale = 0.001),         l50 = g3_parameterized('ling.mat2')),         output_stocks = list(ling_mat))  # Multspec growth - define a data frame with temperature temperature <- g3_timeareadata(     'temp',     data.frame(year = 2000, step=c(1,2), temp=c(10, 14)),     value_field = \"temp\" )  ms_growth_actions <- list(   g3a_growmature(ling_imm, g3a_grow_impl_bbinom(     g3a_grow_length_multspec(temperature = temperature),     g3a_grow_weight_multspec(temperature = temperature),     maxlengthgroupgrowth = 8 )),   NULL)"},{"path":"/dev/reference/action_mature.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 maturity action — action_mature","title":"Gadget3 maturity action — action_mature","text":"Add maturity actions g3 model","code":""},{"path":"/dev/reference/action_mature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 maturity action — action_mature","text":"","code":"g3a_mature_continuous(         alpha = g3_parameterized('mat.alpha', by_stock = by_stock),         l50 = g3_parameterized('mat.l50', by_stock = by_stock),         beta = 0,         a50 = 0,         by_stock = TRUE)  g3a_mature_constant(alpha = NULL, l50 = NA, beta = NULL, a50 = NA, gamma = NULL,      k50 = NA)  g3a_mature(stock, maturity_f, output_stocks, output_ratios = rep(1/length(output_stocks),      times = length(output_stocks)), run_f = ~TRUE,     run_at = g3_action_order$grow,     transition_at = g3_action_order$mature)"},{"path":"/dev/reference/action_mature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 maturity action — action_mature","text":"alpha formula substitute \\(\\alpha\\). l50 formula substitute \\(l_{50}\\). Must defined alpha defined. beta formula substitute \\(\\beta\\). a50 formula substitute \\(a_{50}\\). Must defined beta defined. gamma formula substitute \\(\\gamma\\). k50 formula substitute \\(k_{50}\\). Must defined gamma defined. by_stock Change default parameterisation (e.g. 'species'), see g3_parameterized. stock g3_stock mature. maturity_f maturity formula, defined g3a_mature_constant. output_stocks List g3_stocks maturing stock move . output_ratios Vector proportions distribute output_stocks, summing 1, default evenly spread. run_f formula specifying condition running action, default always runs. run_at Integer order actions run within model, see g3_action_order. transition_at Integer order transition actions run within model, see g3_action_order.","code":""},{"path":"/dev/reference/action_mature.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 maturity action — action_mature","text":"Generally use g3a_growmature, growth   maturity time. model can number g3a_mature actions, long   calling arguments different. instance, run_f = ~age == 5   run_f = ~age == 7.","code":""},{"path":[]},{"path":"/dev/reference/action_mature.html","id":"g-a-mature-continuous","dir":"Reference","previous_headings":"","what":"g3a_mature_continuous","title":"Gadget3 maturity action — action_mature","text":"formula object representing     $$ m_0 * (\\alpha \\Delta{L} + \\beta \\Delta{t})^\\top $$  \\(m_0\\) g3a_mature_constant formula, defined , using parameters supplied g3a_mature_continuous \\(\\Delta{L}\\) Vector possible changes length, per current growth matrix (see g3a_grow_impl_bbinom) \\(\\Delta{t}\\) Length current timestep","code":""},{"path":"/dev/reference/action_mature.html","id":"g-a-mature-constant","dir":"Reference","previous_headings":"","what":"g3a_mature_constant","title":"Gadget3 maturity action — action_mature","text":"formula object following equation $$ \\frac{1}{ 1 + e^{-\\alpha(l - l_{50}) -\\beta(- a_{50}) -\\gamma(k - k_{50})}} $$  \\(l\\) length stock \\(l_{50}\\) length stock 50% mature \\(\\) age stock \\(a_{50}\\) age stock 50% mature \\(k\\) weight stock \\(k_{50}\\) weight stock 50% mature","code":""},{"path":"/dev/reference/action_mature.html","id":"g-a-mature","dir":"Reference","previous_headings":"","what":"g3a_mature","title":"Gadget3 maturity action — action_mature","text":"action (.e. list formula objects) , given stock... Move maturing individuals temporary storage, stock__transitioning_num / stock__transitioning_wgt Move contents temporary storage output_stocks","code":""},{"path":[]},{"path":"/dev/reference/action_mature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 maturity action — action_mature","text":"","code":"ling_imm <- g3_stock('ling_imm', seq(20, 156, 4)) ling_mat <- g3_stock('ling_mat', seq(20, 156, 4))  # Maturity for immature ling maturity_action <- g3a_mature(ling_imm,     maturity_f = g3a_mature_continuous(),     output_stocks = list(ling_mat))"},{"path":"/dev/reference/action_migrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 migration action — action_migrate","title":"Gadget3 migration action — action_migrate","text":"Add migration g3 model","code":""},{"path":"/dev/reference/action_migrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 migration action — action_migrate","text":"","code":"g3a_migrate_normalize(row_total = 1)  g3a_migrate(stock, migrate_f, normalize_f = g3a_migrate_normalize(),             run_f = TRUE,             run_at = g3_action_order$migrate)"},{"path":"/dev/reference/action_migrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 migration action — action_migrate","text":"row_total calculating proportion individuals stay place, use total     rows expected sum . stock g3_stock migrate action. migrate_f formula describing migration terms (source) area dest_area. normalize_f Function normalize vector possible destinations, make sure fish     added destroyed. run_f formula specifying condition running action, default always runs. run_at Integer order spawning actions run within model, see g3_action_order.","code":""},{"path":"/dev/reference/action_migrate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 migration action — action_migrate","text":"restrict movement particular step year, particular area, use run_f.   example: cur_step == 1 Migration happen first step every year cur_step == 1 && cur_year >= 1990 Migration happen first step every year 1990 cur_step == 2 && area = 1 Migration happen second step every year, first area Multiple migration actions can added, separate spring autumn migration, instance. action define following stock instance variables given stock: stock__migratematrix \\(\\times \\) array, containing proportion (stock) moved one area another. NaN, movement occurred","code":""},{"path":[]},{"path":"/dev/reference/action_migrate.html","id":"g-a-migrate-normalize","dir":"Reference","previous_headings":"","what":"g3a_migrate_normalize","title":"Gadget3 migration action — action_migrate","text":"formula transforming stock__migratematrix[,stock__area_idx] (.e.     possible destinations given area) :  Squaring values positive Altering proportion static individuals row sums row_total Dividing row_total row sums 1","code":""},{"path":"/dev/reference/action_migrate.html","id":"g-a-migrate","dir":"Reference","previous_headings":"","what":"g3a_migrate","title":"Gadget3 migration action — action_migrate","text":"action (.e. list formula objects) , given stock... Fill stock__migratematrix using migrate_f normalize_f Apply movement stock","code":""},{"path":[]},{"path":"/dev/reference/action_migrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 migration action — action_migrate","text":"","code":"areas <- list(a=1, b=2, c=3, d=4)  # NB: stock doesn't live in b, so won't figure in stock_acd__migratematrix stock_acd <- (g3_stock('stock_acd', seq(10, 40, 10))     %>% g3s_livesonareas(areas[c('a', 'c', 'd')]))  movement_action <- list(     g3a_migrate(         stock_acd,         # In spring, individuals in area 'a' will migrate to 'd'.         ~if (area == area_a && dest_area == area_d) 0.8 else 0,         run_f = ~cur_step == 2),     g3a_migrate(         stock_acd,         # In autumn, individuals in all areas will migrate to 'a'         ~if (dest_area == area_a) 0.8 else 0,         run_f = ~cur_step == 4),     list())"},{"path":"/dev/reference/action_naturalmortality.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 natural mortality action — action_naturalmortality","title":"Gadget3 natural mortality action — action_naturalmortality","text":"Add natural mortality g3 model","code":""},{"path":"/dev/reference/action_naturalmortality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 natural mortality action — action_naturalmortality","text":"","code":"g3a_naturalmortality_exp(         param_f = g3_parameterized('M', by_stock = by_stock, by_age = TRUE),         by_stock = TRUE,         action_step_size_f = ~cur_step_size)  g3a_naturalmortality(         stock,         mortality_f = g3a_naturalmortality_exp(),         run_f = TRUE,         run_at = g3_action_order$naturalmortality)"},{"path":"/dev/reference/action_naturalmortality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 natural mortality action — action_naturalmortality","text":"param_f formula substitute \\(m\\). action_step_size_f much model time passes runs action? defaults ~cur_step_size, .e. every step.     Use action_step_size_f = 1 action runs yearly. by_stock Change default parameterisation (e.g. 'species'), see g3_parameterized. stock g3_stock mortality applies . mortality_f mortality formula, defined g3a_naturalmortality_exp. run_f formula specifying condition running action, default always runs. run_at Integer order actions run within model, see g3_action_order.","code":""},{"path":"/dev/reference/action_naturalmortality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 natural mortality action — action_naturalmortality","text":"model can number g3a_naturalmortality actions, long   calling arguments different. instance, run_f = ~age == 5   run_f = ~age == 7.","code":""},{"path":[]},{"path":"/dev/reference/action_naturalmortality.html","id":"g-a-naturalmortality-exp","dir":"Reference","previous_headings":"","what":"g3a_naturalmortality_exp","title":"Gadget3 natural mortality action — action_naturalmortality","text":"formula object following equation $$ e^{-m \\Delta t} $$  \\(\\Delta t\\) length current timestep","code":""},{"path":"/dev/reference/action_naturalmortality.html","id":"g-a-naturalmortality","dir":"Reference","previous_headings":"","what":"g3a_naturalmortality","title":"Gadget3 natural mortality action — action_naturalmortality","text":"action (.e. list formula objects) , given stock... Remove proportion stock group calculated mortality formula mortality_f","code":""},{"path":[]},{"path":"/dev/reference/action_naturalmortality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 natural mortality action — action_naturalmortality","text":"","code":"ling_imm <- g3_stock('ling_imm', seq(20, 156, 4)) %>% g3s_age(3, 10)  # Natural mortality for immature ling naturalmortality_action <- g3a_naturalmortality(ling_imm)  # NB: M is used in both g3a_naturalmortality and g3a_renewal_initabund, to # customise, you need to make sure the definitions are in sync, for example:  M <- g3_parameterized('M', by_stock = TRUE, by_age = FALSE) actions <- list(     g3a_naturalmortality(ling_imm,         g3a_naturalmortality_exp(M)),     g3a_initialconditions_normalparam(ling_imm,         factor_f = g3a_renewal_initabund(M = M)),     NULL)"},{"path":"/dev/reference/action_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard gadget3 order of actions — action_order","title":"Standard gadget3 order of actions — action_order","text":"Constant defining standard order actions","code":""},{"path":"/dev/reference/action_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard gadget3 order of actions — action_order","text":"","code":"g3_action_order"},{"path":"/dev/reference/action_order.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standard gadget3 order of actions — action_order","text":"gadget3 actions run_at parameter. decides point   model action happen relative others. defaults set via g3_action_order.","code":""},{"path":"/dev/reference/action_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard gadget3 order of actions — action_order","text":"named integer list","code":""},{"path":[]},{"path":"/dev/reference/action_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard gadget3 order of actions — action_order","text":"","code":"# The default action order unlist(g3_action_order) #>          initial     report_early             time          migrate  #>               -1                0                1                2  #>          predate naturalmortality             grow            spawn  #>                3                4                5                6  #>           mature          renewal         straying       likelihood  #>                7                8                9               10  #>           report              age  #>               11               12   # View single value g3_action_order$age #> [1] 12"},{"path":"/dev/reference/action_predate.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 predation actions — action_predate","title":"Gadget3 predation actions — action_predate","text":"Add predation g3 model","code":""},{"path":"/dev/reference/action_predate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 predation actions — action_predate","text":"","code":"g3a_predate_catchability_totalfleet(E)  g3a_predate_catchability_numberfleet(E)  g3a_predate_catchability_linearfleet(E)  g3a_predate_catchability_effortfleet(catchability_fs, E)  g3a_predate_catchability_quotafleet(quota_table, E,                                     sum_stocks = list(),                                     recalc_f = NULL)  g3a_predate_maxconsumption(         m0 = g3_parameterized('consumption.m0', value = 1,             by_predator = TRUE, optimise = FALSE),         m1 = g3_parameterized('consumption.m1', value = 0,             by_predator = TRUE, optimise = FALSE),         m2 = g3_parameterized('consumption.m2', value = 0,             by_predator = TRUE, optimise = FALSE),         m3 = g3_parameterized('consumption.m3', value = 0,             by_predator = TRUE, optimise = FALSE),         temperature = 0 )  g3a_predate_catchability_predator(         prey_preferences = 1,         energycontent = g3_parameterized('energycontent', value = 1,             by_stock = TRUE, optimise = FALSE),         half_feeding_f = g3_parameterized('halffeeding',             by_predator = TRUE, optimise = FALSE),         max_consumption = g3a_predate_maxconsumption(temperature = temperature),         temperature = 0 )  g3a_predate(         predstock,         prey_stocks,         suitabilities,         catchability_f,         overconsumption_f = quote( logspace_add_vec(stock__consratio * -1000, 0.95 * -1000)/-1000         ),         report_suitability = TRUE,         run_f = ~TRUE,         run_at = g3_action_order$predate )  # NB: Deprecated interface, use g3a_predate() g3a_predate_fleet(fleet_stock, prey_stocks, suitabilities, catchability_f,     overconsumption_f = quote(         logspace_add_vec(stock__consratio * -1e3, 0.95 * -1e3) / -1e3 ),     run_f = ~TRUE, run_at = g3_action_order$predate)  # NB: Deprecated interface, use g3a_predate() with g3a_predate_catchability_totalfleet g3a_predate_totalfleet(fleet_stock, prey_stocks, suitabilities, amount_f,     overconsumption_f = quote(         logspace_add_vec(stock__consratio * -1e3, 0.95 * -1e3) / -1e3 ),     run_f = ~TRUE, run_at = g3_action_order$predate)"},{"path":"/dev/reference/action_predate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 predation actions — action_predate","text":"predstock, fleet_stock g3_stock describes harvesting predators/fleet. prey_stocks List g3_stocks maturing stock move . suitabilities Either list stock names formula objects, optional unnamed     default option, formula object (always used). formula define suitability stock, example     using g3_suitability_exponentiall50. catchability_f list formulas generated one g3a_predate_catchability_* functions,     define total biomass fleet able catch. E formula defining total catch fleet can harvest current time/area (totalfleet/numberfleet),     scaling factor used define stock caught (linearfleet/effortfleet/quotafleet). catchability_fs Either list stock names formula objects, optional unnamed     default option, formula object (always used). quota_table data.frame 'biomass' 'quota' columns,     'biomass' numeric column, upper bound total biomass amount, final value always Inf.     'quota' list formulas, defining quota , e.g. g3_parameterized. sum_stocks Either list g3_stock objects sum choosing value quote_table,     NULL, case choose quota based current prey. recalc_f formula denoting recalculate current quota. example ~cur_step == 1     ensure quota recalculated beginning year. amount_f Equivalent E passed g3a_predate_catchability_totalfleet. prey_preferences Either 1, indicating Type II functional response, >1 Type III functional response.     Either list stock names numbers, optional unnamed     default option, single number used stocks. energycontent formula object energy content current prey, kilojoules per kilogram. half_feeding_f biomass prey required allow predator consume prey half maximum consumption level. max_consumption formula maximum consumption predator, kilojoules per month.     Generally generated g3a_predate_maxconsumption m0, m1, m2, m3 Parameters maximum possible consumption formula, see . temperature  formula object current temperature, probably generated g3_timeareadata. overconsumption_f Overconsumption rule, formula cap values stock__consratio <= 95 report_suitability TRUE, Generate suit_(prey)_(predator)__report suitability array model report.     dimensions report vary depending suitability function dependent , e.g. predator_length. NB: Currently generate arrays time-varying suitabilities. run_f formula specifying condition running action, default always runs. run_at Integer order actions run within model, see g3_action_order.","code":""},{"path":"/dev/reference/action_predate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 predation actions — action_predate","text":"g3a_predate , given g3_fleet \"predator\" set g3_stock preys,   add predation model. behaviour driven 2 parameters:  suitabilities Defines predator's preference within prey stock, normally one suitability functions, e.g. g3_suitability_exponentiall50 catchability_f Defines predator's overall requirements, set one catchability functions, e.g. g3a_predate_catchability_totalfleet definition catchability function, see values section .","code":""},{"path":"/dev/reference/action_predate.html","id":"details-for-custom-actions","dir":"Reference","previous_headings":"","what":"Details for custom actions","title":"Gadget3 predation actions — action_predate","text":"actions define following stock instance variables given fleet_stock prey_stock: (predstock)__totalsuit Total suitable prey (predstock), .e. \\( \\sum_{\\preys}^p \\sum_{\\lengths}^l F_{pl}\\) prey_stock__suit_fleet_stock Suitability (prey_stock) (fleet_stock), .e. \\( F_{pl} \\) (predstock)_(prey_stock)__cons Biomass (prey_stock) caught (predstock), predator & prey dimensions prey_stock__totalpredate Biomass total consumed (prey_stock), prey array prey_stock__consratio Ratio prey_stock__totalpredate / (current biomass), capped overconsumption_f addition, g3a_predate_fleet generate prey_stock__predby_predstock, Biomass (prey_stock) caught (fleet_stock), prey array,     compatibility older models. otherwise identical g3a_predate. model can number g3a_predate_* actions, long     calling arguments different. instance, run_f = ~age == 5     run_f = ~age == 7.","code":""},{"path":[]},{"path":"/dev/reference/action_predate.html","id":"g-a-predate-catchability-totalfleet","dir":"Reference","previous_headings":"","what":"g3a_predate_catchability_totalfleet","title":"Gadget3 predation actions — action_predate","text":"formula objects define fleet's desired catch total biomass (e.g. landings data):     $$ F_{pl} = S N_{pl} W_{pl} $$     $$ C_{pl} = \\frac{E F_{pl}}{\\displaystyle \\sum_{\\preys}^p \\sum_{\\lengths}^l F_{pl}} $$ \\(S\\) Suitability form suitabilities argument \\(E\\) E argument, biomass caught fleet. Generally g3_timeareadata table containing landings data, year/step/area/weight columns \\(N_{pl}\\) Number prey length cell prey \\(p\\), length \\(l\\) \\(W_{pl}\\) Mean weight prey length cell prey \\(p\\), length \\(l\\)","code":""},{"path":"/dev/reference/action_predate.html","id":"g-a-predate-catchability-numberfleet","dir":"Reference","previous_headings":"","what":"g3a_predate_catchability_numberfleet","title":"Gadget3 predation actions — action_predate","text":"formula objects define fleet's desired catch total number stock landed (individuals, biomass):     $$ F_{pl} = S N_{pl} $$     $$ C_{pl} = \\frac{E F_{pl} W_{pl}}{\\displaystyle \\sum_{\\preys}^p \\sum_{\\lengths}^l F_{pl}} $$ \\(S\\) Suitability form suitabilities argument \\(E\\) E argument, numbers caught fleet. Generally g3_timeareadata table containing landings data, constant quota \\(N_{pl}\\) Number prey length cell prey \\(p\\), length \\(l\\) \\(W_{pl}\\) Mean weight prey length cell prey \\(p\\), length \\(l\\)","code":""},{"path":"/dev/reference/action_predate.html","id":"g-a-predate-catchability-linearfleet","dir":"Reference","previous_headings":"","what":"g3a_predate_catchability_linearfleet","title":"Gadget3 predation actions — action_predate","text":"formula objects define linear relationship desired catch available biomass:     $$ F_{pl} = S N_{pl} W_{pl} $$     $$ C_{pl} = E \\Delta t F_{pl} $$ \\(S\\) Suitability form suitabilities argument \\(E\\) E argument, scaling factor stock caught, per month \\(\\Delta t\\) length current timestep months \\(N_{pl}\\) Number prey length cell prey \\(p\\), length \\(l\\) \\(W_{pl}\\) Mean weight prey length cell prey \\(p\\), length \\(l\\)","code":""},{"path":"/dev/reference/action_predate.html","id":"g-a-predate-catchability-effortfleet","dir":"Reference","previous_headings":"","what":"g3a_predate_catchability_effortfleet","title":"Gadget3 predation actions — action_predate","text":"multi-species extension linearfleet, allowing differently-parameterized catchability per-stock:     $$ F_{pl} = S N_{pl} W_{pl} $$     $$ C_{pl} = c_{s} E \\Delta t F_{pl} $$ \\(S\\) Suitability form suitabilities argument \\(c_{s}\\) catchability_fs argument current stock \\(E\\) E argument, scaling factor stock caught, per month \\(\\Delta t\\) length current timestep months \\(N_{pl}\\) Number prey length cell prey \\(p\\), length \\(l\\) \\(W_{pl}\\) Mean weight prey length cell prey \\(p\\), length \\(l\\)","code":""},{"path":"/dev/reference/action_predate.html","id":"g-a-predate-catchability-quotafleet","dir":"Reference","previous_headings":"","what":"g3a_predate_catchability_quotafleet","title":"Gadget3 predation actions — action_predate","text":"formula onject defines catch based available biomass stock multiplied scaling factor set according simple harvest control rule:     $$ F_{pl} = S N_{pl} W_{pl} $$     $$ C_{pl} = q E \\Delta t F_{pl} $$ \\(q\\) quota selected quota_table, corresponding total biomass sum_stocks.         example, given data.frame(biomass = c(10000, Inf), quota = (list(g3_parameterized('quota.low'), g3_parameterized('quota.high')))),         'quota.low' chosen total biomass less 10000, otherwise 'quota.high' used. \\(S\\) Suitability form suitabilities argument \\(E\\) E argument, scaling factor stock caught, per month \\(\\Delta t\\) length current timestep \\(N_{pl}\\) Number prey length cell prey \\(p\\), length \\(l\\) \\(W_{pl}\\) Mean weight prey length cell prey \\(p\\), length \\(l\\) ...recalc_f set, recaculated true. step     use previous value.","code":""},{"path":"/dev/reference/action_predate.html","id":"g-a-predate-maxconsumption","dir":"Reference","previous_headings":"","what":"g3a_predate_maxconsumption","title":"Gadget3 predation actions — action_predate","text":"formula objects define predator's maximum consumption:     $$ M_{L} = m_0 \\Delta t e^{(m_1T-m_2T^3)} L^{m_3}  $$ \\(m_x\\) mx parameter, \\(M_L\\), maximum possible consumption predator current timestep \\(\\Delta t\\) length current timestep months \\(T\\) temperature parameter, formula representing current temperature","code":""},{"path":"/dev/reference/action_predate.html","id":"g-a-predate-catchability-predator","dir":"Reference","previous_headings":"","what":"g3a_predate_catchability_predator","title":"Gadget3 predation actions — action_predate","text":"formula objects define predator/prey relationship:     $$ F_{pl} = (S E_{p} N_{pl} W_{pl})^{d_p} $$     $$ C_{pl} = \\frac{ N_{L} M_{L} \\psi_L F_{pl} }{ E_{p} \\displaystyle \\sum_{\\preys}^p \\sum_{\\lengths}^l F_{pl} } $$     $$ \\psi_{L} = \\frac{ \\displaystyle \\sum_{\\preys}^p \\sum_{\\lengths}^l F_{pl} }{ H \\Delta t + \\displaystyle \\sum_{\\preys}^p \\sum_{\\lengths}^l F_{pl} } $$ \\(S\\) Suitability form suitabilities argument \\(\\Delta t\\) length current timestep months \\(N_{pl}\\) Number prey length cell prey \\(p\\), length \\(l\\) \\(W_{pl}\\) Mean weight prey length cell prey \\(p\\), length \\(l\\) \\(M_L\\) Maximum possible consumption predator current timestep, kilojoules per month. See g3a_predate_maxconsumption \\(L\\) Length current predator \\(E_p\\) energycontent parameter, energy content prey \\(H\\) half_feeding_f parameter, biomass prey required allow predator consume prey half maximum consumption level \\(T\\) temperature parameter, formula representing current temperature","code":""},{"path":"/dev/reference/action_predate.html","id":"g-a-predate","dir":"Reference","previous_headings":"","what":"g3a_predate","title":"Gadget3 predation actions — action_predate","text":"action (.e. list formula objects) ... prey, collect suitable stock predstock_prey_stock__suit variable, using catchability_f \\(F_pl\\) formula. units depend catchability_f method used. predator consumption done, scale consumption using catchability_f \\(C_pl\\) formula predstock_prey_stock__cons, summed prey_stock__totalpredate Calculate prey_stock__consratio (ratio consumed available), capping using overconsumption_f. Update prey_stock__num Recalculate predstock_prey_stock__cons, predstock_prey_stock__suit, post-overconsumption","code":""},{"path":[]},{"path":"/dev/reference/action_predate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 predation actions — action_predate","text":"","code":"areas <- c(a = 1, b = 2) ling_imm <- g3_stock(c(species = 'ling', 'imm'), seq(20, 156, 4)) %>% g3s_age(3, 10) ling_mat <- g3_stock(c(species = 'ling', 'mat'), seq(20, 156, 4)) %>% g3s_age(5, 15) lln <- g3_fleet('lln') %>% g3s_livesonareas(areas[c('a', 'b')])  # Invent a lln_landings table lln_landings <- expand.grid(     year = 1999:2000,     step = c(1, 2),     area = areas[c('a', 'b')]) lln_landings$total_weight <- floor(runif(nrow(lln_landings), min=100, max=999))  # g3a_predate_catchability_totalfleet(): Set catch accordings to landings data predate_action <- g3a_predate_fleet(     lln,     list(ling_imm, ling_mat),     suitabilities = g3_suitability_exponentiall50(by_stock = 'species'),     catchability_f = g3a_predate_catchability_totalfleet(         g3_timeareadata('lln_landings', lln_landings, \"total_weight\") ))  # g3a_predate_catchability_numberfleet(): Fixed quota of 1000 fish predate_action <- g3a_predate_fleet(     lln,     list(ling_imm, ling_mat),     suitabilities = g3_suitability_exponentiall50(by_stock = 'species'),     catchability_f = g3a_predate_catchability_numberfleet(         g3_parameterized(             'quota',             value = 1000,             by_predator = TRUE,             scale = 0.5,             optimise = FALSE) )) attr(suppressWarnings(g3_to_r(list(predate_action))), 'parameter_template') #> $ling.lln.alpha #> [1] 0 #>  #> $ling.lln.l50 #> [1] 0 #>  #> $lln.quota #> [1] 1000 #>"},{"path":"/dev/reference/action_renewal.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 renewal actions — action_renewal","title":"Gadget3 renewal actions — action_renewal","text":"Add renewal / initialconditions g3 model","code":""},{"path":"/dev/reference/action_renewal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 renewal actions — action_renewal","text":"","code":"g3a_renewal_vonb_recl(         Linf = g3_parameterized('Linf', value = 1, by_stock = by_stock),         K = g3_parameterized('K', value = 1, by_stock = by_stock),         recl = g3_parameterized('recl', by_stock = by_stock),         recage = g3_parameterized('recage', by_stock = FALSE, optimise = FALSE),         by_stock = TRUE)  g3a_renewal_vonb_t0(         Linf = g3_parameterized('Linf', value = 1, by_stock = by_stock),         K = g3_parameterized('K', value = 1, by_stock = by_stock),         t0 = g3_parameterized('t0', by_stock = by_stock),         by_stock = TRUE)  g3a_renewal_initabund(     scalar = g3_parameterized('init.scalar', value = 1, by_stock = by_stock),     init = g3_parameterized('init', value = 1, by_stock = by_stock, by_age = TRUE),     M = g3_parameterized('M', by_stock = by_stock, by_age = TRUE),     init_F = g3_parameterized('init.F', by_stock = by_stock_f),     recage = g3_parameterized('recage', by_stock = FALSE, optimise = FALSE),     proportion_f = ~1,     by_stock = TRUE,     by_stock_f = FALSE)  ############################# g3a_initialconditions  g3a_initialconditions(stock, num_f, wgt_f, run_f = ~cur_time == 0L,         run_at = g3_action_order$initial)  g3a_initialconditions_normalparam(         stock,         factor_f = g3a_renewal_initabund(by_stock = by_stock),         mean_f = g3a_renewal_vonb_t0(by_stock = by_stock),         stddev_f = g3_parameterized('init.sd', value = 10,             by_stock = by_stock, by_age = by_age),         alpha_f = g3_parameterized('walpha', by_stock = wgt_by_stock),         beta_f = g3_parameterized('wbeta', by_stock = wgt_by_stock),         age_offset = quote( cur_step_size ),         by_stock = TRUE,         by_age = FALSE,         wgt_by_stock = TRUE,         run_f = ~cur_time == 0L,         run_at = g3_action_order$initial)  g3a_initialconditions_normalcv(         stock,         factor_f = g3a_renewal_initabund(by_stock = by_stock),         mean_f = g3a_renewal_vonb_t0(by_stock = by_stock),         cv_f = g3_parameterized('lencv', by_stock = by_stock, value = 0.1,             optimise = FALSE),         alpha_f = g3_parameterized('walpha', by_stock = wgt_by_stock),         beta_f = g3_parameterized('wbeta', by_stock = wgt_by_stock),         age_offset = quote( cur_step_size ),         by_stock = TRUE,         by_age = FALSE,         wgt_by_stock = TRUE,         run_f = ~cur_time == 0L,         run_at = g3_action_order$initial)  ############################# g3a_renewal  g3a_renewal(stock, num_f, wgt_f, run_f = ~TRUE,         run_at = g3_action_order$renewal)  g3a_renewal_normalparam(         stock,         factor_f = g3_parameterized('rec',             by_stock = by_stock,             by_year = TRUE,             scale = g3_parameterized(                 name = 'rec.scalar',                 by_stock = by_stock),             ifmissing = NaN),         mean_f = g3a_renewal_vonb_t0(by_stock = by_stock),         stddev_f = g3_parameterized('rec.sd', value = 10, by_stock = by_stock),         alpha_f = g3_parameterized('walpha', by_stock = wgt_by_stock),         beta_f = g3_parameterized('wbeta', by_stock = wgt_by_stock),         by_stock = TRUE,         wgt_by_stock = TRUE,         run_age = quote(stock__minage),         run_projection = FALSE,         run_step = 1,         run_f = NULL,         run_at = g3_action_order$renewal)  g3a_renewal_normalcv(         stock,         factor_f = g3_parameterized('rec',             by_stock = by_stock,             by_year = TRUE,             scale = g3_parameterized(                 name = 'rec.scalar',                 by_stock = by_stock),             ifmissing = NaN),         mean_f = g3a_renewal_vonb_t0(by_stock = by_stock),         cv_f = g3_parameterized('lencv', by_stock = by_stock, value = 0.1,             optimise = FALSE),         alpha_f = g3_parameterized('walpha', by_stock = wgt_by_stock),         beta_f = g3_parameterized('wbeta', by_stock = wgt_by_stock),         by_stock = TRUE,         wgt_by_stock = TRUE,         run_age = quote(stock__minage),         run_projection = FALSE,         run_step = 1,         run_f = NULL,         run_at = g3_action_order$renewal)  ############################# g3a_otherfood  g3a_otherfood(         stock,         num_f = g3_parameterized('of_abund', by_year = TRUE, by_step = TRUE,                                  by_stock = by_stock),         wgt_f = g3_parameterized('of_meanwgt', by_stock = by_stock),         by_stock = TRUE,         run_f = quote( cur_time <= total_steps ),         run_at = g3_action_order$initial)  g3a_otherfood_normalparam(         stock,         factor_f = g3a_renewal_initabund(by_stock = by_stock),         mean_f = g3a_renewal_vonb_t0(by_stock = by_stock),         stddev_f = g3_parameterized('init.sd', value = 10,             by_stock = by_stock, by_age = by_age),         alpha_f = g3_parameterized('walpha', by_stock = wgt_by_stock),         beta_f = g3_parameterized('wbeta', by_stock = wgt_by_stock),         age_offset = quote( cur_step_size ),         by_stock = TRUE,         by_age = FALSE,         wgt_by_stock = TRUE,         run_f = quote( cur_time <= total_steps ),         run_at = g3_action_order$initial)  g3a_otherfood_normalcv(         stock,         factor_f = g3a_renewal_initabund(by_stock = by_stock),         mean_f = g3a_renewal_vonb_t0(by_stock = by_stock),         cv_f = g3_parameterized('lencv', by_stock = by_stock, value = 0.1,             optimise = FALSE),         alpha_f = g3_parameterized('walpha', by_stock = wgt_by_stock),         beta_f = g3_parameterized('wbeta', by_stock = wgt_by_stock),         age_offset = quote( cur_step_size ),         by_stock = TRUE,         by_age = FALSE,         wgt_by_stock = TRUE,         run_f = quote( cur_time <= total_steps ),         run_at = g3_action_order$initial)"},{"path":"/dev/reference/action_renewal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 renewal actions — action_renewal","text":"stock g3_stock apply num_f formula produces lengthgroup vector number individuals current age/area/... length group. wgt_f formula produces lenghgroup vector mean weight current age/area/... length group. run_at Integer order actions run within model, see g3_action_order. factor_f,mean_f,stddev_f,alpha_f,beta_f formula substituted normalparam calcuations, see . cv_f formula substituted normalcv calcuations, basically stddev_f = mean_f * cv_f, see . age_offset Replace age age - age_offset mean_f. Used simulate initialconditions time \"-1\". run_age Age run renewals , used age == (run_age) default run_f run_projection Boolean. Run renewal projection years? false adds !cur_year_projection default run_f run_step step perform renewal , NULL continuous renewal. Adds cur_step == (run_step) default run_f run_f formula specifying condition running action,     initialconditions defaults first timestep.     renewal, default combination run_age, run_step & run_projection.     otherfood, default always run, apart model ending. Linf,K,t0,recl formula substituted vonb calcuations, see . recage formula substituted initial abundance vonb calcuations, see . proportion_f,scalar,init,M,init_F formula substituted initial abundance calcuations, see . by_stock,wgt_by_stock,by_stock_f,by_age Controls parameters grouped, see g3_parameterized","code":""},{"path":"/dev/reference/action_renewal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 renewal actions — action_renewal","text":"following actions renew stock model. differences apply default:  g3a_initialconditions_* run start model, building inital state ages g3a_renewal_* run every step minimal age, adding new recruits alternative g3a_spawn() g3a_otherfood_* run every step, replacing previous state, creating non-dynamic stock predators consume Specifying quantities mean-weights case works identically. model can number g3a_renewal_* actions, long   calling arguments different. instance, run_f = ~age == 5   run_f = ~age == 7. g3a_renewal_* actions define following stock instance variables stock: stock__renewalnum Extra individuals added stock stock__renewalwgt Mean weight added individuals","code":""},{"path":[]},{"path":"/dev/reference/action_renewal.html","id":"g-a-renewal-vonb-recl","dir":"Reference","previous_headings":"","what":"g3a_renewal_vonb_recl","title":"Gadget3 renewal actions — action_renewal","text":"formula object representing     $$ L_{\\infty} * {1 - e^{-1 * \\kappa * (- (a_{0} + \\frac{\\log(1 - L_{0}/L_{\\infty})}{\\kappa}  ))}} $$ \\(L_{0}\\) Substituted recl \\(L_{\\infty}\\) Substituted Linf \\(\\kappa\\) Substituted K \\(a_{0}\\) Substituted recage NB: g3a_initialconditions_normalparam replace \\(\\) \\(- \\Delta{t}\\), see age_offset","code":""},{"path":"/dev/reference/action_renewal.html","id":"g-a-renewal-vonb-t-","dir":"Reference","previous_headings":"","what":"g3a_renewal_vonb_t0","title":"Gadget3 renewal actions — action_renewal","text":"formula object representing     $$ L_{\\infty} * (1 - e^{-1 * \\kappa * (- t_{0}) }) $$ \\(L_{\\infty}\\) Substituted Linf \\(\\kappa\\) Substituted K \\(t_{0}\\) Substituted t0 NB: g3a_initialconditions_normalparam replace \\(\\) \\(- \\Delta{t}\\), see age_offset","code":""},{"path":"/dev/reference/action_renewal.html","id":"g-a-renewal-vonb","dir":"Reference","previous_headings":"","what":"g3a_renewal_vonb","title":"Gadget3 renewal actions — action_renewal","text":"alias g3a_renewal_vonb_recl()","code":""},{"path":"/dev/reference/action_renewal.html","id":"g-a-renewal-initabund","dir":"Reference","previous_headings":"","what":"g3a_renewal_initabund","title":"Gadget3 renewal actions — action_renewal","text":"formula object representing     $$ scalar * init * e^{-1 * (M + F_{0}) * (- a_{0}) } * proportion $$ scalar Substituted scalar init Substituted init \\(M\\) Substituted M \\(F_{0}\\) Substituted init_F \\(a_{0}\\) Substituted recage proportion Substituted proportion","code":""},{"path":"/dev/reference/action_renewal.html","id":"g-a-initialconditions-g-a-renewal-g-a-otherfood","dir":"Reference","previous_headings":"","what":"g3a_initialconditions / g3a_renewal / g3a_otherfood","title":"Gadget3 renewal actions — action_renewal","text":"action (.e. list formula objects) , given stock, iterate   area/age/etc. combination, generate lengthgroup vector new individuals weights using   num_f wgt_f. renewal add fish existing stock,   whereas initialconditions & otherfood replace previous values.","code":""},{"path":"/dev/reference/action_renewal.html","id":"g-a-initialconditions-normalparam-g-a-renewal-normalparam-g-a-otherfood-normalparam","dir":"Reference","previous_headings":"","what":"g3a_initialconditions_normalparam / g3a_renewal_normalparam / g3a_otherfood_normalparam","title":"Gadget3 renewal actions — action_renewal","text":"g3a_initialconditions / g3a_renewal, following formulae used calculate num/wgt: $$n = e^{-(\\frac{L - \\mu}{\\sigma})^2 / 2}$$     $$N = F 10000 \\frac{n}{\\sum n}$$     $$W = \\alpha L^{\\beta}$$ \\(L\\) Midlength length groups current area/age/... \\(F\\) Substituted factor_f \\(\\mu\\) Substituted mean_f \\(\\sigma\\) Substituted stddev_f \\(\\alpha\\) Substituted alpha_f \\(\\beta\\) Substituted beta_f","code":""},{"path":"/dev/reference/action_renewal.html","id":"g-a-initialconditions-normalcv-g-a-renewal-normalcv-g-a-otherfood-normalcv","dir":"Reference","previous_headings":"","what":"g3a_initialconditions_normalcv / g3a_renewal_normalcv / g3a_otherfood_normalcv","title":"Gadget3 renewal actions — action_renewal","text":"g3a_initialconditions / g3a_renewal, following formulae used calculate num/wgt: $$n = e^{-(\\frac{L - \\mu}{\\mu * {CV}})^2 / 2}$$     $$N = F 10000 \\frac{n}{\\sum n}$$     $$W = \\alpha L^{\\beta}$$ \\(L\\) Midlength length groups current area/age/... \\(F\\) Substituted factor_f \\(\\mu\\) Substituted mean_f \\(CV\\) Substituted cv_f \\(\\alpha\\) Substituted alpha_f \\(\\beta\\) Substituted beta_f","code":""},{"path":[]},{"path":"/dev/reference/action_renewal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 renewal actions — action_renewal","text":"","code":"ling_imm <- g3_stock('ling_imm', seq(20, 156, 4)) %>% g3s_age(3, 10)  initialconditions_action <- g3a_initialconditions_normalparam(     ling_imm,     by_age = TRUE)  # per-age init.sd parameters renewal_action <- g3a_renewal_normalparam(     ling_imm,     run_step = 2)  # Renewal happens in spring  # To get a single ling_imm.lencv parameter instead of init.sd initialconditions_action <- g3a_initialconditions_normalcv(     ling_imm) renewal_action <- g3a_renewal_normalcv(     ling_imm,     run_step = 2)  # Renewal happens in spring  ## Plots par(mar = c(4,2,2,1), cex.main = 1) curve(g3_eval(g3a_renewal_vonb_t0(Linf = 20, K = 0.8, t0 = 0), age = x),     0, 10, col = 2, xlab = \"age\", main = \"g3a_renewal_vonb_t0(Linf = 20, K = 0.8..1.4, t0 = 0)\") curve(g3_eval(g3a_renewal_vonb_t0(Linf = 20, K = 1.0, t0 = 0), age = x),     0, 10, col = 1, add = TRUE) curve(g3_eval(g3a_renewal_vonb_t0(Linf = 20, K = 1.2, t0 = 0), age = x),     0, 10, col = 3, add = TRUE) curve(g3_eval(g3a_renewal_vonb_t0(Linf = 20, K = 1.4, t0 = 0), age = x),     0, 10, col = 4, add = TRUE)   ## Otherfood # \"Otherfood\" stocks are defined in a similar manner to any other stock # Note that _normalparam & _normalcv need both length & age dimensions other_wgt <- g3_stock('other_wgt', 0) other_cv <- g3_stock('other_cv', seq(50, 100, by = 10)) %>% g3s_age(5,10)  otherfood_actions <- list(     # Will get other_wgt.of_abund.1998.1, other_wgt.of_meanwgt parameters     g3a_otherfood(other_wgt),     # Use standard vonB parameters (Linf/K/t0) to define abundance     g3a_otherfood_normalcv(other_cv) )"},{"path":"/dev/reference/action_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 report actions — action_report","title":"Gadget3 report actions — action_report","text":"Add report g3 model","code":""},{"path":"/dev/reference/action_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 report actions — action_report","text":"","code":"g3a_report_stock(report_stock, input_stock, report_f,     include_adreport = FALSE,     run_f = TRUE,     run_at = g3_action_order$report)  g3a_report_history(         actions,         var_re = \"__num$|__wgt$\",         out_prefix = \"hist_\",         run_f = TRUE,         run_at = g3_action_order$report)  g3a_report_detail(actions,     run_f = quote( g3_param('report_detail', optimise = FALSE, value = 1L) == 1 ),     abundance_run_at = g3_action_order$report_early,     run_at = g3_action_order$report)"},{"path":"/dev/reference/action_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 report actions — action_report","text":"report_stock g3_stock aggregate input_stock g3_stock aggregated report_f formula specifying collect, instance g3_formula( stock_ss(input_stock__num) ) g3_formula( stock_ss(input_stock__wgt) ). actions List actions model consist . var_re Regular expression specifying variables log history . out_prefix Prefix add history report output, e.g. hist_ling_imm__num. include_adreport aggregated value get ADREPORT'ed? abundance_run_at Integer order abundance collected within model. Note default collected start, end run_f formula specifying condition running action, default always runs. run_at Integer order actions run within model, see g3_action_order.","code":""},{"path":"/dev/reference/action_report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 report actions — action_report","text":"actions define following variables model: report_stock__instance_name Results collating input_stock__instance_name,         instance_name defined first instance variable report_f.         example, report_f ~input_stock__num, report report_stock__num. model can number g3a_report_* actions, long   calling arguments different. instance, run_f = ~age == 5   run_f = ~age == 7.","code":""},{"path":[]},{"path":"/dev/reference/action_report.html","id":"g-a-report-stock","dir":"Reference","previous_headings":"","what":"g3a_report_stock","title":"Gadget3 report actions — action_report","text":"action (.e. list formula objects) ... Iterate input_stock, collecting data report_stock Add contents report_stock__instance_name model report","code":""},{"path":"/dev/reference/action_report.html","id":"g-a-report-history","dir":"Reference","previous_headings":"","what":"g3a_report_history","title":"Gadget3 report actions — action_report","text":"action (.e. list formula objects) store current state variable found matching var_re.","code":""},{"path":"/dev/reference/action_report.html","id":"g-a-report-detailed","dir":"Reference","previous_headings":"","what":"g3a_report_detailed","title":"Gadget3 report actions — action_report","text":"Uses g3a_report_history generate detailed reports suitable use g3_fit.","code":""},{"path":[]},{"path":"/dev/reference/action_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 report actions — action_report","text":"","code":"ling_imm <- g3_stock('ling_imm', seq(20, 156, 4)) %>% g3s_age(3, 10)  # Report that aggregates ages together agg_report <- g3_stock('agg_report', c(1)) %>%     g3s_agegroup(list(young = 1:3, old = 4:5)) %>%     g3s_time(year = 2000:2002) # Generate dissaggregated report by cloning the source stock, adding time raw_report <- g3s_clone(ling_imm, 'raw_report') %>%     g3s_time(year = 2000:2002)  actions <- list(     g3a_age(ling_imm),     g3a_report_stock(agg_report, ling_imm, g3_formula( stock_ss(ling_imm__num) ),         include_adreport = TRUE),     g3a_report_stock(raw_report, ling_imm, g3_formula( stock_ss(ling_imm__num) ))) # \"raw_report__num\" and \"agg_report__num\" will be available in the model report # In addition, agg_report__num will be included in TMB::sdreport() output  # Report history of all \"__num\" and \"__wgt\" variables actions <- c(actions, list(g3a_report_history(actions)))  # Report history of just \"ling_imm__num\" actions <- c(actions, list(g3a_report_history(actions, \"^ling_imm__num$\")))  # Add a detail report suitable for g3_fit actions <- c(actions, list(g3a_report_detail(actions)))"},{"path":"/dev/reference/action_spawn.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 spawning action — action_spawn","title":"Gadget3 spawning action — action_spawn","text":"Add spawning g3 model","code":""},{"path":"/dev/reference/action_spawn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 spawning action — action_spawn","text":"","code":"g3a_spawn_recruitment_fecundity(p0, p1, p2, p3, p4)  g3a_spawn_recruitment_simplessb(mu)  g3a_spawn_recruitment_ricker(mu, lambda)  g3a_spawn_recruitment_bevertonholt(mu, lambda)  g3a_spawn_recruitment_hockeystick(r0, blim)  g3a_spawn(         stock,         recruitment_f,         proportion_f = 1,         mortality_f = 0,         weightloss_f = 0,         output_stocks = list(),         output_ratios = rep(1 / length(output_stocks), times = length(output_stocks)),         mean_f = g3a_renewal_vonb_t0(by_stock = by_stock),         stddev_f = g3_parameterized('rec.sd', value = 10, by_stock = by_stock),         alpha_f = g3_parameterized('walpha', by_stock = wgt_by_stock),         beta_f = g3_parameterized('wbeta', by_stock = wgt_by_stock),         by_stock = TRUE,         wgt_by_stock = TRUE,         run_step = NULL,         run_f = ~TRUE,         run_at = g3_action_order$spawn,         recruit_at = g3_action_order$renewal)"},{"path":"/dev/reference/action_spawn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 spawning action — action_spawn","text":"p0,p1,p2,p3,p4 Substituted g3a_spawn_recruitment_fecundity formula, see . mu,lambda,r0,blim Substituted g3a_spawn_recruitment_* formula, see . stock mature g3_stock spawn action. recruitment_f list formula generated one g3a_spawn_recruitment_* functions, containing s Formula run subset stock r Final formula calculating number recruits spawning action  proportion_f formula generated one g3_suitability_* functions, describing     proportion stock spawn timestep. mortality_f formula generated one g3_suitability_* functions, describing     proportion spawning stock die spawning. weightloss_f formula generated one g3_suitability_* functions, describing     overall weight loss spawning. output_stocks List g3_stocks spawned . output_ratios Vector proportions distribute output_stocks, summing 1, default evenly spread. mean_f,stddev_f,alpha_f,beta_f formula substituted stock structure calculations, see g3a_renewal_normalparam details. run_step step perform renewal , NULL continuous spawning.     Adds cur_step == (run_step) default run_f. run_f formula specifying condition running action, default always runs. run_at Integer order spawning actions run within model, see g3_action_order. recruit_at Integer order recruitment spawning run within model, see g3_action_order. by_stock,wgt_by_stock Controls parameters grouped, see g3_parameterized","code":""},{"path":"/dev/reference/action_spawn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 spawning action — action_spawn","text":"restrict spawning particular step year, particular area, use run_f.   example: cur_step == 1 Spawning happen first step every year cur_step == 1 && cur_year >= 1990 Spawning happen first step every year 1990 cur_step == 2 && area = 1 Spawning happen second step every year, first area action define following stock instance variables given stock output_stock: stock__spawnprop Proportion (stock) spawning spawning event stock__spawningnum Numbers (stock) spawning spawning event output_stock__spawnednum Numbers (output_stock) produced spawning event","code":""},{"path":[]},{"path":"/dev/reference/action_spawn.html","id":"g-a-spawn-recruitment-fecundity","dir":"Reference","previous_headings":"","what":"g3a_spawn_recruitment_fecundity","title":"Gadget3 spawning action — action_spawn","text":"pair formula objects:     $$ S = l ^{p_{1}} ^{p_{2}} (p N_{al})^{p_{3}} W_{al}^{p_{4}} $$     $$ R = p_{0} S $$ \\(N_{al}\\) Number parent stock \\(W_{al}\\) Weight parent stock \\(p\\) Proportion parent stock spawning, proportion_f \\(p_{0..4}\\) Arguments provided function","code":""},{"path":"/dev/reference/action_spawn.html","id":"g-a-spawn-recruitment-simplessb","dir":"Reference","previous_headings":"","what":"g3a_spawn_recruitment_simplessb","title":"Gadget3 spawning action — action_spawn","text":"pair formula objects:     $$ S = N_{al} p  W_{al} $$     $$ R = \\mu S $$ \\(N_{al}\\) Number parent stock \\(W_{al}\\) Weight parent stock \\(p\\) Proportion parent stock spawning, proportion_f μ Argument provided function","code":""},{"path":"/dev/reference/action_spawn.html","id":"g-a-spawn-recruitment-ricker","dir":"Reference","previous_headings":"","what":"g3a_spawn_recruitment_ricker","title":"Gadget3 spawning action — action_spawn","text":"pair formula objects:     $$ S = N_{al} p  W_{al} $$     $$ R = \\mu S e^{-\\lambda S} $$ \\(N_{al}\\) Number parent stock \\(W_{al}\\) Weight parent stock \\(p\\) Proportion parent stock spawning, proportion_f μ Argument provided function λ Argument provided function","code":""},{"path":"/dev/reference/action_spawn.html","id":"g-a-spawn-recruitment-bevertonholt","dir":"Reference","previous_headings":"","what":"g3a_spawn_recruitment_bevertonholt","title":"Gadget3 spawning action — action_spawn","text":"pair formula objects:     $$ S = N_{al} p  W_{al} $$     $$ R = \\frac{\\mu S}{\\lambda + S} $$ \\(N_{al}\\) Number parent stock \\(W_{al}\\) Weight parent stock \\(p\\) Proportion parent stock spawning, proportion_f μ Argument provided function λ Argument provided function","code":""},{"path":"/dev/reference/action_spawn.html","id":"g-a-spawn-recruitment-hockeystick","dir":"Reference","previous_headings":"","what":"g3a_spawn_recruitment_hockeystick","title":"Gadget3 spawning action — action_spawn","text":"pair formula objects:     $$ S = N_{al} p  W_{al} $$     $$ R = R_0 \\min{( S / B_{lim}, 1)} $$ \\(N_{al}\\) Number parent stock \\(W_{al}\\) Weight parent stock \\(p\\) Proportion parent stock spawning, proportion_f \\(R_0\\) Argument r0 provided function \\(B_{lim}\\) Argument blim provided function NB: formula differentiable, despite using min()     definition .","code":""},{"path":"/dev/reference/action_spawn.html","id":"g-a-spawn","dir":"Reference","previous_headings":"","what":"g3a_spawn","title":"Gadget3 spawning action — action_spawn","text":"action (.e. list formula objects) , given stock... Use proportion_f calculate total parent stock spawn Use recruitment_f derive total newly spawned stock Apply weightloss_f mortality_f parent stock ... , recruitment stage ... Recruit evenly output_stocks, using mean_f, stddev_f, alpha_f, beta_f     -per g3a_renewal_normalparam","code":""},{"path":[]},{"path":"/dev/reference/action_spawn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 spawning action — action_spawn","text":"","code":"ling_imm <- g3_stock('ling_imm', seq(20, 156, 4)) %>% g3s_age(3, 10) ling_mat <- g3_stock('ling_mat', seq(20, 156, 4)) %>% g3s_age(3, 10)  spawn_action <- g3a_spawn(     # Spawn from ling_mat     ling_mat,     # Use Ricker Recruitment Function to calculate # of recruits from total biomass     recruitment_f = g3a_spawn_recruitment_ricker(         g3_parameterized(\"ricker.mu\"),         g3_parameterized(\"ricker.lambda\")),     # Proportion of ling_mat spawning exponential relationship based on length     proportion_f = g3_suitability_exponentiall50(         alpha = g3_parameterized(\"spawn.prop.alpha\", scale = -1),         l50 = g3_parameterized(\"spawn.prop.l50\")),     # Proportion of ling_mat dying during spawning linear relationship to length     mortality_f = g3_suitability_straightline(         alpha = g3_parameterized(\"spawn.mort.alpha\"),         beta = g3_parameterized(\"spawn.mort.beta\")),     # Weightloss of ling_mat during spawning a constant     weightloss_f = g3_parameterized(\"spawn.weightloss\"),     # Spawn into ling_imm     output_stocks = list(ling_imm),     # Spawned stock structure, as-per g3a_renewal_normalparam()     mean_f = 50,     stddev_f = 0.9,     alpha_f = 1,     beta_f = 1,     # Spawning should happen on the first step of every year     run_f = ~cur_step==1)"},{"path":"/dev/reference/action_tagging.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 tag-release action — action_tagging","title":"Gadget3 tag-release action — action_tagging","text":"Add tag-release g3 model","code":""},{"path":"/dev/reference/action_tagging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 tag-release action — action_tagging","text":"","code":"g3a_predate_tagrelease(        fleet_stock, prey_stocks, suitabilities, catchability_f,        output_tag_f, mortality_f = 0, run_f = ~TRUE,        run_at = g3_action_order$predate, ...)  g3a_tag_shedding(stocks, tagshed_f, run_f = ~TRUE,        run_at = g3_action_order$straying)"},{"path":"/dev/reference/action_tagging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 tag-release action — action_tagging","text":"fleet_stock Tagging fleet, see g3a_predate_fleet prey_stocks Stocks fleet harvests, see g3a_predate_fleet suitabilities See g3a_predate_fleet catchability_f See g3a_predate_fleet output_tag_f formula specifying numeric tag (see g3s_tag) stock released .     Implemented g3_timeareadata table, e.g. mortality_f formula generated one g3_suitability_* functions, describing     proportion tagged stock die tagging. stocks Stocks shed tags tagshed_f formula proportion shed tags point run_f formula specifying condition running action, default always runs. run_at Integer order spawning actions run within model, see g3_action_order. ... options g3a_predate_fleet","code":""},{"path":[]},{"path":"/dev/reference/action_tagging.html","id":"g-a-predate-tagrelease","dir":"Reference","previous_headings":"","what":"g3a_predate_tagrelease","title":"Gadget3 tag-release action — action_tagging","text":"action (.e. list formula objects) ... Harvest -per g3a_predate_fleet Use mortality_f apply tagging mortality harvested stock Use output_tag_f decide tag applied harvested stock Put harvested stock back general circulation","code":""},{"path":"/dev/reference/action_tagging.html","id":"g-a-tag-shedding","dir":"Reference","previous_headings":"","what":"g3a_tag_shedding","title":"Gadget3 tag-release action — action_tagging","text":"action (.e. list formula objects) ... stock, move proportion tagshed_f back \"untagged\" tag","code":""},{"path":[]},{"path":"/dev/reference/action_tagging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 tag-release action — action_tagging","text":"","code":"tags <- c('H1-00', 'H1-01') tags <- structure(seq_along(tags), names = tags)  prey_a <- g3_stock('prey_a', seq(1, 10)) %>% g3s_tag(tags) fleet_a <- g3_fleet('fleet_a')  actions <- list(     # NB: If g3_tag() is used in the stock, initialconditions/renewal     # will only renew into tag == 0 (i.e. untagged)     g3a_predate_tagrelease(         # Setup as-per g3a_predate_fleet         fleet_a,         list(prey_a),         suitabilities = list(prey_a = 1),         catchability_f = g3a_predate_catchability_numberfleet(~100),                  # Optional tag mortality suitability         mortality_f = g3_suitability_straightline(             g3_parameterized('mort_alpha'),             g3_parameterized('mort_beta')),          # Formula to decide which tag to output into, generate table         # with one tag per year         output_tag_f = g3_timeareadata('fleet_a_tags', data.frame(             year = 2000:2001,             tag = tags[c('H1-00', 'H1-01')],             stringsAsFactors = FALSE), value_field = \"tag\"),          # Experiment only happens in spring         run_f = ~cur_step == 2),      g3a_tag_shedding(         list(prey_a),         # i.e. 0.125 will loose their tag each step         tagshed_f = log(8)))"},{"path":"/dev/reference/action_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 timekeeping actions — action_time","title":"Gadget3 timekeeping actions — action_time","text":"Add timekeeping g3 model","code":""},{"path":"/dev/reference/action_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 timekeeping actions — action_time","text":"","code":"g3a_time(         start_year,         end_year,         step_lengths = c(12),         final_year_steps = quote( length(step_lengths) ),         project_years = g3_parameterized(\"project_years\", value = 0, optimise = FALSE),         retro_years = g3_parameterized(\"retro_years\", value = 0, optimise = FALSE),         run_at = g3_action_order$initial,         run_stop_at = g3_action_order$time)"},{"path":"/dev/reference/action_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 timekeeping actions — action_time","text":"start_year Year model run start. end_year year, model run stop. step_lengths Either MFDB time grouping, e.g. mfdb::mfdb_timestep_quarterly,     vector step lengths sum 12,     example, c(3,3,3,3) quarterly steps within year. final_year_steps Number steps final year include. Either integer quoted     code, case calcuated model runs.     example: 0 Model stops start end_year (exclusive) length(step_lengths) Model stops end end_year (inclusive) 2 Model stops second step end_year, mid-year step_lengths quarterly  project_years Number years continue running \"end\" model. Must >= 0 Defaults unoptimized project_years parameter, set 0 (.e. projection).     Generally, change parameter parameter template, rather changing . retro_years Adjust end_year finish model early. Must >= 0     Can used conjunction project_years project instead. true end year model end_year - retro_years + project_years. Defaults unoptimized retro_years parameter, set 0.     Generally, change parameter parameter template, rather changing . run_at, run_stop_at Integer order actions run within model, see g3_action_order.     run_at year variable accounting,     run_stop_at model finish past final step model.","code":""},{"path":"/dev/reference/action_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 timekeeping actions — action_time","text":"actions define following variables model: cur_time Current iteration model, starts 0 increments finished cur_step Current step within individual year cur_step_size Proportion year step contains, e.g. quarterly = 3/12 cur_year Current year cur_step_final TRUE iff final step year cur_year_projection TRUE iff currently projecting past end_year total_steps Total # iterations (including projection) model stops total_years Total # years (including projection) model stops","code":""},{"path":[]},{"path":"/dev/reference/action_time.html","id":"g-a-time","dir":"Reference","previous_headings":"","what":"g3a_time","title":"Gadget3 timekeeping actions — action_time","text":"action (.e. list formula objects) ... Define cur_* variables listed reached end model, return nll","code":""},{"path":"/dev/reference/action_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 timekeeping actions — action_time","text":"","code":"# Run model 2000..2004, in quarterly steps time_action <- g3a_time(     start_year = 2000,     end_year = 2004,     c(3, 3, 3, 3))"},{"path":"/dev/reference/eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate G3 forumulas — eval","title":"Evaluate G3 forumulas — eval","text":"Evaluate G3 formulas / code outside model","code":""},{"path":"/dev/reference/eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate G3 forumulas — eval","text":"","code":"g3_eval(f, ...)"},{"path":"/dev/reference/eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate G3 forumulas — eval","text":"f formula object quoted code evaluated ... Named items add formula's environment,     single list / environment use.","code":""},{"path":"/dev/reference/eval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate G3 forumulas — eval","text":"Allows snippets gadget3 code run outside model.   done regular eval, however, g3_eval number things first:  global g3_env environment, functions avoid_zero can used substituting g3_stock, definitions stock__minlen also substituted g3_param('x') pull param.x environment","code":""},{"path":"/dev/reference/eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate G3 forumulas — eval","text":"Result evaluating f.","code":""},{"path":"/dev/reference/eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate G3 forumulas — eval","text":"","code":"# Evaluate suitiability function for given stocks g3_eval(     g3_suitability_andersen(0,1,2,3,4),     predator_length = 100,     stock = g3_stock('prey', 1:10)) #>        1:2        2:3        3:4        4:5        5:6        6:7        7:8  #> 0.06590394 0.17962624 0.31617501 0.45914780 0.60006286 0.73464024 0.86084911  #>        8:9       9:10     10:Inf  #> 0.97788544 1.08562040 1.18429375  #> attr(,\"class\") #> [1] \"force_vector\" \"numeric\"       # Parameters can be filled in with \"param.\" items in environment g3_eval(quote( g3_param('x') ), param.x = 88) #> [1] 88 g3_eval(     g3_parameterized('lln.alpha', by_stock = TRUE, value = 99),     stock = g3_stock(\"fish\", 1:10),     param.fish.lln.alpha = 123) #> [1] 123  # Graph gadget3's built-in logspace_add() if (interactive()) {   curve(g3_eval(quote( logspace_add(a, 10) ), a = x), 0, 50) }"},{"path":"/dev/reference/formula_utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 formula helpers — formula_utils","title":"Gadget3 formula helpers — formula_utils","text":"Tools create R formulas","code":""},{"path":"/dev/reference/formula_utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 formula helpers — formula_utils","text":"","code":"g3_formula(code, ...)"},{"path":"/dev/reference/formula_utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 formula helpers — formula_utils","text":"code Unevaluated code turned formula ... Named items add formula's environment,     single list / environment use.","code":""},{"path":"/dev/reference/formula_utils.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 formula helpers — formula_utils","text":"using ~, local environment attached code.   can leak unwanted variables model. allows avoid   problem without resorting local.","code":""},{"path":"/dev/reference/formula_utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gadget3 formula helpers — formula_utils","text":"formula object, environment created ....   Can used anywhere gadget3 accepts formula.","code":""},{"path":"/dev/reference/formula_utils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 formula helpers — formula_utils","text":"","code":"# g3_formula is identical to defining a formula within local(): stopifnot(all.equal(     g3_formula(x + 1, z = 44),     local({ z = 44; ~x + 1 })     ))  # If the code is destined for CRAN, you need to quote() to avoid check errors: stopifnot(all.equal(     g3_formula(quote( x + 1 ), z = 44),     local({ z = 44; ~x + 1 })     ))"},{"path":"/dev/reference/init_val.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 parameter value setter — init_val","title":"Gadget3 parameter value setter — init_val","text":"Helper setting initial parameter value","code":""},{"path":"/dev/reference/init_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 parameter value setter — init_val","text":"","code":"g3_init_val(         param_template,         name_spec,         value = NULL,         spread = NULL,         lower = if (!is.null(spread)) value * (1 - spread),         upper = if (!is.null(spread)) value * (1 + spread),         optimise = !is.null(lower) & !is.null(upper),         parscale = if (is.null(lower) || is.null(upper)) NULL else 'auto',         random = NULL,         auto_exponentiate = TRUE)"},{"path":"/dev/reference/init_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 parameter value setter — init_val","text":"param_template parameter template generated g3_to_r g3_to_tmb name_spec glob-like string match parameter names, see Details value Numeric value / vector values set value / 'value' column template.     Original value left NULL spread Shortcut setting lower & upper. lower Numeric value / vector values set 'lower' column template.     Original value left NULL upper Numeric value / vector values set 'upper' column template.     Original value left NULL optimise Boolean value set 'optimise' column template.     Default true iff lower upper non-NULL.     Original value left NULL parscale Numeric value / vector values set 'parscale' column template.     Default (auto) difference lower & upper (NULL set).     Original value left NULL random Boolean value set 'random' column template.     Original value left NULL auto_exponentiate TRUE, implicitly match parameters ending \"_exp\",     case log value/lower/upper values","code":""},{"path":"/dev/reference/init_val.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 parameter value setter — init_val","text":"name_spec glob (wildcard) matching parameters.   string separated ., part can : wildcard matching anything (*), matching anything prefix, e.g. m* wildcard matching number (#), matching number prefix, e.g. age* range numbers, e.g. [1979-1984] choice options can separated |, e.g. init|rec [1979-1984]|[2000-2003]","code":""},{"path":"/dev/reference/init_val.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gadget3 parameter value setter — init_val","text":"new parameter template list/table containing modifications","code":""},{"path":[]},{"path":"/dev/reference/init_val.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 parameter value setter — init_val","text":"","code":"# A parameter template, would already be got via. attr(g3_to_tmb(...), \"parameter_template\") pt <- data.frame(     switch = c(         paste0('fish.init.', 1:9),         paste0('fish.rec.', 1990:2000),         'fish.M'),     value = NA,     lower = NA,     upper = NA,     parscale = NA,     optimise = FALSE,     random = FALSE)  # Set all fish.init.# parameters to optimise pt <- g3_init_val(pt, 'fish.init.#', 4, spread = 8)  # Set a fixed value for any .M pt <- g3_init_val(pt, '*.M', value = 0.3, optimise = FALSE)  # Set a fixed value for a range of recruitment years, optimise the rest pt |>     g3_init_val('*.rec.#', value = 4, lower = 0, upper = 10) |>     g3_init_val('*.rec.[1993-1996]', value = 0, optimise = FALSE) |>     identity() -> pt  pt #>           switch value lower upper parscale optimise random #> 1    fish.init.1   4.0   -28    36       64     TRUE  FALSE #> 2    fish.init.2   4.0   -28    36       64     TRUE  FALSE #> 3    fish.init.3   4.0   -28    36       64     TRUE  FALSE #> 4    fish.init.4   4.0   -28    36       64     TRUE  FALSE #> 5    fish.init.5   4.0   -28    36       64     TRUE  FALSE #> 6    fish.init.6   4.0   -28    36       64     TRUE  FALSE #> 7    fish.init.7   4.0   -28    36       64     TRUE  FALSE #> 8    fish.init.8   4.0   -28    36       64     TRUE  FALSE #> 9    fish.init.9   4.0   -28    36       64     TRUE  FALSE #> 10 fish.rec.1990   4.0     0    10       10     TRUE  FALSE #> 11 fish.rec.1991   4.0     0    10       10     TRUE  FALSE #> 12 fish.rec.1992   4.0     0    10       10     TRUE  FALSE #> 13 fish.rec.1993   0.0     0    10       10    FALSE  FALSE #> 14 fish.rec.1994   0.0     0    10       10    FALSE  FALSE #> 15 fish.rec.1995   0.0     0    10       10    FALSE  FALSE #> 16 fish.rec.1996   0.0     0    10       10    FALSE  FALSE #> 17 fish.rec.1997   4.0     0    10       10     TRUE  FALSE #> 18 fish.rec.1998   4.0     0    10       10     TRUE  FALSE #> 19 fish.rec.1999   4.0     0    10       10     TRUE  FALSE #> 20 fish.rec.2000   4.0     0    10       10     TRUE  FALSE #> 21        fish.M   0.3    NA    NA       NA    FALSE  FALSE"},{"path":"/dev/reference/language.html","id":null,"dir":"Reference","previous_headings":"","what":"G3 language extensions to R — language","title":"G3 language extensions to R — language","text":"Additional meta-functions available use G3 formula.","code":""},{"path":"/dev/reference/language.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"G3 language extensions to R — language","text":"Whilst used functions, functions alter code output model,   rather appearing directly.","code":""},{"path":"/dev/reference/language.html","id":"g-idx","dir":"Reference","previous_headings":"","what":"g3_idx","title":"G3 language extensions to R — language","text":"Adds - 1 supplied expression, C++ (0-based   indexes). R expression passed unchanged. Note: generally internal use, [[   automatically . example, g3_idx() replaced R output   - 1 C++ output.","code":""},{"path":"/dev/reference/language.html","id":"g-param","dir":"Reference","previous_headings":"","what":"g3_param","title":"G3 language extensions to R — language","text":"Reference scalar parameter name. Arguments:  name Variable name parameter. Required value Initial value model parameter_template. Default 0 optimise Initial optimise setting parameter_template. Default TRUE random Initial random setting parameter_template. Default FALSE lower Initial lower setting parameter_template. Default NA upper Initial upper setting parameter_template. Default NA example, g3_param(\"ling.Linf\") register scalar parameter   called ling.Linf, available model parameter template,   replaced reference parameter. g3_param(\"ling.Linf\") can used multiple times, refer   value.","code":""},{"path":"/dev/reference/language.html","id":"g-param-vector","dir":"Reference","previous_headings":"","what":"g3_param_vector","title":"G3 language extensions to R — language","text":"Reference vector parameter name. Arguments:  name Variable name parameter. Required value Initial value use model paramter_template. Default 0 g3_param, parameter expected vector.   can dereference [[. example, g3_param_vector(\"lingimm.M\")[[age - 3 + 1]].","code":""},{"path":"/dev/reference/language.html","id":"g-param-table","dir":"Reference","previous_headings":"","what":"g3_param_table","title":"G3 language extensions to R — language","text":"Reference lookup-table parameters.  name Variable name parameter. Required table data.frame, one column variable check, one row possible values. Required value Initial value use model parameter_template. Default 0 optimise Initial optimise setting parameter_template. Default TRUE random Initial random setting parameter_template. Default FALSE lower Initial lower setting parameter_template. Default NA upper Initial upper setting parameter_template. Default NA ifmissing Value return outside table bounds. Default NaN warning value missing similar providing vector, can use values model   provide bounds-checking. function takes 2 arguments, prefix generated parameters,   data.frame variables possible values. expand.grid can   used produce cross product provided variables. Note: variables referenced need integer variables,   likely iteration variables cur_year, age,   area... example, following: g3_param_table('lingimm.M', expand.grid(age = seq(ling_imm__minage,   ling_imm__maxage))) generate parameters   lingimm.M.3..lingimm.M.10, assuming ling_imm ages 3..10. call g3_param_table replaced   param[[paste(\"lingimm.M\", age, sep = \".\")]], equivalent code   C++.","code":""},{"path":"/dev/reference/language.html","id":"g-with","dir":"Reference","previous_headings":"","what":"g3_with","title":"G3 language extensions to R — language","text":"g3_with(var1 := val1, var2 := val2, { x <- val1 * val2 })   equivalent   local({var1 <- val1, var2 <- val2, { x <<- val1 * val2 } }) However, make new environment code block R, C++.","code":""},{"path":"/dev/reference/likelihood_bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 likelihood bounds_penalty action — likelihood_bounds_penalty","title":"Gadget3 likelihood bounds_penalty action — likelihood_bounds_penalty","text":"Add liklihood penalty parameters leaving bounds set parameter_template","code":""},{"path":"/dev/reference/likelihood_bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 likelihood bounds_penalty action — likelihood_bounds_penalty","text":"","code":"g3l_bounds_penalty(         actions_or_parameter_template,         weight = 1,         run_at = g3_action_order$likelihood)"},{"path":"/dev/reference/likelihood_bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 likelihood bounds_penalty action — likelihood_bounds_penalty","text":"actions_or_parameter_template Either: list actions, extract parameters add bounds . parameter template generated g3_to_tmb, optimise, lower, upper populated,     bounds parameters hard-coded. weight Weighting applied likelihood component. run_at Integer order actions run within model, see g3_action_order.","code":""},{"path":"/dev/reference/likelihood_bounds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 likelihood bounds_penalty action — likelihood_bounds_penalty","text":"Whilst lower/upper can passed optim, methods can use .   Adding g3l_bounds_penalty OTOH can used method.","code":""},{"path":[]},{"path":"/dev/reference/likelihood_bounds.html","id":"g-l-bounds-penalty","dir":"Reference","previous_headings":"","what":"g3l_bounds_penalty","title":"Gadget3 likelihood bounds_penalty action — likelihood_bounds_penalty","text":"action (.e. list formula objects) ...     actions list supplied, add large number likelihood parameter outside bounds.     Bounds updated whenever g3_tmb_adfun run. parameter_template supplied, add large number likelihood outside bounds template.     bounds baked model point.","code":""},{"path":"/dev/reference/likelihood_bounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 likelihood bounds_penalty action — likelihood_bounds_penalty","text":"","code":"anch <- g3_stock('anch', seq(20, 156, 4)) %>% g3s_age(3, 10) actions <- list(   g3a_time(1990, 1994),   g3a_growmature(anch, g3a_grow_impl_bbinom(     maxlengthgroupgrowth = 38L)),   g3a_naturalmortality(anch),   g3a_initialconditions_normalparam(anch),   g3a_renewal_normalparam(anch,     run_step = NULL),   g3a_age(anch),   NULL)  # Generate code with bounds added model_code <- g3_to_tmb(c(actions, list(g3l_bounds_penalty(actions))))  attr(model_code, \"parameter_template\") %>%   # Set lower / upper bounds for initial conditions   g3_init_val(\"*.init.#\", 10, lower = 0.001, upper = 200) %>%   identity() -> params.in  # The objective function produced by g3_tmb_adfun() will honour the bounds # above, without having to pass them to stats::optim()"},{"path":"/dev/reference/likelihood_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 likelihood actions — likelihood_catchdistribution","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"Gather nll g3 model","code":""},{"path":"/dev/reference/likelihood_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"","code":"g3l_distribution_sumofsquares(         over = c('area', 'predator_tag', 'predator_age', 'predator_length'))  g3l_distribution_multinomial(epsilon = 10)  g3l_distribution_multivariate(rho_f, sigma_f, over = c(\"area\"))  g3l_distribution_surveyindices_log(alpha = NULL, beta = 1)  g3l_distribution_surveyindices_linear(alpha = NULL, beta = 1)  g3l_distribution_sumofsquaredlogratios(epsilon = 10)  g3l_abundancedistribution(         nll_name,         obs_data,         fleets = list(),         stocks,         function_f,         transform_fs = list(),         missing_val = 0,         area_group = NULL,         report = FALSE,         nll_breakdown = FALSE,         weight = substitute(             g3_param(n, optimise = FALSE, value = 1),             list(n = paste0(nll_name, \"_weight\"))),         run_at = g3_action_order$likelihood)  g3l_catchdistribution(         nll_name,         obs_data,         fleets = list(),         stocks,         function_f,         transform_fs = list(),         missing_val = 0,         area_group = NULL,         report = FALSE,         nll_breakdown = FALSE,         weight = substitute(             g3_param(n, optimise = FALSE, value = 1),             list(n = paste0(nll_name, \"_weight\"))),         run_at = g3_action_order$likelihood)  g3_distribution_preview(         obs_data,         fleets = list(),         stocks = list(),         area_group = NULL)"},{"path":"/dev/reference/likelihood_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"comparing proportions lengthgroups, specifies dimensions define total.     example default \"area\" means proprtion current lengthgroup individuals     area. c('area', 'predator_tag', 'predator_age', 'predator_length')) compare current lengthgroup     individuals consumed predator. Note unknown dimensions ignored; example fleet tag/age/length,     area effect . rho_f,sigma_f formula substituted multivariate calcuations, see . epsilon Value used whenever calculated probability unlikely. Default 10. alpha formula substituted surveyindices calcuations fix intercept linear regression,     NULL fixed. See . beta formula substituted surveyindices calcuations fix slope linear regression,     NULL fixed. See . nll_name Character string, used define variable name obsstock modelstock. obs_data Data.frame observation data, example results     mfdb_sample_count. least year column, length weight column.     information, see \"obs_data data aggregation\" . fleets list g3_stock objects collect catch data .     empty, collect abundance data stocks instead. stocks list g3_stock objects collect catch abundance data ,     depending stocks provided. function_f formula compare obsstock__x modelstock__x generate nll,     defined one g3l_distribution_* functions. adapted compare either number (modelstock__num) weight (modelstock__wgt)     depending columns obs_data . transform_fs list dimension names either formula objects list stock names formula objects     (transform differs stocks). See examples. missing_val missing values incoming data, value replace . area_group mfdb_group list mapping area names used     obs_data integer model areas, see \"obs_data data aggregation\"     . report TRUE, add model observation arrays model report, called     cdist_nll_name_model__num/wgt cdist_nll_name_obs__num/wgt     respectively nll_breakdown nll report broken time? TRUE / FALSE weight Weighting applied likelihood component. Default g3_param     defaults 1, allowing weights altered without recompiling. run_at Integer order actions run within model, see g3_action_order.","code":""},{"path":"/dev/reference/likelihood_distribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"actions define following variables model: obsstock__num/wgt g3_stock instance contains observations array modelstock__num/wgt g3_stock instance groups identical fashion obsstock,         filled model's predicted values model report contain nll_cdist_nll_name__num /nll_cdist_nll_name__wgt, depending   columns obs_data (number column compare individuals, produce corresponding num report).   nll_breakdown TRUE, array one entry per timestep. g3l_abundancedistribution compares abundance stocks, g3l_catchdistribution compares fleet catch.   Thus providing fleets mandatory g3l_catchdistribution, error g3l_abundancedistribution.","code":""},{"path":"/dev/reference/likelihood_distribution.html","id":"obs-data-and-data-aggregation","dir":"Reference","previous_headings":"","what":"obs_data and data aggregation","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"obs_data data.frame, well providing observation data     compare model data , controls grouping model data     compare observation data, inspecting MFDB column attributes     produced e.g. mfdb_sample_count. Metadata columns describe observation datapoint row.     columns list: year Required.         Year data point. Gaps years result comparison year step Optional.         step column, data assumed yearly,         model data timesteps summed comparing. Model timestep data point. Gaps steps result comparison year/step. length Optional.         missing lengthgroups model summed compare         data. column can factor, generated cut(), e.g         cut(raw_length, c(seq(0, 50, = 10), Inf), right = FALSE)         open-ended upper group. column can character strings also formatted factors .         column entries assumed sorted order converted back         factor. open_ended = c('lower', 'upper') used querying MFDB         data, bottom/top length groups modified         start zero infinite respectively. missing lengthgroups (otherwise data         year/step) compared zero. age Optional.         missing age-groups () model summed compare         data. Model ages grouped groupings MFDB used, thus         data formed query age = mfdb_group(young = 1:3,         old = 4:5), model data similarly 2 groups . missing ages (otherwise data         year/step) compared zero. predator_length / predator_age / predator_tag Optional. Values length/age/tag respectively, group predator rather prey. stock Optional.         stock_re missing stocks stocks         summed compare data. values stocks column match names stocks         given stocks parameter. column can factor         character. missing stocks (otherwise data         year/step) compared zero. stock_re Optional.         stock missing stocks stocks summed         compare data. values stocks column used regular expressions         match names stocks given stocks parameter.         example, '_mat_' match 'ghd_mat_f' 'ghd_mat_m'         compared sum 2 stocks. missing stocks (otherwise data         year/step) compared zero. fleet Optional.         fleet_re missing fleets fleets         summed compare data. values fleets column match names fleets         given fleets parameter. column can factor         character. missing fleets (otherwise data         year/step) compared zero. fleet_re Optional.         fleet missing fleets fleets summed         compare data. values fleets column used regular expressions         match names fleets given fleets parameter.         example, '_trawl_' match 'fleet_trawl_is' 'fleet_trawl_no'         compared sum 2 fleets. missing fleets (otherwise data         year/step) compared zero. area Optional.         missing areas model summed compare         data. Unlike columns, MFDB grouping ignored (areas         grouping integer model areas). Instead,         area_group parameter describe map area         names used table integer model areas. example, area_group = list(north=1:2, south=3:5),         area column obs_data contain either \"north\"         \"south\", corresponding model data summed integer model         areas 1,2 3,4,5 respectively. area_group supplied, assume obs_data         area column contain model area integers. missing areas (otherwise data         year/step) compared zero. Data columns contain observation data compare.     least one :  number number column appears obs_data, stock abundance         individuals aggregated compared obs_data         number column. weight weight column appears obs_data, total biomass         stock aggregated compared obs_data number         column. can use g3_distribution_preview see observation data     converted array.","code":""},{"path":[]},{"path":[]},{"path":"/dev/reference/likelihood_distribution.html","id":"g-l-distribution-sumofsquares","dir":"Reference","previous_headings":"","what":"g3l_distribution_sumofsquares","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"Returns formula use function_f: $$ \\sum_{\\lengths} \\Big( \\frac{N_{tral}}{N_{tr}} - \\frac{\\nu_{tral}}{\\nu_{tr}}  \\Big) ^2 $$ \\(N_{tral}\\) Observation sample size current time/area/age/length combination \\(\\nu_{tral}\\) Model sample size current time/area/age/length combination \\(N_{tr}\\) Total observation sample size current time/area (dimensions set ) \\(\\nu_{tr}\\) Total model sample size current time/area (dimensions set )","code":""},{"path":"/dev/reference/likelihood_distribution.html","id":"g-l-distribution-multinomial","dir":"Reference","previous_headings":"","what":"g3l_distribution_multinomial","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"Returns formula use function_f: $$       2 (         \\sum_{\\lengths} \\log N_{tral}! -         \\log (\\sum_{\\lengths} N_{tral})! -         \\sum_{\\lengths} ( N_{tral} \\log min(\\frac{\\nu_{tral}}{\\sum_{\\lengths} \\nu_{tral}}, \\frac{1}{l \\epsilon}) )       )     $$  \\(N_{tral}\\) Observation sample size current time/area/age/length combination \\(\\nu_{tral}\\) Model sample size current time/area/age/length combination \\(l\\) Number lengthgroups sample \\(\\epsilon\\) epsilon parameter","code":""},{"path":"/dev/reference/likelihood_distribution.html","id":"g-l-distribution-multivariate","dir":"Reference","previous_headings":"","what":"g3l_distribution_multivariate","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"Returns formula use function_f, calls TMB's SCALE(AR1(rho), sigma)(x),     rho sigma parameters, x defined : $$ \\frac{N_{tral}}{N_{tr}} - \\frac{\\nu_{tral}}{\\nu_{tr}} $$ \\(N_{tral}\\) Observation sample size current time/area/age/length combination \\(\\nu_{tral}\\) Model sample size current time/area/age/length combination \\(N_{tr}\\) Total observation sample size current time/area (dimensions set ) \\(\\nu_{tr}\\) Total model sample size current time/area (dimensions set ) information, see Autoregressive processes     TMB book.","code":""},{"path":"/dev/reference/likelihood_distribution.html","id":"g-l-distribution-surveyindices-log","dir":"Reference","previous_headings":"","what":"g3l_distribution_surveyindices_log","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"Returns formula use function_f: $$       \\sum_{\\time} (\\alpha + \\beta \\log N_{tral} - \\log \\nu_{tral})^2     $$ \\(N_{tral}\\) Observation sample size current time/area/age/length combination \\(\\nu_{tral}\\) Model sample size current time/area/age/length combination \\(\\alpha\\) alpha parameter \\(\\beta\\) beta parameter alpha beta provided, linear regression     performed \\(N\\), \\(\\nu\\) time area/age/length combination.     used values stored cdist_nll_name_model__param array     reported model run, whether calculated hard-coded.","code":""},{"path":"/dev/reference/likelihood_distribution.html","id":"g-l-distribution-surveyindices-linear","dir":"Reference","previous_headings":"","what":"g3l_distribution_surveyindices_linear","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"Returns formula use function_f: $$       \\sum_{\\lengths} (\\alpha + \\beta N_{tral} - \\nu_{tral})^2     $$ \\(N_{tral}\\) Observation sample size current time/area/age/length combination \\(\\nu_{tral}\\) Model sample size current time/area/age/length combination \\(\\alpha\\) alpha parameter \\(\\beta\\) beta parameter alpha beta provided, linear regression     performed \\(N\\), \\(\\nu\\) time area/age/length combination.     used values stored cdist_nll_name_model__param array     reported model run, whether calculated hard-coded.","code":""},{"path":"/dev/reference/likelihood_distribution.html","id":"g-l-distribution-sumofsquaredlogratios","dir":"Reference","previous_headings":"","what":"g3l_distribution_sumofsquaredlogratios","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"equivalent gadget2's catchinkilos. Returns formula use function_f: $$       \\sum_{\\lengths} (log(N_{tral} + \\epsilon) - log(\\nu_{tral} + \\epsilon))^2     $$ \\(N_{tral}\\) Observation sample size current time/area/age/length combination \\(\\nu_{tral}\\) Model sample size current time/area/age/length combination \\(\\epsilon\\) epsilon parameter","code":""},{"path":"/dev/reference/likelihood_distribution.html","id":"g-l-abundancedistribution","dir":"Reference","previous_headings":"","what":"g3l_abundancedistribution","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"action (.e. list formula objects) ... stocks, collect catch data modelstock__num modelstock__wgt, depending columns provided obs_data Compare modelstock__num/wgt obsstock__num/wgt, using function_f output function_f summed stock dimensions (age/area) time added nll.","code":""},{"path":"/dev/reference/likelihood_distribution.html","id":"g-l-catchdistribution","dir":"Reference","previous_headings":"","what":"g3l_catchdistribution","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"action (.e. list formula objects) ... fleets stocks combinations, collect catch data modelstock__num modelstock__wgt, depending columns provided obs_data Compare modelstock__num/wgt obsstock__num/wgt, using function_f output function_f summed stock dimensions (age/area) time added nll.","code":""},{"path":"/dev/reference/likelihood_distribution.html","id":"g-distribution-preview","dir":"Reference","previous_headings":"","what":"g3_distribution_preview","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"input obs_data formatted array, applying rules g3l_*distribution .","code":""},{"path":"/dev/reference/likelihood_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 likelihood actions — likelihood_catchdistribution","text":"","code":"ling_imm <- g3_stock('ling_imm', seq(20, 156, 4)) %>% g3s_age(3, 10) ling_mat <- g3_stock('ling_mat', seq(20, 156, 4)) %>% g3s_age(5, 15) lln <- g3_fleet('lln')  # Invent a ldist.lln table for our tests ldist.lln.raw <- data.frame(     year = c(1999, 2000),     age = sample(5:9, 100, replace = TRUE),     length = sample(10:70, 100, replace = TRUE),     number = 1,     stringsAsFactors = FALSE)  # Group length into 10-long bins # NB: The last 2 bins will be empty, but gadget3 will use the factor levels, include them as zero # NB: Generally one would use mfdb::mfdb_sample_count() source and group data for you ldist.lln.raw |> dplyr::group_by(   year = year, age = age,   length = cut(length, breaks = seq(10, 100, by = 10), right = FALSE) ) |> dplyr::summarise(number = sum(number), .groups = 'keep') -> ldist.lln  # Turn age into a factor, indicating all ages we should be interested in ldist.lln$age <- factor(ldist.lln$age, levels = 5:15)  # We can see the results of this being turned into an array: g3_distribution_preview(ldist.lln) #> , , time = 1999 #>  #>         age #> length   5:5 6:6 7:7 8:8 9:9 10:10 11:11 12:12 13:13 14:14 15:15 #>   10:20    1   4   3   2   2    NA    NA    NA    NA    NA    NA #>   20:30    2   2   2   3   1    NA    NA    NA    NA    NA    NA #>   30:40    1   1   2   1   1    NA    NA    NA    NA    NA    NA #>   40:50    2   3  NA   1  NA    NA    NA    NA    NA    NA    NA #>   50:60    2   1  NA   1  NA    NA    NA    NA    NA    NA    NA #>   60:70    1   4   2   2   3    NA    NA    NA    NA    NA    NA #>   70:80   NA  NA  NA  NA  NA    NA    NA    NA    NA    NA    NA #>   80:90   NA  NA  NA  NA  NA    NA    NA    NA    NA    NA    NA #>   90:100  NA  NA  NA  NA  NA    NA    NA    NA    NA    NA    NA #>  #> , , time = 2000 #>  #>         age #> length   5:5 6:6 7:7 8:8 9:9 10:10 11:11 12:12 13:13 14:14 15:15 #>   10:20    1   2   2   1   2    NA    NA    NA    NA    NA    NA #>   20:30    2   1   1  NA   2    NA    NA    NA    NA    NA    NA #>   30:40    2   1   1   1   3    NA    NA    NA    NA    NA    NA #>   40:50    3   1   1  NA   3    NA    NA    NA    NA    NA    NA #>   50:60    1   1   3   2   2    NA    NA    NA    NA    NA    NA #>   60:70    5  NA   1   4   1    NA    NA    NA    NA    NA    NA #>   70:80   NA  NA  NA  NA  NA    NA    NA    NA    NA    NA    NA #>   80:90   NA  NA  NA  NA  NA    NA    NA    NA    NA    NA    NA #>   90:100  NA  NA  NA  NA  NA    NA    NA    NA    NA    NA    NA #>   likelihood_actions <- list(   g3l_catchdistribution(     'ldist_lln',     ldist.lln,     fleets = list(lln),     stocks = list(ling_imm, ling_mat),     g3l_distribution_sumofsquares()))  # Make an (incomplete) model using the action, extract the observation array fn <- suppressWarnings(g3_to_r(likelihood_actions)) environment(fn)$cdist_sumofsquares_ldist_lln_obs__num #> , , time = 1999 #>  #>         age #> length   5:5 6:6 7:7 8:8 9:9 10:10 11:11 12:12 13:13 14:14 15:15 #>   10:20    1   4   3   2   2     0     0     0     0     0     0 #>   20:30    2   2   2   3   1     0     0     0     0     0     0 #>   30:40    1   1   2   1   1     0     0     0     0     0     0 #>   40:50    2   3   0   1   0     0     0     0     0     0     0 #>   50:60    2   1   0   1   0     0     0     0     0     0     0 #>   60:70    1   4   2   2   3     0     0     0     0     0     0 #>   70:80    0   0   0   0   0     0     0     0     0     0     0 #>   80:90    0   0   0   0   0     0     0     0     0     0     0 #>   90:100   0   0   0   0   0     0     0     0     0     0     0 #>  #> , , time = 2000 #>  #>         age #> length   5:5 6:6 7:7 8:8 9:9 10:10 11:11 12:12 13:13 14:14 15:15 #>   10:20    1   2   2   1   2     0     0     0     0     0     0 #>   20:30    2   1   1   0   2     0     0     0     0     0     0 #>   30:40    2   1   1   1   3     0     0     0     0     0     0 #>   40:50    3   1   1   0   3     0     0     0     0     0     0 #>   50:60    1   1   3   2   2     0     0     0     0     0     0 #>   60:70    5   0   1   4   1     0     0     0     0     0     0 #>   70:80    0   0   0   0   0     0     0     0     0     0     0 #>   80:90    0   0   0   0   0     0     0     0     0     0     0 #>   90:100   0   0   0   0   0     0     0     0     0     0     0 #>   # Apply age-reading error matrix to model data more_likelihood_actions <- list(   g3l_catchdistribution(     'ldist_lln_readerror',     ldist.lln,     fleets = list(lln),     stocks = list(ling_imm, ling_mat),     transform_fs = list(age = g3_formula(       g3_param_array('reader1matrix', value = diag(5))[g3_idx(preage), g3_idx(age)]       )),     g3l_distribution_sumofsquares()))  # Apply per-stock age-reading error matrix to model data more_likelihood_actions <- list(   g3l_catchdistribution(     'ldist_lln_readerror',     ldist.lln,     fleets = list(lln),     stocks = list(ling_imm, ling_mat),     transform_fs = list(age = list(       ling_imm = quote( g3_param_array('imm_readermatrix',           value = diag(ling_imm__maxage - ling_imm__minage + 1)           )[ling_imm__preage_idx, ling_imm__age_idx] ),       ling_mat = quote( g3_param_array('mat_readermatrix',           value = diag(ling_mat__maxage - ling_mat__minage + 1)           )[ling_mat__preage_idx, ling_mat__age_idx] ),       unused = 0)),     g3l_distribution_sumofsquares()))  ## Stomach content: predator-prey species preference prey_a <- g3_stock('prey_a', seq(1, 10)) |> g3s_age(1,3) prey_b <- g3_stock('prey_b', seq(1, 10)) |> g3s_age(1,3) pred_a <- g3_stock('pred_a', seq(50, 80, by = 10)) |> g3s_age(0, 10) otherfood <- g3_stock('otherfood', 0)  # Produce data.frame with columns: # * predator_length or predator_age # * stock # * number or weight pred_a_preypref_obs <- expand.grid(     year = 2000:2005,     predator_length = c(50,70),     stock = c('prey_a', 'prey_b', 'otherfood'),     number = 0 )  # Create catchdistribution likelihood component actions <- list(     g3l_catchdistribution(         'pred_a_preypref',         pred_a_preypref_obs,         fleets = list(pred_a),         stocks = list(prey_a, prey_b, otherfood),         g3l_distribution_sumofsquares(),         nll_breakdown = TRUE,         report = TRUE ),     NULL)  ## Stomach content: predator-prey size preference # Produce data.frame with columns: # * predator_length or predator_age # * (prey) length # * number or weight pred_a_sizepref_obs <- expand.grid(     year = 2000:2005,     predator_length = c(50,70),     length = seq(1, 10),     number = 0 )  # Create catchdistribution likelihood component actions <- list(     g3l_catchdistribution(         'pred_a_sizepref',         pred_a_sizepref_obs,         fleets = list(pred_a),         # NB: Only referencing stocks included in observation data         stocks = list(prey_a),         g3l_distribution_sumofsquares(),         # Use transform_fs to apply digestioncoefficients         transform_fs = list(length = list(prey_a = g3_formula(             quote( diag(d0 + d1 * prey_a__midlen^d2) ),             d0 = g3_parameterized('d0', by_stock = TRUE),             d1 = g3_parameterized('d1', by_stock = TRUE),             d2 = g3_parameterized('d2', by_stock = TRUE) ))),         nll_breakdown = TRUE,         report = TRUE ),     NULL)"},{"path":"/dev/reference/likelihood_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 random effects likelihood actions — likelihood_random","title":"Gadget3 random effects likelihood actions — likelihood_random","text":"Add likelihood components random effects","code":""},{"path":"/dev/reference/likelihood_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 random effects likelihood actions — likelihood_random","text":"","code":"g3l_random_dnorm(         nll_name,         param_f,         mean_f = 0,         sigma_f = 1,         log_f = TRUE,         period = 'auto',         nll_breakdown = FALSE,         weight = substitute(             g3_param(n, optimise = FALSE, value = 1),             list(n = paste0(nll_name, \"_weight\"))),         run_at = g3_action_order$likelihood)  g3l_random_walk(         nll_name,         param_f,         sigma_f = 1,         log_f = TRUE,         period = 'auto',         nll_breakdown = FALSE,         weight = substitute(             g3_param(n, optimise = FALSE, value = 1),             list(n = paste0(nll_name, \"_weight\"))),         run_at = g3_action_order$likelihood)"},{"path":"/dev/reference/likelihood_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 random effects likelihood actions — likelihood_random","text":"param_f formula representing value apply dnorm .     Invariably g3_param g3l_random_dnorm,     g3_param_table cur_year g3l_random_walk. mean_f formula representing mean dnorm. sigma_f formula representing sigma dnorm. log_f formula representing log dnorm. period dnorm recalculated. per year every step, single .     default, auto, assume input generated g3_parameterized     derive appropriate option. nll_name Character string, used define variable name dnorm output. nll_breakdown nll report broken time? TRUE / FALSE weight Weighting applied likelihood component. run_at Integer order actions run within model, see g3_action_order.","code":""},{"path":"/dev/reference/likelihood_random.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 random effects likelihood actions — likelihood_random","text":"model report contain nll_random_dnorm_dnorm_lin__dnorm, results applying dnorm.   nll_breakdown TRUE, array one entry per timestep.","code":""},{"path":[]},{"path":"/dev/reference/likelihood_random.html","id":"g-l-random-dnorm","dir":"Reference","previous_headings":"","what":"g3l_random_dnorm","title":"Gadget3 random effects likelihood actions — likelihood_random","text":"action (.e. list formula objects) ... final model step, calculate dnorm(param_f, mean_f, sigma_f) & add nll","code":""},{"path":"/dev/reference/likelihood_random.html","id":"g-l-random-walk","dir":"Reference","previous_headings":"","what":"g3l_random_walk","title":"Gadget3 random effects likelihood actions — likelihood_random","text":"action (.e. list formula objects) ... Calculate dnorm(param_f, previous param_f, sigma_f) (final year period = year) Add nll.","code":""},{"path":"/dev/reference/likelihood_random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 random effects likelihood actions — likelihood_random","text":"","code":"likelihood_actions <- list(     # Calculate dnorm() for the dnorm_log parameter     g3l_random_dnorm('dnorm_log',         g3_parameterized('dnorm_log', value = 0, random = TRUE),         mean_f = 0),      # Treat the walk_year.xxxx parameters as a random walk     g3l_random_walk('walk_year',         g3_parameterized('walk_year', by_year = TRUE, value = 0, random = TRUE)) )"},{"path":"/dev/reference/likelihood_tagging_ckmr.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 CKMR likelihood — likelihood_tagging_ckmr","title":"Gadget3 CKMR likelihood — likelihood_tagging_ckmr","text":"*Experimental* CKMR tagging likelihood","code":""},{"path":"/dev/reference/likelihood_tagging_ckmr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 CKMR likelihood — likelihood_tagging_ckmr","text":"","code":"g3l_tagging_ckmr(         nll_name,         obs_data,         fleets,         parent_stocks,         offspring_stocks,         weight = substitute(             g3_param(n, optimise = FALSE, value = 1),             list(n = paste0(nll_name, \"_weight\"))),         run_at = g3_action_order$likelihood)"},{"path":"/dev/reference/likelihood_tagging_ckmr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 CKMR likelihood — likelihood_tagging_ckmr","text":"nll_name Character string, used define variable name obsstock modelstock. obs_data Data.frame observed mother-offspring pairs columns year / parent_age / offspring_age / mo_pairs fleets list g3_stock objects collect catch data . parent_stocks list g3_stock objects parents g3a_spawn action offspring_stocks list g3_stock objects output_stocks g3a_spawn action weight Weighting applied likelihood component. Default g3_param     defaults 1, allowing weights altered without recompiling. run_at Integer order actions run within model, see g3_action_order.","code":""},{"path":"/dev/reference/likelihood_tagging_ckmr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 CKMR likelihood — likelihood_tagging_ckmr","text":"Implementation CKMR based Bravington, M.V., Skaug, H.J., & Anderson, E.C. (2016). Close-Kin Mark-Recapture. Statistical Science, 31, 259-274. one kinship probability implemented, mother-offspring lethal   sampling, .e. (3.2) paper. used pseudo-likelihood   per (4.1).","code":""},{"path":"/dev/reference/likelihood_tagging_ckmr.html","id":"obs-data","dir":"Reference","previous_headings":"","what":"obs_data","title":"Gadget3 CKMR likelihood — likelihood_tagging_ckmr","text":"obs_data data.frame provides observed pairs. Unlike likelihood     mehthods, fixed structure:  year Year observation data point. parent_age Age parent observed parent-offspring pair. offspring_age Age offspring observed parent-offspring pair. mo_pairs Number pairs observed ages.","code":""},{"path":[]},{"path":[]},{"path":"/dev/reference/likelihood_tagging_ckmr.html","id":"g-l-tagging-ckmr","dir":"Reference","previous_headings":"","what":"g3l_tagging_ckmr","title":"Gadget3 CKMR likelihood — likelihood_tagging_ckmr","text":"action (.e. list formula objects) ... parent_stocks offspring_stocks, collect spawing rate     modelhist__spawning modelhist__spawned, total number parents total number spawned offspring respectively fleets, collect catch data modelhist__catch observed pairs year, include probability event happening nll","code":""},{"path":"/dev/reference/likelihood_understocking.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 likelihood understocking action — likelihood_understocking","title":"Gadget3 likelihood understocking action — likelihood_understocking","text":"Add rates understocking g3 model nll","code":""},{"path":"/dev/reference/likelihood_understocking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 likelihood understocking action — likelihood_understocking","text":"","code":"g3l_understocking(         prey_stocks,         power_f = ~2,         nll_breakdown = FALSE,         weight = 1e+08,         run_at = g3_action_order$likelihood)"},{"path":"/dev/reference/likelihood_understocking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 likelihood understocking action — likelihood_understocking","text":"prey_stocks list g3_stock objects collect catch data power_f formula representing power coefficient \\(p\\) use. nll_breakdown nll report broken time? TRUE / FALSE weight Weighting applied likelihood component. run_at Integer order actions run within model, see g3_action_order.","code":""},{"path":"/dev/reference/likelihood_understocking.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 likelihood understocking action — likelihood_understocking","text":"model report contain nll_understocking__wgt, results formula .   nll_breakdown TRUE, array one entry per timestep.","code":""},{"path":[]},{"path":"/dev/reference/likelihood_understocking.html","id":"g-l-distribution-understocking","dir":"Reference","previous_headings":"","what":"g3l_distribution_understocking","title":"Gadget3 likelihood understocking action — likelihood_understocking","text":"action (.e. list formula objects) ... Sum total biomass adjustment due overstocking prey according formula     $$ \\ell = \\sum_{\\time}\\sum_{\\areas} \\Big(\\sum_{\\prey\\_stocks} U_{trs} \\Big)^p $$    \\( p \\) power coefficient power_f,     \\( U_{trs} \\) total biomass adjustment predator consumtion due overconsumtion.","code":""},{"path":"/dev/reference/likelihood_understocking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 likelihood understocking action — likelihood_understocking","text":"","code":"ling_imm <- g3_stock('ling_imm', seq(20, 156, 4)) %>% g3s_age(3, 10) ling_mat <- g3_stock('ling_mat', seq(20, 156, 4)) %>% g3s_age(5, 15) lln <- g3_fleet('lln')  likelihood_actions <- list(   g3l_understocking(list(ling_imm, ling_mat)))"},{"path":"/dev/reference/params.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 parameter helpers — params","title":"Gadget3 parameter helpers — params","text":"Shortcuts parameterise model g3_param","code":""},{"path":"/dev/reference/params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 parameter helpers — params","text":"","code":"g3_parameterized(         name,         by_stock = FALSE,         by_predator = FALSE,         by_year = FALSE,         by_step = FALSE,         by_age = FALSE,         by_area = FALSE,         exponentiate = FALSE,         avoid_zero = FALSE,         scale = 1,         offset = 0,         ...)"},{"path":"/dev/reference/params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 parameter helpers — params","text":"name Suffix parameter name. by_stock individual parameters per-stock? FALSE TRUE Produce \"stock_name.name\" parameter character vector Select stock name_part(s) use, e.g. produce \"stock_species.name\" parameter \"species\" List g3_stock objects Produce parameter applies given stocks  by_predator individual parameters per-predator (read: per-fleet) stock? FALSE TRUE Produce \"fleet_stock_name.name\" parameter character vector Select stock name_part(s) use, e.g. produce \"fleet_country.name\" parameter \"country\" List g3_stock objects Produce parameter applies given stocks  by_year individual parameters per model year? FALSE TRUE Produce \"name.1998\" parameter year model runs 1998:2099 Override year range, projecting sufficient parameters available.  by_step individual parameters per step within years? FALSE TRUE Produce \"name.1\" seasonal parameter step, \"name.1998.1\" every timestep model combined by_year.  by_age individual parameters per stock age? FALSE TRUE Produce \"name.4\" parameter age stock(s) by_stock  by_area individual parameters per stock area? FALSE TRUE Produce \"name.area\" parameter area stock(s) by_stock  exponentiate Use exp(value) instead raw parameter value. add \"_exp\" parameter name. avoid_zero TRUE, wrap parameter avoid_zero scale Use scale * value instead raw parameter value.     Either numeric constant character.     character, add another parameter scale, using by_stock value. offset Use value + offset instead raw parameter value     Either numeric constant character.     character, add another parameter offset, using by_stock value. ... Additional parameters passed g3_param, e.g. optimise, random, ...","code":""},{"path":"/dev/reference/params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 parameter helpers — params","text":"function provides shortcuts common formulas used parameterising model.","code":""},{"path":"/dev/reference/params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gadget3 parameter helpers — params","text":"formula object defining given parameters","code":""},{"path":[]},{"path":"/dev/reference/params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 parameter helpers — params","text":"","code":"stock_imm <- g3_stock(c(species = 'stock', 'imm'), seq(10, 35, 5)) %>% g3s_age(1, 4) stock_mat <- g3_stock(c(species = 'stock', 'mat'), seq(10, 35, 5)) %>% g3s_age(3, 6)  # Helper function that shows the parameter template for the given parameter param_template_for <- function (g3_param) {   model_code <- g3_to_tmb(list(       # g3a_naturalmortality() isn't important, it is a place to add our parameter       g3a_naturalmortality(stock_imm, g3_param),       # We also need stock_mat in the model at least once       g3a_naturalmortality(stock_mat, 0),        # Set a year range to use for parameters where relevant       g3a_time(1990, 1994) ))    # Extract template, throw away default parameters from g3a_time()   params <- attr(model_code, \"parameter_template\")   params <- params[!(rownames(params) %in% c('retro_years', 'project_years')),]   return(params) }  # Not 'by' anything, so we add a single parameter value param_template_for( g3_parameterized('K') ) #>   switch type value optimise random lower upper parscale #> K      K          0     TRUE  FALSE    NA    NA       NA  # Can set defaults for the parameter template when defining a parameter param_template_for( g3_parameterized('K', value = 5, lower = 2,     upper = 8, optimise = FALSE) ) #>   switch type value optimise random lower upper parscale #> K      K          5    FALSE  FALSE     2     8       NA  # by_stock, so the parameters will have the stock name prepended param_template_for( g3_parameterized('K', by_stock = TRUE) ) #>                  switch type value optimise random lower upper parscale #> stock_imm.K stock_imm.K          0     TRUE  FALSE    NA    NA       NA  # Similarly, we can prepend year & age param_template_for( g3_parameterized('K', by_stock = TRUE, by_year = TRUE, by_age = TRUE) ) #>                                switch type value optimise random lower upper #> stock_imm.K.1990.1 stock_imm.K.1990.1          0     TRUE  FALSE    NA    NA #> stock_imm.K.1991.1 stock_imm.K.1991.1          0     TRUE  FALSE    NA    NA #> stock_imm.K.1992.1 stock_imm.K.1992.1          0     TRUE  FALSE    NA    NA #> stock_imm.K.1993.1 stock_imm.K.1993.1          0     TRUE  FALSE    NA    NA #> stock_imm.K.1994.1 stock_imm.K.1994.1          0     TRUE  FALSE    NA    NA #> stock_imm.K.1990.2 stock_imm.K.1990.2          0     TRUE  FALSE    NA    NA #> stock_imm.K.1991.2 stock_imm.K.1991.2          0     TRUE  FALSE    NA    NA #> stock_imm.K.1992.2 stock_imm.K.1992.2          0     TRUE  FALSE    NA    NA #> stock_imm.K.1993.2 stock_imm.K.1993.2          0     TRUE  FALSE    NA    NA #> stock_imm.K.1994.2 stock_imm.K.1994.2          0     TRUE  FALSE    NA    NA #> stock_imm.K.1990.3 stock_imm.K.1990.3          0     TRUE  FALSE    NA    NA #> stock_imm.K.1991.3 stock_imm.K.1991.3          0     TRUE  FALSE    NA    NA #> stock_imm.K.1992.3 stock_imm.K.1992.3          0     TRUE  FALSE    NA    NA #> stock_imm.K.1993.3 stock_imm.K.1993.3          0     TRUE  FALSE    NA    NA #> stock_imm.K.1994.3 stock_imm.K.1994.3          0     TRUE  FALSE    NA    NA #> stock_imm.K.1990.4 stock_imm.K.1990.4          0     TRUE  FALSE    NA    NA #> stock_imm.K.1991.4 stock_imm.K.1991.4          0     TRUE  FALSE    NA    NA #> stock_imm.K.1992.4 stock_imm.K.1992.4          0     TRUE  FALSE    NA    NA #> stock_imm.K.1993.4 stock_imm.K.1993.4          0     TRUE  FALSE    NA    NA #> stock_imm.K.1994.4 stock_imm.K.1994.4          0     TRUE  FALSE    NA    NA #>                    parscale #> stock_imm.K.1990.1       NA #> stock_imm.K.1991.1       NA #> stock_imm.K.1992.1       NA #> stock_imm.K.1993.1       NA #> stock_imm.K.1994.1       NA #> stock_imm.K.1990.2       NA #> stock_imm.K.1991.2       NA #> stock_imm.K.1992.2       NA #> stock_imm.K.1993.2       NA #> stock_imm.K.1994.2       NA #> stock_imm.K.1990.3       NA #> stock_imm.K.1991.3       NA #> stock_imm.K.1992.3       NA #> stock_imm.K.1993.3       NA #> stock_imm.K.1994.3       NA #> stock_imm.K.1990.4       NA #> stock_imm.K.1991.4       NA #> stock_imm.K.1992.4       NA #> stock_imm.K.1993.4       NA #> stock_imm.K.1994.4       NA  # You can specify the name part to use, # e.g. if a parameter should be shared between mature and immature: param_template_for( g3_parameterized('K', by_stock = 'species', by_year = TRUE) ) #>                    switch type value optimise random lower upper parscale #> stock.K.1990 stock.K.1990          0     TRUE  FALSE    NA    NA       NA #> stock.K.1991 stock.K.1991          0     TRUE  FALSE    NA    NA       NA #> stock.K.1992 stock.K.1992          0     TRUE  FALSE    NA    NA       NA #> stock.K.1993 stock.K.1993          0     TRUE  FALSE    NA    NA       NA #> stock.K.1994 stock.K.1994          0     TRUE  FALSE    NA    NA       NA  # Can give a list of stocks, in which case it works out name parts for you param_template_for( g3_parameterized('K', by_stock = list(stock_imm, stock_mat)) ) #>          switch type value optimise random lower upper parscale #> stock.K stock.K          0     TRUE  FALSE    NA    NA       NA param_template_for( g3_parameterized('K', by_stock = list(stock_imm, stock_mat), by_age = TRUE) ) #>              switch type value optimise random lower upper parscale #> stock.K.1 stock.K.1          0     TRUE  FALSE    NA    NA       NA #> stock.K.2 stock.K.2          0     TRUE  FALSE    NA    NA       NA #> stock.K.3 stock.K.3          0     TRUE  FALSE    NA    NA       NA #> stock.K.4 stock.K.4          0     TRUE  FALSE    NA    NA       NA #> stock.K.5 stock.K.5          0     TRUE  FALSE    NA    NA       NA #> stock.K.6 stock.K.6          0     TRUE  FALSE    NA    NA       NA  # You can set fixed scale/offset for the parameter g3_parameterized('K', scale = 5, offset = 9) #> g3_param(\"K\") * 5 + 9  # ...or give names and they will also be parameters, sharing the by_stock setting param_template_for( g3_parameterized('K', by_stock = TRUE, scale = \"sc\", offset = \"offs\") ) #>                        switch type value optimise random lower upper parscale #> stock_imm.K       stock_imm.K          0     TRUE  FALSE    NA    NA       NA #> stock_imm.sc     stock_imm.sc          0     TRUE  FALSE    NA    NA       NA #> stock_imm.offs stock_imm.offs          0     TRUE  FALSE    NA    NA       NA"},{"path":"/dev/reference/run_desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 actions into R code — run_desc","title":"Gadget3 actions into R code — run_desc","text":"Convert g3 actions character vector describing model","code":""},{"path":"/dev/reference/run_desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 actions into R code — run_desc","text":"","code":"g3_to_desc(actions, minor_steps = FALSE)"},{"path":"/dev/reference/run_desc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 actions into R code — run_desc","text":"actions list actions (.e. list formula objects), produced g3a_* functions. minor_steps Include minor steps (e.g. zeroing cumulative arrays)?  TRUE / FALSE","code":""},{"path":"/dev/reference/run_desc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gadget3 actions into R code — run_desc","text":"Character vector describing step model. action model may generated   multiple steps (e.g. select prey stock, scale total amount, apply overstocking),   line .","code":""},{"path":"/dev/reference/run_desc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 actions into R code — run_desc","text":"","code":"ling_imm <- g3_stock('ling_imm', seq(20, 156, 4)) %>% g3s_age(3, 10)  initialconditions_action <- g3a_initialconditions_normalparam(     ling_imm,     by_age = TRUE)  # Timekeeping action time_action <- g3a_time(     start_year = 2000,     end_year = 2004,     c(3, 3, 3, 3))  # Generate a list outlining the steps the model uses as.list(g3_to_desc(list(initialconditions_action, time_action))) #> $`-01` #> [1] \"g3a_time: Start of time period\" #>  #> $`-01:ling_imm            :97928d52b59b41dcb35a` #> [1] \"g3a_initialconditions for ling_imm\" #>"},{"path":"/dev/reference/run_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 actions into R code — run_r","title":"Gadget3 actions into R code — run_r","text":"Convert g3 actions R function can executed","code":""},{"path":"/dev/reference/run_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 actions into R code — run_r","text":"","code":"g3_to_r(         actions,         work_dir = getOption('gadget3.r.work_dir', default = tempdir()),         trace = FALSE,         strict = FALSE,         cmp_options = list(optimize = 3) )  # S3 method for class 'g3_r' print(x, ..., with_environment = FALSE, with_template = FALSE)"},{"path":"/dev/reference/run_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 actions into R code — run_r","text":"actions list actions (.e. list formula objects), produced g3a_* functions. work_dir write temporary R script containing function cmp_options options pass compiler::cmpfun().     NULL, run model byte-code compiler trace TRUE, turn comments print statements. strict TRUE, enable extra sanity checking actions. invalid conditions     (e.g. /less fish growth) result warning. x g3_to_r-generated function print with_environment TRUE, list data stored function environment printing with_template TRUE, show parameter template printing ... arguments","code":""},{"path":"/dev/reference/run_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gadget3 actions into R code — run_r","text":"function takes params variable, defines g3_params required model.   following attributes set: actions original actions list given function parameter_template list parameters expected model, fill Use e.g. attr(fn, 'parameter_template') retrieve . Invariant model data stored closure, .e. environment(fn).   can fetched environment(fn)$cdist_sumofsquares_ldist_gil_obs__num. function return nll produced model.   can also use attributes(nll) get report variables model.","code":""},{"path":"/dev/reference/run_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 actions into R code — run_r","text":"","code":"ling_imm <- g3_stock(c(species = 'ling', 'imm'), seq(20, 156, 4)) %>% g3s_age(3, 10)  initialconditions_action <- g3a_initialconditions_normalparam(     ling_imm,     factor_f = g3a_renewal_initabund(by_stock_f = 'species'),     by_stock = 'species',     by_age = TRUE)  # Timekeeping action time_action <- g3a_time(     start_year = 2000,     end_year = 2004,     c(3, 3, 3, 3))  # Generate a model from the above 2 actions # NB: Obviously in reality we'd need more actions fn <- g3_to_r(list(initialconditions_action, time_action))  if (interactive()) {   # Edit the resulting function   fn <- edit(fn) }  param <- attr(fn, 'parameter_template') param$project_years <- 0 param$ling.init.F <- 0.4 param$ling.Linf <- 160 param$ling.K <- 90 param$ling.recl <- 12 param$recage <- g3_stock_def(ling_imm, 'minage') param[grepl('^ling.init.sd.', names(param))] <- 50.527220 param[grepl('^ling_imm.init.\\\\d+', names(param))] <- 1 param$ling_imm.init.scalar <- 200 param$ling_imm.walpha <- 2.27567436711055e-06 param$ling_imm.wbeta <- 3.20200445996187 param$ling_imm.M <- 0.15  # Run the model with the provided parameters nll <- fn(param)  # Get the report from the last model run report <- attributes(nll)  # Fetch a value from the model data environment(fn)$ling_imm__midlen #>   20:24   24:28   28:32   32:36   36:40   40:44   44:48   48:52   52:56   56:60  #>      22      26      30      34      38      42      46      50      54      58  #>   60:64   64:68   68:72   72:76   76:80   80:84   84:88   88:92   92:96  96:100  #>      62      66      70      74      78      82      86      90      94      98  #> 100:104 104:108 108:112 112:116 116:120 120:124 124:128 128:132 132:136 136:140  #>     102     106     110     114     118     122     126     130     134     138  #> 140:144 144:148 148:152 152:156 156:Inf  #>     142     146     150     154     158"},{"path":"/dev/reference/run_tmb.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 actions into TMB code — run_tmb","title":"Gadget3 actions into TMB code — run_tmb","text":"Turn g3 actions CPP code can compiled using TMB","code":""},{"path":"/dev/reference/run_tmb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 actions into TMB code — run_tmb","text":"","code":"g3_to_tmb(actions, trace = FALSE, strict = FALSE)  g3_tmb_adfun(         cpp_code,         parameters = attr(cpp_code, 'parameter_template'),         compile_flags = getOption('gadget3.tmb.compile_flags', default = if (.Platform$OS.type == \"windows\") c(\"-O1\", \"-march=native\")             else c(\"-O3\", \"-flto=auto\", \"-march=native\") ),         work_dir = getOption('gadget3.tmb.work_dir', default = tempdir()),         output_script = FALSE,         compile_args = list(             framework = getOption(\"gadget3.tmb.framework\", default = \"TMBad\") ),         ...)  g3_tmb_par(parameters, include_random = TRUE)  g3_tmb_lower(parameters)  g3_tmb_upper(parameters)  g3_tmb_parscale(parameters)  g3_tmb_relist(parameters, par)"},{"path":"/dev/reference/run_tmb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 actions into TMB code — run_tmb","text":"actions list actions (.e. list formula objects), produced g3a_* functions. trace TRUE, turn comments print statements. strict TRUE, enable extra sanity checking actions. invalid conditions     (e.g. /less fish growth) result warning. cpp_code cpp_code produced g3_to_tmb. parameters Parameter table produced attr(g3_to_tmb(...), 'parameter_template'),     modified provide initial conditions, etc. par Parameter vector, produced one nlminb(...)$par obj.fun$env$last.par g3_tmb_par() first include random parameters default, others . include_random random parameters assumed part par? TRUE     using obj.fun$fn, obj.fun$report directly, e.g.     obj.fun$fn(g3_tmb_par(param_tbl)). cases, FALSE. compile_flags List extra flags compile , use e.g. \"-g\" enable debugging output.     Can set option, e.g. options(gadget3.tmb.compile_flags = c('-O0', '-g')) compile_args arguments pass TMB::compile work_dir Directory write compile .cpp files . Defaults R's current temporary directory     Set preserve compiled output re-use R sessions possible.     Can set option, e.g. options(gadget3.tmb.work_dir = fs::path_abs('tmb-workdir')) output_script TRUE, create temporary R script runs MakeADFun, return location.     can directly used gdbsource callr::rscript. ... options handed directly MakeADFun","code":""},{"path":[]},{"path":"/dev/reference/run_tmb.html","id":"g-tmb-adfun","dir":"Reference","previous_headings":"","what":"g3_tmb_adfun","title":"Gadget3 actions into TMB code — run_tmb","text":"g3_tmb_adfun compile MakeADFun     steps making model. code identical already-loaded model     recompiled, repeated calls g3_tmb_adfun change parameters fast. MakeADFun crashing R session, can use output_script run     separate R session. Use gdbsource debug model.","code":""},{"path":[]},{"path":"/dev/reference/run_tmb.html","id":"g-to-tmb","dir":"Reference","previous_headings":"","what":"g3_to_tmb","title":"Gadget3 actions into TMB code — run_tmb","text":"string C++ code can used input g3_tmb_adfun, following attributes: actions original actions list given function model_data environment containing data attached model parameter_template data.frame filled used parameters g3_tmb_* functions Use e.g. attr(cpp_code, 'parameter_template') retrieve .","code":""},{"path":"/dev/reference/run_tmb.html","id":"g-tmb-adfun-1","dir":"Reference","previous_headings":"","what":"g3_tmb_adfun","title":"Gadget3 actions into TMB code — run_tmb","text":"ADFun produced TMB's MakeADFun, location temporary script output_script TRUE","code":""},{"path":"/dev/reference/run_tmb.html","id":"g-tmb-par","dir":"Reference","previous_headings":"","what":"g3_tmb_par","title":"Gadget3 actions into TMB code — run_tmb","text":"Values extracted parameters table converted vector values obj$fn(par) nlminb","code":""},{"path":"/dev/reference/run_tmb.html","id":"g-tmb-lower","dir":"Reference","previous_headings":"","what":"g3_tmb_lower","title":"Gadget3 actions into TMB code — run_tmb","text":"Lower bounds extracted parameters table converted vector values nlminb. Random parameters always excluded","code":""},{"path":"/dev/reference/run_tmb.html","id":"g-tmb-upper","dir":"Reference","previous_headings":"","what":"g3_tmb_upper","title":"Gadget3 actions into TMB code — run_tmb","text":"Lower bounds extracted parameters table converted vector values nlminb. Random parameters always excluded","code":""},{"path":"/dev/reference/run_tmb.html","id":"g-tmb-parscale","dir":"Reference","previous_headings":"","what":"g3_tmb_parscale","title":"Gadget3 actions into TMB code — run_tmb","text":"Parscale extracted parameters table, converted vector values nlminb. Random parameters always excluded","code":""},{"path":"/dev/reference/run_tmb.html","id":"g-tmb-relist","dir":"Reference","previous_headings":"","what":"g3_tmb_relist","title":"Gadget3 actions into TMB code — run_tmb","text":"parameters table value column, optimised     values replaced contents par vector.     .e. inverse operation g3_tmb_par.     par can either include discount random variables.","code":""},{"path":[]},{"path":"/dev/reference/step.html","id":null,"dir":"Reference","previous_headings":"","what":"G3 stock_* transformation functions — step","title":"G3 stock_* transformation functions — step","text":"Additional meta-functions help manage writing stock-handling actions.","code":""},{"path":"/dev/reference/step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"G3 stock_* transformation functions — step","text":"","code":"g3_step(step_f, recursing = FALSE, orig_env = environment(step_f))"},{"path":"/dev/reference/step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"G3 stock_* transformation functions — step","text":"step_f Input formula containing references functions recursing use default value orig_env use default value","code":""},{"path":"/dev/reference/step.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"G3 stock_* transformation functions — step","text":"action producing functions run output g3_step.   means functions described available gadget3   code. handle translation stock instance naming, code can refer e.g.   stock__num without translate naming final stock name,   iterating stock dimensions.","code":""},{"path":"/dev/reference/step.html","id":"debug-label","dir":"Reference","previous_headings":"","what":"debug_label","title":"G3 stock_* transformation functions — step","text":"Add comment code act label step, producing   outline model. one debug_label   call step. Models compiled trace = TRUE print resultant string stdout.","code":""},{"path":"/dev/reference/step.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"G3 stock_* transformation functions — step","text":"number character strings, g3_stock variables. latter     replaced final name.","code":""},{"path":"/dev/reference/step.html","id":"debug-trace","dir":"Reference","previous_headings":"","what":"debug_trace","title":"G3 stock_* transformation functions — step","text":"Identical debug_label, considered \"label\", just code   comment, number calls can added.","code":""},{"path":"/dev/reference/step.html","id":"stock-assert","dir":"Reference","previous_headings":"","what":"stock_assert","title":"G3 stock_* transformation functions — step","text":"stock_assert(expression, message, message/stock-var, ...) Assert expression true, abort message.","code":""},{"path":"/dev/reference/step.html","id":"stock-reshape","dir":"Reference","previous_headings":"","what":"stock_reshape","title":"G3 stock_* transformation functions — step","text":"stock_reshape(dest_stock, expression) Output expression length structure reshaped match   dest_stock. source stock considered first one   found expression achieved depends difference. source   destination match -op. Otherwise transformation   matrix generated included model.","code":""},{"path":"/dev/reference/step.html","id":"stock-ss","dir":"Reference","previous_headings":"","what":"stock_ss","title":"G3 stock_* transformation functions — step","text":"stock_ss(stock_var, [ dimname = override, dimname = override, ... ][, vec = (dimname|full|single) ]) Subsets stock_var current iteration stock_iterate(). vec parameter decides start value dimensions   full, dimensions set.   set dimname, dimensions dimension set (.e. dimname-vector returned)   single, dimensions set (.e. single value wil returned).   default length length dimension present (.e. length vector returned), otherwise single. dimnames supplied, code supplied override .   code can include default, substituted default subset,   missing represent empty position subset.   dimname present stock_var, ignored.","code":""},{"path":"/dev/reference/step.html","id":"stock-ssinv","dir":"Reference","previous_headings":"","what":"stock_ssinv","title":"G3 stock_* transformation functions — step","text":"stock_ssinv(stock_var, [ dimname, dimname, ... ]) like stock_ss(), subset mentioned dimnames.","code":""},{"path":"/dev/reference/step.html","id":"stock-switch","dir":"Reference","previous_headings":"","what":"stock_switch","title":"G3 stock_* transformation functions — step","text":"stock_switch(stock, stock_name1 = expr, stock_name2 = expr, ... [ default ]) Switch based name stock, returning relevant expr   default. default supplied, unknown stock error. expr implicitly wrapped stock_with(stock, ...),   references stock variable work. default provided,   identical calling stock_with.","code":""},{"path":"/dev/reference/step.html","id":"stock-with","dir":"Reference","previous_headings":"","what":"stock_with","title":"G3 stock_* transformation functions — step","text":"stock_with(stock, expr) Replaced expr stock variables stock renamed   final name. generally needed iterating   stock, e.g. zeroing summing whole thing.","code":""},{"path":"/dev/reference/step.html","id":"stock-iterate","dir":"Reference","previous_headings":"","what":"stock_iterate","title":"G3 stock_* transformation functions — step","text":"stock_iterate(stock, expr) Wrap expr code iterate vector dimensions   stock, accessed using stock_ss(stock). dimensions iterated decided based call   stock_ss(stock). default, stock_ss leaves length blank   iterate length vector dimension. can iterate value individually following:   stock_iterate(stock, stock_ss(stock, length = default) ) Current values dimension available variables,   e.g. area, age, can used formulae.","code":""},{"path":"/dev/reference/step.html","id":"stock-intersect","dir":"Reference","previous_headings":"","what":"stock_intersect","title":"G3 stock_* transformation functions — step","text":"stock_intersect(stock, expr) Wrap expr code intersect dimensions   dimensions outer stock_iterate().","code":""},{"path":"/dev/reference/step.html","id":"stock-interact","dir":"Reference","previous_headings":"","what":"stock_interact","title":"G3 stock_* transformation functions — step","text":"stock_interact(stock, expr, prefix = prefix) Wrap expr code interact dimensions outer   stock_iterate(). Interact means intersect area, try   combinatoral explosion dimensions, .e. make   sense 2 stocks interact predator-prey relationship. Additional variables prefixed prefix.","code":""},{"path":"/dev/reference/step.html","id":"stock-prepend","dir":"Reference","previous_headings":"","what":"stock_prepend","title":"G3 stock_* transformation functions — step","text":"stock_prepend(stock, param_call, name_part = NULL) Converts g3_param g3_param_table call, prefixing   parameter name stock name, renaming references stock variables.   name_part given, add given part(s) stock name. Returns param_call additions made.","code":""},{"path":[]},{"path":"/dev/reference/step.html","id":"g-step","dir":"Reference","previous_headings":"","what":"g3_step","title":"G3 stock_* transformation functions — step","text":"formula object references functions replaced.","code":""},{"path":"/dev/reference/step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"G3 stock_* transformation functions — step","text":"","code":"### debug_label stock <- g3_stock('halibut', 1:10) %>% g3s_age(1,10) prey_stock <- g3_stock('herring', 1:3) %>% g3s_age(1,3) g3_step(~debug_trace(\"Zero \", stock, \"-\", prey_stock, \" biomass-consuming counter\")) #> ~debug_trace(\"Zero halibut-herring biomass-consuming counter\") #> <environment: 0x563790b79700>  ### stock_assert stock <- g3_stock('halibut', 1:10) %>% g3s_age(1,10) g3_step(~stock_assert(stock_with(stock, all(is.finite(stock__num))), stock, \"__num became NaN/Inf\")) #> ~assert_msg(~all(is.finite(halibut__num)), \"halibut__num became NaN/Inf\") #> <environment: 0x563790b79700>  ### stock_reshape s <- g3_stock('s', seq(3, 21, 3)) s__num <- g3_stock_instance(s, 100) agg <- g3_stock('agg', c(3, 10, 21), open_ended = FALSE) g3_eval(~stock_iterate(s, stock_reshape(agg, stock_ss(s__num)))) #> [1] 233.3333 366.6667  ### stock_ss stock <- g3_stock('halibut', 1:10) %>% g3s_age(1,10) %>% g3s_livesonareas(1) stock__num <- g3_stock_instance(stock) g3_step(~stock_iterate(stock, { x <- x + stock_ss(stock__num) })) #> ~g3_with(`:=`(area, halibut__area), `:=`(halibut__area_idx, g3_idx(1L)),  #>     for (age in seq(halibut__minage, halibut__maxage, by = 1)) g3_with(`:=`(halibut__age_idx,  #>         g3_idx(age - halibut__minage + 1L)), x <- x + halibut__num[,  #>         halibut__age_idx, halibut__area_idx])) #> <environment: 0x563790b79700> g3_step(~stock_ss(stock__num, area = 5)) #> ~stock__num[, stock__age_idx, 5] #> <environment: 0x563790b79700> # Lengthgroups for age_idx + 1 g3_step(~stock_ss(stock__num, age = default + 1)) #> ~stock__num[, stock__age_idx + 1, stock__area_idx] #> <environment: 0x563790b79700> # Vector for the entirety of the \"next\" area g3_step(~stock_ss(stock__num, area = default + 1, vec = area)) #> ~stock__num[, , stock__area_idx + 1] #> <environment: 0x563790b79700> g3_step(~stock_ss(stock__num, area = , age = j)) #> ~stock__num[, j, ] #> <environment: 0x563790b79700>  ### stock_ssinv stock <- g3_stock('halibut', 1:10) %>% g3s_age(1,10) %>% g3s_livesonareas(1) g3_step(~g3_step(~stock_ssinv(stock, 'age'))) #> ~g3_step(~stock[, stock__age_idx, ]) #> <environment: 0x563790b79700> g3_step(~g3_step(~stock_ssinv(stock, 'area'))) #> ~g3_step(~stock[, , stock__area_idx]) #> <environment: 0x563790b79700>  ### stock_switch stock <- g3_stock('halibut', 1:10) ; fleet_stock <- g3_fleet('igfs') g3_step(~stock_switch(stock, halibut = 2, herring = 3, -1)) #> ~2 #> <environment: 0x563790b79700> g3_step(~stock_switch(fleet_stock, halibut = 2, herring = 3, -1)) #> ~(-1) #> <environment: 0x563790b79700> g3_step(~stock_switch(stock, halibut = stock__midlen, -1)) #> ~halibut__midlen #> <environment: 0x563790b79700>  ### stock_with stock <- g3_stock('halibut', 1:10) g3_step(~stock_with(stock, sum(stock__num))) #> ~sum(halibut__num) #> <environment: 0x563790b79700>  ### stock_iterate stock <- g3_stock('halibut', 1:10) %>% g3s_age(1,10) g3_step(~stock_iterate(stock, x <- x + stock_ss(stock__num))) #> ~for (age in seq(halibut__minage, halibut__maxage, by = 1)) g3_with(`:=`(halibut__age_idx,  #>     g3_idx(age - halibut__minage + 1L)), x <- x + halibut__num[,  #>     halibut__age_idx]) #> <environment: 0x563790b79700>  ### stock_intersect stock <- g3_stock('halibut', 1:10) %>% g3s_age(1,10) prey_stock <- g3_stock('herring', 1:3) %>% g3s_age(1,3) g3_step(~stock_iterate(stock, stock_intersect(prey_stock, {   x <- x + stock_ss(stock__num) + stock_ss(prey_stock__num) }))) #> ~for (age in seq(halibut__minage, halibut__maxage, by = 1)) if (age >=  #>     herring__minage && age <= herring__maxage) g3_with(`:=`(halibut__age_idx,  #>     g3_idx(age - halibut__minage + 1L)), `:=`(herring__age_idx,  #>     g3_idx(age - herring__minage + 1L)), x <- x + halibut__num[,  #>     halibut__age_idx] + herring__num[, herring__age_idx]) #> <environment: 0x563790b79700>  ### stock_interact stock <- g3_stock('halibut', 1:10) %>% g3s_age(1,10) prey_stock <- g3_stock('herring', 1:3) %>% g3s_age(1,3) g3_step(~stock_iterate(stock, stock_interact(prey_stock, {   x <- x + stock_ss(stock__num) + stock_ss(prey_stock__num) }, prefix = \"prey\" ))) #> ~for (age in seq(halibut__minage, halibut__maxage, by = 1)) g3_with(`:=`(halibut__age_idx,  #>     g3_idx(age - halibut__minage + 1L)), for (prey_age in seq(herring__minage,  #>     herring__maxage, by = 1)) g3_with(`:=`(herring__age_idx,  #>     g3_idx(prey_age - herring__minage + 1L)), x <- x + halibut__num[,  #>     halibut__age_idx] + herring__num[, herring__age_idx])) #> <environment: 0x563790b79700>"},{"path":"/dev/reference/stock.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 stock storage — stock","title":"Gadget3 stock storage — stock","text":"Define multi-dimensional storage use models, mostly contain state     stocks.","code":""},{"path":"/dev/reference/stock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 stock storage — stock","text":"","code":"g3_stock(var_name, lengthgroups, open_ended = TRUE)  g3_stock_instance(stock, init_value = NA, desc = \"\")  g3_fleet(var_name)  g3_stock_def(stock, name)  g3s_clone(inner_stock, var_name)  g3_is_stock(stock)"},{"path":"/dev/reference/stock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 stock storage — stock","text":"var_name Prefix used instance variables stock. Can multiple     parts concatentated together, see example. lengthgroups Vector defining length groups, entry defining minimum value. open_ended TRUE, final lengthgroups value defines group x:Inf.     FALSE, final lengthgroups value upper bound previous group. inner_stock g3_stock g3_fleet object clone. stock g3_stock g3_fleet. init_value Intially array filled constant, e.g. 1, 0 NaN desc Description array included models name Name definition extract, e.g. \"minlen\".","code":""},{"path":[]},{"path":"/dev/reference/stock.html","id":"g-stock","dir":"Reference","previous_headings":"","what":"g3_stock","title":"Gadget3 stock storage — stock","text":"g3_stock length groups","code":""},{"path":"/dev/reference/stock.html","id":"g-stock-instance","dir":"Reference","previous_headings":"","what":"g3_stock_instance","title":"Gadget3 stock storage — stock","text":"array dimensions matching stock.","code":""},{"path":"/dev/reference/stock.html","id":"g-fleet","dir":"Reference","previous_headings":"","what":"g3_fleet","title":"Gadget3 stock storage — stock","text":"g3_stock without length groups","code":""},{"path":"/dev/reference/stock.html","id":"g-s-clone","dir":"Reference","previous_headings":"","what":"g3s_clone","title":"Gadget3 stock storage — stock","text":"g3_stock identical dimensions inner_stock new name.","code":""},{"path":"/dev/reference/stock.html","id":"g-is-stock","dir":"Reference","previous_headings":"","what":"g3_is_stock","title":"Gadget3 stock storage — stock","text":"TRUE iff stock g3_stock object.","code":""},{"path":"/dev/reference/stock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 stock storage — stock","text":"","code":"# Define a stock with 3 lengthgroups stock <- g3_stock('name', c(1, 10, 100))  # Define a stock with a multi-part name. We can then dig out species name stock <- g3_stock(c(species = 'ling', 'imm'), c(1, 10, 100)) stopifnot( stock$name == 'ling_imm' ) stopifnot( stock$name_parts[['species']] == 'ling' )  # Use stock_instance define storage for mean weight of stock, # has dimensions matching what was defined above. g3_stock_instance(stock, 1, \"Mean weight\") #> length #>    1:10  10:100 100:Inf  #>       1       1       1  #> attr(,\"desc\") #> [1] \"Mean weight\"  # Retrieve the upperlen for the stock g3_stock_def(stock, 'upperlen') #> [1] Inf  # Define a stock, not-open-ended. Now only 2 groups long stock <- g3_stock('name', c(1, 10, 100), open_ended = FALSE)  # Use stock_instance to see what the array would look like g3_stock_instance(stock) #> length #>   1:10 10:100  #>     NA     NA   # Fleets don't have lengthgroups stock <- g3_fleet('name') %>% g3s_livesonareas(1)  # Use stock_instance to see what the array would look like g3_stock_instance(stock) #> area #> area1  #>    NA"},{"path":"/dev/reference/stock_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 stock age dimensions — stock_age","title":"Gadget3 stock age dimensions — stock_age","text":"Add age dimensions g3_stock classes","code":""},{"path":"/dev/reference/stock_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 stock age dimensions — stock_age","text":"","code":"g3s_age(inner_stock, minage, maxage)  g3s_agegroup(inner_stock, agegroups)"},{"path":"/dev/reference/stock_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 stock age dimensions — stock_age","text":"inner_stock g3_stock extend age dimension minage Minimum age store, integer. maxage Maximum age store, integer. agegroups (optionally named) list vectors ages, grouping together.","code":""},{"path":[]},{"path":"/dev/reference/stock_age.html","id":"g-s-age","dir":"Reference","previous_headings":"","what":"g3s_age","title":"Gadget3 stock age dimensions — stock_age","text":"g3_stock additional 'age' dimension. iterating stock, iterate age turn,       age set current integer age. intersecting another stock, anything       age betweem minage maxage. age dimension already exists, redefined new       parameters.","code":""},{"path":"/dev/reference/stock_age.html","id":"g-s-agegroup","dir":"Reference","previous_headings":"","what":"g3s_agegroup","title":"Gadget3 stock age dimensions — stock_age","text":"g3_stock additional 'age' dimension. iterating stock, iterate agegroup turn,       age set first age group. intersecting another stock, anything       age part one groups.","code":""},{"path":"/dev/reference/stock_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 stock age dimensions — stock_age","text":"","code":"# Define a stock with 3 lengthgroups and 3 ages stock <- g3_stock('name', c(1, 10, 100)) %>%     g3s_age(5, 10)  # Use stock_instance to see what the array would look like g3_stock_instance(stock) #>          age #> length    age5 age6 age7 age8 age9 age10 #>   1:10      NA   NA   NA   NA   NA    NA #>   10:100    NA   NA   NA   NA   NA    NA #>   100:Inf   NA   NA   NA   NA   NA    NA  # Define a stock that groups age into \"young\" and \"old\" stock <- g3_stock('name', c(1, 10, 100)) %>%     g3s_agegroup(list(         young = 5:7,         old = 8:10))  # Use stock_instance to see what the array would look like g3_stock_instance(stock) #>          age #> length    young old #>   1:10       NA  NA #>   10:100     NA  NA #>   100:Inf    NA  NA"},{"path":"/dev/reference/stock_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 stock area dimensions — stock_areas","title":"Gadget3 stock area dimensions — stock_areas","text":"Add area dimensions g3_stock classes","code":""},{"path":"/dev/reference/stock_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 stock area dimensions — stock_areas","text":"","code":"g3_areas(area_names)  g3s_livesonareas(inner_stock, areas)  g3s_areagroup(inner_stock, areagroups)"},{"path":"/dev/reference/stock_areas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 stock area dimensions — stock_areas","text":"area_names character vector area names use model inner_stock g3_stock extend area dimension areas vector numeric areas stock part areagroups list mapping names vectors numeric areas stock part ","code":""},{"path":"/dev/reference/stock_areas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 stock area dimensions — stock_areas","text":"g3s_livesonareas breaks stock area.   Within model, areas referred integer, however named   name used report output. area defined variable model area_x,   allowing use names formulas, e.g. run_f = quote( area == area_x ). g3_areas helper map set names integer Inside model area referred integer. g3s_areagroup allows areas combined, mostly used internally   g3l_catchdistribution.","code":""},{"path":[]},{"path":"/dev/reference/stock_areas.html","id":"g-areas","dir":"Reference","previous_headings":"","what":"g3_areas","title":"Gadget3 stock area dimensions — stock_areas","text":"named integer vector, assigning area_names number.","code":""},{"path":"/dev/reference/stock_areas.html","id":"g-s-livesonareas","dir":"Reference","previous_headings":"","what":"g3s_livesonareas","title":"Gadget3 stock area dimensions — stock_areas","text":"g3_stock additional 'area' dimension. iterating stock, iterate area turn,       area set current integer area. intersecting another stock, anything       area also part list areas.","code":""},{"path":"/dev/reference/stock_areas.html","id":"g-s-areagroup","dir":"Reference","previous_headings":"","what":"g3s_areagroup","title":"Gadget3 stock area dimensions — stock_areas","text":"g3_stock additional 'area' dimension. iterating stock, iterate areagroup turn,       area set first area group. intersecting another stock, anything       area part one groups.","code":""},{"path":"/dev/reference/stock_areas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 stock area dimensions — stock_areas","text":"","code":"# Make a lookup so we can refer to areas by name area_names <- g3_areas(c('a', 'b', 'c', 'd', 'e')) stopifnot(area_names == c(a=1, b=2, c=3, d=4, e=5))  # Define a stock with 3 lengthgroups and 3 areas stock <- g3_stock('name', c(1, 10, 100)) %>%     g3s_livesonareas(area_names[c('a', 'b', 'c')])  # Area variables will be defined, so you can refer to them in formulas: g3a_migrate(stock, g3_parameterized(\"migrate_spring\"),     run_f = ~area == area_b && cur_step == 2) #> $`002:name                :001` #> ~{ #>     debug_trace(\"Clear name migration matrix\") #>     name__migratematrix[] <- NaN #> } #> <environment: 0x56378b96aa80> #>  #> $`002:name                :002:f43e386b07dca64199ee` #> ~{ #>     debug_label(\"g3a_migrate: Migration of name\") #>     name__postmigratenum[] <- 0 #>     name__postmigratewgt[] <- 0 #>     for (name__area_idx in seq_along(name__areas)) g3_with(`:=`(area,  #>         name__areas[[name__area_idx]]), if (area == area_b &&  #>         cur_step == 2) { #>         debug_trace(\"Fill in any gaps in the migration matrix\") #>         if (any(is.nan(name__migratematrix[, name__area_idx]))) { #>             for (name__destarea_idx in seq_along(name__areas)) g3_with(`:=`(dest_area,  #>                 name__areas[[name__destarea_idx]]), name__migratematrix[[name__destarea_idx,  #>                 name__area_idx]] <- g3_param(\"migrate_spring\")) #>             name__migratematrix[, name__area_idx] <- g3a_migrate_normalize(name__migratematrix[,  #>                 name__area_idx], name__area_idx, 1) #>         } #>         debug_trace(\"Apply migration matrix to current stock\") #>         for (name__destarea_idx in seq_along(name__areas)) g3_with(`:=`(dest_area,  #>             name__areas[[name__destarea_idx]]), `:=`(migrate_prop,  #>             name__migratematrix[[name__destarea_idx, name__area_idx]]),  #>             { #>                 name__postmigratewgt[, name__destarea_idx] <- ratio_add_vec(name__postmigratewgt[,  #>                   name__destarea_idx], name__postmigratenum[,  #>                   name__destarea_idx], name__wgt[, name__area_idx],  #>                   migrate_prop * name__num[, name__area_idx]) #>                 name__postmigratenum[, name__destarea_idx] <- name__postmigratenum[,  #>                   name__destarea_idx] + migrate_prop * name__num[,  #>                   name__area_idx] #>             }) #>     } #>     else { #>         debug_trace(\"Copy not-migrating stocks\") #>         name__postmigratewgt[, name__area_idx] <- name__postmigratewgt[,  #>             name__area_idx] + name__wgt[, name__area_idx] #>         name__postmigratenum[, name__area_idx] <- name__postmigratenum[,  #>             name__area_idx] + name__num[, name__area_idx] #>     }) #>     debug_trace(\"Switch around __postmigratenum and __num\") #>     name__num <- name__postmigratenum #>     name__wgt <- name__postmigratewgt #> } #> <environment: 0x563790ca6a60> #>   # Use stock_instance to see what the array would look like g3_stock_instance(stock) #>          area #> length     a  b  c #>   1:10    NA NA NA #>   10:100  NA NA NA #>   100:Inf NA NA NA  # Define a stock that groups areas into \"north\" and \"south\" stock <- g3_stock('name', c(1, 10, 100)) %>%     g3s_areagroup(list(         north = area_names[c('a', 'b', 'c')],         south = area_names[c('d', 'e')]))  # Use stock_instance to see what the array would look like g3_stock_instance(stock) #>          area #> length    north south #>   1:10       NA    NA #>   10:100     NA    NA #>   100:Inf    NA    NA"},{"path":"/dev/reference/stock_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 tag dimension — stock_tag","title":"Gadget3 tag dimension — stock_tag","text":"Add tag dimensions g3_stock classes","code":""},{"path":"/dev/reference/stock_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 tag dimension — stock_tag","text":"","code":"g3s_tag(inner_stock, tag_ids, force_untagged = TRUE)"},{"path":"/dev/reference/stock_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 tag dimension — stock_tag","text":"inner_stock g3_stock extend area dimension tag_ids vector numeric tags stock can , generated seq_along, e.g.     Tag ID 0 considered \"untagged\". force_untagged TRUE, \"untagged\" tag 0 present added.","code":""},{"path":[]},{"path":"/dev/reference/stock_tag.html","id":"g-s-tag","dir":"Reference","previous_headings":"","what":"g3s_tag","title":"Gadget3 tag dimension — stock_tag","text":"g3_stock additional 'tag' dimension. iterating stock, iterate tag turn,       tag set current integer area. interacting another stock, iterate tag turn,       variable name depend scenario, e.g. prey_tag.","code":""},{"path":"/dev/reference/stock_tag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 tag dimension — stock_tag","text":"","code":"# Make a lookup of text names to integers tags <- c('H1-00', 'H1-01') tags <- structure(seq_along(tags), names = tags)  # prey_a can have any of these tags prey_a <- g3_stock('prey_a', seq(1, 10)) %>% g3s_tag(tags)  # Use stock_instance to see what the array would look like g3_stock_instance(prey_a) #>         tag #> length   untagged H1-00 H1-01 #>   1:2          NA    NA    NA #>   2:3          NA    NA    NA #>   3:4          NA    NA    NA #>   4:5          NA    NA    NA #>   5:6          NA    NA    NA #>   6:7          NA    NA    NA #>   7:8          NA    NA    NA #>   8:9          NA    NA    NA #>   9:10         NA    NA    NA #>   10:Inf       NA    NA    NA"},{"path":"/dev/reference/stock_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 stock time dimensions — stock_time","title":"Gadget3 stock time dimensions — stock_time","text":"Add time dimensions g3_stock classes","code":""},{"path":"/dev/reference/stock_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 stock time dimensions — stock_time","text":"","code":"g3s_time_convert(year_or_time, step = NULL)  g3s_time(inner_stock, times, year = NULL, step = NULL)"},{"path":"/dev/reference/stock_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 stock time dimensions — stock_time","text":"year_or_time Etiher vector years, vector year & step strings, e.g. \"1999-01\". year Vector years, used generate times provided. step Vector steps, used generate times provided. inner_stock g3_stock extend time dimension times vector year/step integers generated g3s_time_convert","code":""},{"path":[]},{"path":"/dev/reference/stock_time.html","id":"g-s-time-convert","dir":"Reference","previous_headings":"","what":"g3s_time_convert","title":"Gadget3 stock time dimensions — stock_time","text":"single integer vector representing year step. step NULL, returns year, otherwise year * 1000 + step.","code":""},{"path":"/dev/reference/stock_time.html","id":"g-s-time","dir":"Reference","previous_headings":"","what":"g3s_time","title":"Gadget3 stock time dimensions — stock_time","text":"g3_stock additional 'time' dimension. year/step provided, time defined , otherwise times. g3_stock support iterating,       intersecting. intersecting another stock, anything       cur_year cur_step matches time stored vector","code":""},{"path":"/dev/reference/stock_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 stock time dimensions — stock_time","text":"","code":"# Define a stock with 3 lengthgroups and 3 years, not continuous # When used, all steps within a year will be aggregated, year 2002 will be ignored. stock <- g3_stock('name', c(1, 10, 100)) %>%     g3s_time(year = c(2000, 2001, 2003))  # Use stock_instance to see what the array would look like g3_stock_instance(stock) #>          time #> length    2000 2001 2003 #>   1:10      NA   NA   NA #>   10:100    NA   NA   NA #>   100:Inf   NA   NA   NA  # Define a stock with 3 lengthgroups and 3 years, 2 steps # The dimension will have 6 entries, 2000.1, 2000.2, 2001.1, 2001.2, 2002.1, 2002.2 stock <- g3_stock('name', c(1, 10, 100)) %>%     g3s_time(year = c(2000, 2001, 2002), step = 1:2)  # Use stock_instance to see what the array would look like g3_stock_instance(stock) #>          time #> length    2000-01 2000-02 2001-01 2001-02 2002-01 2002-02 #>   1:10         NA      NA      NA      NA      NA      NA #>   10:100       NA      NA      NA      NA      NA      NA #>   100:Inf      NA      NA      NA      NA      NA      NA  # g3s_time_convert is best used with a data.frame data <- read.table(header = TRUE, text = ' year step 2001 1 2001 2 # NB: No \"2002 1\" 2002 2 ') stock <- g3_stock('name', c(1, 10, 100)) %>%     g3s_time(times = g3s_time_convert(data$year, data$step))  # Will also parse strings g3s_time_convert(c(\"1999-01\", \"1999-02\")) #> [1] 199901 199902  # Use stock_instance to see what the array would look like g3_stock_instance(stock) #>          time #> length    2001-01 2001-02 2002-02 #>   1:10         NA      NA      NA #>   10:100       NA      NA      NA #>   100:Inf      NA      NA      NA"},{"path":"/dev/reference/suitability.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 suitability formulae — suitability","title":"Gadget3 suitability formulae — suitability","text":"Formula-returning functions describing length suitability relationships.","code":""},{"path":"/dev/reference/suitability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 suitability formulae — suitability","text":"","code":"g3_suitability_exponentiall50(     alpha = g3_parameterized(\"alpha\", by_stock = by_stock, by_predator = by_predator),     l50 = g3_parameterized(\"l50\", by_stock = by_stock, by_predator = by_predator),     by_stock = TRUE,     by_predator = TRUE)  g3_suitability_andersen(p0, p1, p2, p3 = p4, p4, p5 = quote( predator_length ))  g3_suitability_andersenfleet(         p0 = g3_parameterized('andersen.p0', value = 0, optimise = FALSE,                               by_stock = by_stock),         p1 = g3_parameterized('andersen.p1', value = log(2),                               by_stock = by_stock, by_predator = by_predator),         p2 = g3_parameterized('andersen.p2', value = 1, optimise = FALSE,                               by_stock = by_stock),         p3 = g3_parameterized('andersen.p3', value = 0.1, exponentiate = exponentiate,                               by_stock = by_stock, by_predator = by_predator),         p4 = g3_parameterized('andersen.p4', value = 0.1, exponentiate = exponentiate,                               by_stock = by_stock, by_predator = by_predator),         p5 = quote( stock__maxmidlen ),         by_stock = TRUE,         by_predator = TRUE,         exponentiate = TRUE)  g3_suitability_gamma(alpha, beta, gamma)  g3_suitability_exponential(alpha, beta, gamma, delta)  g3_suitability_straightline(alpha, beta)  g3_suitability_constant(alpha)  g3_suitability_richards(p0, p1, p2, p3, p4)"},{"path":"/dev/reference/suitability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 suitability formulae — suitability","text":"alpha,beta,gamma,delta,l50,p0,p1,p2,p3,p4,p5 formula substituted calcuations, see . by_stock Change default parameterisation (e.g. 'species'), passed default calls     g3_parameterized. by_predator Change default parameterisation (e.g. 'fleet'), passed default calls     g3_parameterized. exponentiate Exponentiate parameters,passed default calls     g3_parameterized.","code":""},{"path":"/dev/reference/suitability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 suitability formulae — suitability","text":"using describe predator/prey relationship, stock midlength \\(l\\) refer prey midlength.","code":""},{"path":"/dev/reference/suitability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gadget3 suitability formulae — suitability","text":"functions return formula use g3a_predate_fleet's suitabilities argument:","code":""},{"path":"/dev/reference/suitability.html","id":"g-suitability-exponentiall-","dir":"Reference","previous_headings":"","what":"g3_suitability_exponentiall50","title":"Gadget3 suitability formulae — suitability","text":"logarithmic dependence length prey given following equation     (note prey length dependence actually dependant difference length prey \\(l_{50}\\)): $$       \\frac{1}{ 1 + e^{-\\alpha (l - l_{50})} }     $$ \\(l\\) Vector stock midlength lengthgroup \\(l_{50}\\) Length stock 50% probability predation, parameter l50","code":""},{"path":"/dev/reference/suitability.html","id":"g-suitability-andersen","dir":"Reference","previous_headings":"","what":"g3_suitability_andersen","title":"Gadget3 suitability formulae — suitability","text":"general suitability function dependant ratio predator length prey length given following equation: \\(p_3 = p_4\\):     $$       p_0 + p_2 e^{-\\frac{(x - p_1)^2}{p_4}}     $$ Otherwise: $$       p_0       + p_2 e^{-\\frac{(x - p_1)^2}{p_4}} * \\min(\\max(p_1 - x, 0), 1)       + p_2 e^{-\\frac{(x - p_1)^2}{p_3}} * \\min(\\max(x, 0), 1)     $$     ....e \\(\\log\\frac{L}{l} <= p_1\\) \\(p_3\\) used place \\(p_4\\).  \\(x\\) \\(\\log\\frac{p_5}{l}\\) \\(L\\) Vector predator midlength lengthgroup \\(l\\) Vector stock midlength lengthgroup \\(p_0\\) .. \\(p_4\\) Function parameter p0 .. p4 \\(p_5\\) Function parameter p5, unspecified uses \\(L\\), Vector predator midlength lengthgroup. NB: Specifying \\(p_5\\) equivalent using andersenfleet function gadget2.","code":""},{"path":"/dev/reference/suitability.html","id":"g-suitability-andersenfleet","dir":"Reference","previous_headings":"","what":"g3_suitability_andersenfleet","title":"Gadget3 suitability formulae — suitability","text":"simplified version g3_suitability_andersen, suitable predation fleets,     defaults rely predator's length.","code":""},{"path":"/dev/reference/suitability.html","id":"g-suitability-gamma","dir":"Reference","previous_headings":"","what":"g3_suitability_gamma","title":"Gadget3 suitability formulae — suitability","text":"suitability function suitable use considering predation fleet,     parameter \\(\\gamma\\) represent size mesh used fleet (specified centimetres). $$       (\\frac{l}{(\\alpha - 1)\\beta\\gamma}) ^ {(\\alpha - 1) e^{\\alpha - 1 - \\frac{l}{\\beta\\gamma}}}     $$ \\(l\\) Vector stock midlength lengthgroup \\(\\alpha\\) Function parameter alpha \\(\\beta\\) Function parameter beta \\(\\gamma\\) Function parameter gamma suitability function suitable use     considering predation fleet, parameter \\(\\gamma\\)     represent size mesh used fleet (specified     centimetres).","code":""},{"path":"/dev/reference/suitability.html","id":"g-suitability-exponential","dir":"Reference","previous_headings":"","what":"g3_suitability_exponential","title":"Gadget3 suitability formulae — suitability","text":"suitability function logarithmic dependence length predator length prey given following equation: $$       \\frac{\\delta}{1 + e^{-\\alpha - \\beta l - \\gamma L}}     $$ \\(L\\) Vector predator midlength lengthgroup \\(l\\) Vector stock midlength lengthgroup \\(\\alpha\\) Function parameter alpha \\(\\beta\\) Function parameter beta \\(\\gamma\\) Function parameter gamma \\(\\delta\\) Function parameter delta","code":""},{"path":"/dev/reference/suitability.html","id":"g-suitability-straightline","dir":"Reference","previous_headings":"","what":"g3_suitability_straightline","title":"Gadget3 suitability formulae — suitability","text":"Returns formula use predation function's suitabilities argument: $$       \\alpha + \\beta l     $$ \\(l\\) Vector stock midlength lengthgroup \\(\\alpha\\) Function parameter alpha \\(\\beta\\) Function parameter beta","code":""},{"path":"/dev/reference/suitability.html","id":"g-suitability-constant","dir":"Reference","previous_headings":"","what":"g3_suitability_constant","title":"Gadget3 suitability formulae — suitability","text":"Returns formula use predation function's suitabilities argument: $$       \\alpha     $$ \\(\\alpha\\) Function parameter alpha","code":""},{"path":"/dev/reference/suitability.html","id":"g-suitability-richards","dir":"Reference","previous_headings":"","what":"g3_suitability_richards","title":"Gadget3 suitability formulae — suitability","text":"Returns formula use predation function's suitabilities argument: $$       {\\big( \\frac{p_3}{1 + e^{-p_0 - p_1 l - p_2 L}} \\big)}^{\\frac{1}{p_4}}     $$ \\(L\\) Vector predator midlength lengthgroup \\(l\\) Vector stock midlength lengthgroup \\(p_0\\) .. \\(p_4\\) Function parameter p0 .. p4 extension g3_suitability_exponential.","code":""},{"path":[]},{"path":"/dev/reference/suitability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 suitability formulae — suitability","text":"","code":"ling_imm <- g3_stock(c(species = 'ling', 'imm'), seq(20, 156, 4)) %>% g3s_age(3, 10) ling_mat <- g3_stock(c(species = 'ling', 'mat'), seq(20, 156, 4)) %>% g3s_age(5, 15) igfs <- g3_fleet('igfs')  igfs_landings <-   structure(expand.grid(year=1990:1994, step=2, area=1, total_weight=1),             area_group = list(`1` = 1))  # Generate a fleet predation action using g3_suitability_exponentiall50 predate_action <- g3a_predate_fleet(     igfs,     list(ling_imm, ling_mat),     suitabilities = list(         ling_imm = g3_suitability_exponentiall50(             g3_parameterized('lln.alpha', by_stock = 'species'),             g3_parameterized('lln.l50', by_stock = 'species')),         ling_mat = g3_suitability_exponentiall50(             g3_parameterized('lln.alpha', by_stock = 'species'),             g3_parameterized('lln.l50', by_stock = 'species'))),     catchability = g3a_predate_catchability_totalfleet(         g3_timeareadata('igfs_landings', igfs_landings)))  # You can use g3_eval to directly calculate values for a stock: g3_eval(     g3_suitability_exponentiall50(alpha = 0.2, l50 = 60),     stock = g3_stock('x', seq(0, 100, 10)) ) #>         0:10        10:20        20:30        30:40        40:50        50:60  #> 1.670142e-05 1.233946e-04 9.110512e-04 6.692851e-03 4.742587e-02 2.689414e-01  #>        60:70        70:80        80:90       90:100      100:Inf  #> 7.310586e-01 9.525741e-01 9.933071e-01 9.990889e-01 9.998766e-01  #> attr(,\"class\") #> [1] \"force_vector\" \"numeric\"       ## Plots suit_plot <- function (     fn,     stock = g3_stock('x', seq(0, 100, 10)),     predator_length = 140 ) {   cols <- rainbow(5)   par(mar = c(2,2,2,2), cex.main = 1)    plot(     g3_stock_def(stock, 'midlen'),     seq(0, 1, length.out = length(g3_stock_def(stock, 'midlen'))),     main=deparse1(body(fn)),     type = \"n\")   for (a in seq_along(cols)) lines(     g3_stock_def(stock, 'midlen'),     g3_eval(fn(a), stock = stock, predator_length = predator_length),     type = \"o\", col = cols[[a]] ) }  suit_plot(function (a) g3_suitability_exponentiall50(alpha = a * 0.1, l50 = 50))  suit_plot(function (a) g3_suitability_andersen(0, log(2), 1, p3 = a * 0.1, 0.1, 140))  suit_plot(function (a) g3_suitability_andersen(0, log(2), 1, 0.1, p4 = a * 0.1, 140))  suit_plot(function (a) g3_suitability_gamma(alpha = 2 + a * 0.1, beta = 1, gamma = 40))  suit_plot(function (a) g3_suitability_exponential(0, 0.01 * a, 0, 1))  suit_plot(function (a) g3_suitability_straightline(alpha = 0.1, beta = 0.01 * a))  suit_plot(function (a) g3_suitability_constant(a * 0.1))  suit_plot(function (a) g3_suitability_richards(0, 0.05, 0, 1, 0.1 * a))"},{"path":"/dev/reference/timedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 time-based data — timedata","title":"Gadget3 time-based data — timedata","text":"Convert time-based data formula lookup values","code":""},{"path":"/dev/reference/timedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 time-based data — timedata","text":"","code":"g3_timeareadata(lookup_name, df, value_field = \"total_weight\", areas = NULL)"},{"path":"/dev/reference/timedata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 time-based data — timedata","text":"lookup_name unique name lookup, e.g. \"igfs_landings\". df data.frame columns age, area, year step, finally value_field. value_field Column name contains output value. areas Named integer vector area names integer values. See g3s_livesonareas.","code":""},{"path":"/dev/reference/timedata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gadget3 time-based data — timedata","text":"formula object looks value_field current   values age, area, cur_year cur_step,   depending columns df. match, return 0.","code":""},{"path":"/dev/reference/timedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 time-based data — timedata","text":"","code":"ling_imm <- g3_stock(c(species = 'ling', 'imm'), seq(20, 156, 4)) %>% g3s_age(3, 10) ling_mat <- g3_stock(c(species = 'ling', 'mat'), seq(20, 156, 4)) %>% g3s_age(5, 15) igfs <- g3_fleet('igfs')  igfs_landings <-   structure(expand.grid(year=1990:1994, step=2, area=1, total_weight=1),             area_group = list(`1` = 1))  # Generate a fleet predation action, use g3_timeareadata to supply landings # NB: Since igfs_landings only contains values for step=2, there will be no #     predation on other steps (since g3_timeareadata will return 0). predate_action <- g3a_predate_fleet(     igfs,     list(ling_imm, ling_mat),     suitabilities = list(         ling_imm = g3_suitability_exponentiall50(             g3_parameterized('lln.alpha', by_stock = 'species'),             g3_parameterized('lln.l50', by_stock = 'species')),         ling_mat = g3_suitability_exponentiall50(             g3_parameterized('lln.alpha', by_stock = 'species'),             g3_parameterized('lln.l50', by_stock = 'species'))),     catchability = g3a_predate_catchability_totalfleet(         g3_timeareadata('igfs_landings', igfs_landings)))"},{"path":"/dev/reference/timevariable.html","id":null,"dir":"Reference","previous_headings":"","what":"Gadget3 time-based formulas — timevariable","title":"Gadget3 time-based formulas — timevariable","text":"Switch formula based current time step","code":""},{"path":"/dev/reference/timevariable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gadget3 time-based formulas — timevariable","text":"","code":"g3_timevariable(lookup_name, fs)"},{"path":"/dev/reference/timevariable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gadget3 time-based formulas — timevariable","text":"lookup_name unique name lookup, e.g. \"igfs_landings\". fs list formula objects, named either \"init\", \"(year)\"     \"(year)-(step)\".     matching time step reached, value lookup changed.","code":""},{"path":"/dev/reference/timevariable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gadget3 time-based formulas — timevariable","text":"mostly backwards compatibility gadget2, using ,   consider simpler options, e.g. g3_timeareadata   by_year option g3_parameterized.","code":""},{"path":"/dev/reference/timevariable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gadget3 time-based formulas — timevariable","text":"formula object switch values given time points.","code":""},{"path":"/dev/reference/timevariable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gadget3 time-based formulas — timevariable","text":"","code":"ling_imm <- g3_stock('ling_imm', seq(20, 156, 4)) %>% g3s_age(3, 10)  naturalmortality_action <- g3a_naturalmortality(ling_imm,     g3a_naturalmortality_exp( g3_timevariable(\"lingimm.M\", list(         # Start off using lingimm.M.early         \"init\" = g3_parameterized(\"lingimm.M.early\"),         # At 2005 step 2, switch to lingimm.M.mid         \"2005-02\" = g3_parameterized(\"lingimm.M.mid\"),         # At 2010 step 1, switch to lingimm.M.late         \"2010\" = g3_parameterized(\"lingimm.M.late\")))))"},{"path":[]},{"path":[]},{"path":"/dev/news/index.html","id":"bug-fixes-0-12-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"gadget3 0.12-0:","text":"g3a_spawn() splits offspring multiple stocks correctly","code":""},{"path":"/dev/news/index.html","id":"new-features-0-12-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gadget3 0.12-0:","text":"Split likelihood distribution predator_length / predator_age / predator_tag #154 Predation support, see ?g3a_predate / ?g3a_predate_catchability_predator #29 g3a_otherfood, g3a_otherfood_normalparam, g3a_otherfood_normalcv #155 Support length transform_fs g3l_catchdistribution #95","code":""},{"path":[]},{"path":"/dev/news/index.html","id":"bug-fixes-0-11-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"gadget3 0.11-0:","text":"g3_to_r() output can debugged R-Studio Unknown stock names likelihood data now error g3l_distribution_surveyindices_*() can now broken age without error","code":""},{"path":"/dev/news/index.html","id":"new-features-0-11-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gadget3 0.11-0:","text":"Add g3_parameterized('x', by_year = 1998:2099) override year range parameters Add g3a_initialconditions_normalcv initialconditions driven lencv parameter Add g3a_renewal_normalcv initialconditions driven lencv parameter by_predator parameter g3_parameterized Defaults g3_suitability_exponentiall50 Support cut() formatted character columns well factor columns likelihood observation data. Add g3_init_val() helper, replace gadgetutils::g3_init_guess() Add g3_areas() helper create numbered area vectors Add g3_distribution_preview() helper see observatation data converted array period now optional g3l_random_walk(), g3l_random_dnorm() g3l_bounds_penalty() can now generate bounds actions update automatically","code":""},{"path":"/dev/news/index.html","id":"breaking-changes-0-11-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"gadget3 0.11-0:","text":"g3l_distribution_surveyindices_* now default beta = 1, set beta = NULL restore previous behaviour. stock_param() & stock_param_table() replaced stock_prepend() Remove unused g3_to_tmb(adreport_re) option #60 Naturalmortality M now -age default #113 g3_suitability_andersenfleet() now uses by_predator = TRUE default #133","code":""},{"path":[]},{"path":"/dev/news/index.html","id":"new-features-0-10-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gadget3 0.10-0:","text":"Add g3_parameterized('x', by_step = TRUE) seasonal parameters #115 Support R factor levels well MFDB-style attributes likelihood observation data. means dplyr group_by(length = cut(...)) can used well MFDB groupings #112 Parameterised defaults g3l_understocking(), g3a_naturalmortality(), g3a_renewal_normalparam() Add g3a_renewal_vonb_t0() & g3a_renewal_vonb_recl(), g3a_renewal_vonb() alias latter","code":""},{"path":"/dev/news/index.html","id":"bug-fixes-0-10-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"gadget3 0.10-0:","text":"g3s_modeltime() (used history) now works final_year_steps set Stop assuming 1-dimensional R arrays TMB vectors.","code":""},{"path":"/dev/news/index.html","id":"breaking-changes-0-10-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"gadget3 0.10-0:","text":"Remove scale = 0.001 default K parameters g3a_grow, g3a_renew_* g3a_renewal_vonb_t0() now default mean_f *_normalparam() g3a_initialconditions_normalparam() now offsets age mean_f (.e. VonB formula) cur_step_size, effect running step -1.","code":""},{"path":"/dev/news/index.html","id":"gadget3-09-0","dir":"Changelog","previous_headings":"","what":"gadget3 0.9-0:","title":"gadget3 0.9-0:","text":"CRAN release: 2023-05-18","code":""},{"path":"/dev/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"gadget3 0.9-0:","text":"g3_suitability_andersen() now produces sensible values - https://github.com/gadget-framework/gadget3/issues/108 g3a_age() now supports stocks single age (.e. minage == maxage)","code":""},{"path":"/dev/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gadget3 0.9-0:","text":"Add recage parameter g3a_renewal_vonb / g3a_renewal_initabund Add g3_suitability_andersenfleet(), fleet-specialised andsersen suitability function. Make g3_is_stock() public g3_eval(), evaluate snippets gadget3 model.","code":""},{"path":"/dev/news/index.html","id":"breaking-changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"gadget3 0.9-0:","text":"g3l_distribution_*(transform_fs = ...) now happens aggregation, . matrix used now expressed terms stock, aggregated age. g3_param_table() now returns NaN (warns) missing value, instead aborting. optim(g3_tmb_par(...)) now error. optimising, always use obj.fun$par.","code":""},{"path":"/dev/news/index.html","id":"new-features-0-9-0-1","dir":"Changelog","previous_headings":"","what":"New features","title":"gadget3 0.9-0:","text":"Support .vector(array) TMB formulas, arrays can used TMB vectorized functions, e.g. pnorm(.vector(ar[,1])).","code":""},{"path":[]},{"path":"/dev/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gadget3 0.8-0:","text":"Initial CRAN release","code":""}]
